// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sao/sao/renew_proposal.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RenewProposal struct {
	Owner    string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Duration uint64   `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Timeout  int32    `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Data     []string `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *RenewProposal) Reset()         { *m = RenewProposal{} }
func (m *RenewProposal) String() string { return proto.CompactTextString(m) }
func (*RenewProposal) ProtoMessage()    {}
func (*RenewProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_465de35d14513518, []int{0}
}
func (m *RenewProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenewProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenewProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenewProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewProposal.Merge(m, src)
}
func (m *RenewProposal) XXX_Size() int {
	return m.Size()
}
func (m *RenewProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RenewProposal proto.InternalMessageInfo

func (m *RenewProposal) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *RenewProposal) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *RenewProposal) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *RenewProposal) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RenewProposal)(nil), "saonetwork.sao.sao.RenewProposal")
}

func init() { proto.RegisterFile("sao/sao/renew_proposal.proto", fileDescriptor_465de35d14513518) }

var fileDescriptor_465de35d14513518 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x4e, 0xcc, 0xd7,
	0x07, 0xe1, 0xa2, 0xd4, 0xbc, 0xd4, 0xf2, 0xf8, 0x82, 0xa2, 0xfc, 0x82, 0xfc, 0xe2, 0xc4, 0x1c,
	0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xa1, 0xe2, 0xc4, 0xfc, 0xbc, 0xd4, 0x92, 0xf2, 0xfc,
	0xa2, 0x6c, 0xbd, 0xe2, 0xc4, 0x7c, 0x10, 0x56, 0xca, 0xe7, 0xe2, 0x0d, 0x02, 0xa9, 0x0d, 0x80,
	0x2a, 0x15, 0x12, 0xe1, 0x62, 0xcd, 0x2f, 0xcf, 0x4b, 0x2d, 0x92, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x82, 0x70, 0x84, 0xa4, 0xb8, 0x38, 0x52, 0x4a, 0x8b, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x24,
	0x98, 0x14, 0x18, 0x35, 0x58, 0x82, 0xe0, 0x7c, 0x21, 0x09, 0x2e, 0xf6, 0x92, 0xcc, 0xdc, 0xd4,
	0xfc, 0xd2, 0x12, 0x09, 0x66, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x18, 0x57, 0x48, 0x88, 0x8b, 0x25,
	0x25, 0xb1, 0x24, 0x51, 0x82, 0x45, 0x81, 0x59, 0x83, 0x33, 0x08, 0xcc, 0x76, 0xb2, 0x3f, 0xf1,
	0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8,
	0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xd5, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24,
	0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xe0, 0xc4, 0x7c, 0x3f, 0x88, 0x4b, 0xc1, 0xde, 0xa9, 0x00, 0x93,
	0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0xcf, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x23, 0x45, 0xbe, 0x62, 0xec, 0x00, 0x00, 0x00,
}

func (m *RenewProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenewProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenewProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Data[iNdEx])
			copy(dAtA[i:], m.Data[iNdEx])
			i = encodeVarintRenewProposal(dAtA, i, uint64(len(m.Data[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Timeout != 0 {
		i = encodeVarintRenewProposal(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x18
	}
	if m.Duration != 0 {
		i = encodeVarintRenewProposal(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintRenewProposal(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRenewProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovRenewProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RenewProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovRenewProposal(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovRenewProposal(uint64(m.Duration))
	}
	if m.Timeout != 0 {
		n += 1 + sovRenewProposal(uint64(m.Timeout))
	}
	if len(m.Data) > 0 {
		for _, s := range m.Data {
			l = len(s)
			n += 1 + l + sovRenewProposal(uint64(l))
		}
	}
	return n
}

func sovRenewProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRenewProposal(x uint64) (n int) {
	return sovRenewProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RenewProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenewProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenewProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenewProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenewProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRenewProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRenewProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenewProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenewProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenewProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRenewProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRenewProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRenewProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenewProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRenewProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRenewProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRenewProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRenewProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRenewProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRenewProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRenewProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRenewProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRenewProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRenewProposal = fmt.Errorf("proto: unexpected end of group")
)
