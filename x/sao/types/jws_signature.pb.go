// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sao/sao/jws_signature.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type JwsSignature struct {
	Protected string `protobuf:"bytes,1,opt,name=protected,proto3" json:"protected,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *JwsSignature) Reset()         { *m = JwsSignature{} }
func (m *JwsSignature) String() string { return proto.CompactTextString(m) }
func (*JwsSignature) ProtoMessage()    {}
func (*JwsSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c63c89e5afa54d0, []int{0}
}
func (m *JwsSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JwsSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JwsSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JwsSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JwsSignature.Merge(m, src)
}
func (m *JwsSignature) XXX_Size() int {
	return m.Size()
}
func (m *JwsSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_JwsSignature.DiscardUnknown(m)
}

var xxx_messageInfo_JwsSignature proto.InternalMessageInfo

func (m *JwsSignature) GetProtected() string {
	if m != nil {
		return m.Protected
	}
	return ""
}

func (m *JwsSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func init() {
	proto.RegisterType((*JwsSignature)(nil), "saonetwork.sao.sao.JwsSignature")
}

func init() { proto.RegisterFile("sao/sao/jws_signature.proto", fileDescriptor_6c63c89e5afa54d0) }

var fileDescriptor_6c63c89e5afa54d0 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x4e, 0xcc, 0xd7,
	0x07, 0xe1, 0xac, 0xf2, 0xe2, 0xf8, 0xe2, 0xcc, 0xf4, 0xbc, 0xc4, 0x92, 0xd2, 0xa2, 0x54, 0xbd,
	0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0xa1, 0xe2, 0xc4, 0xfc, 0xbc, 0xd4, 0x92, 0xf2, 0xfc, 0xa2,
	0x6c, 0xbd, 0xe2, 0xc4, 0x7c, 0x10, 0x56, 0xf2, 0xe2, 0xe2, 0xf1, 0x2a, 0x2f, 0x0e, 0x86, 0xa9,
	0x14, 0x92, 0xe1, 0xe2, 0x04, 0x29, 0x4e, 0x4d, 0x2e, 0x49, 0x4d, 0x91, 0x60, 0x54, 0x60, 0xd4,
	0xe0, 0x0c, 0x42, 0x08, 0x80, 0x64, 0xe1, 0x86, 0x4a, 0x30, 0x41, 0x64, 0xe1, 0x02, 0x4e, 0xf6,
	0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72,
	0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x9a, 0x9e, 0x59, 0x92, 0x51,
	0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x1f, 0x9c, 0x98, 0xef, 0x07, 0x71, 0x04, 0xd8, 0xa1, 0x15,
	0x60, 0xb2, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0xec, 0x4e, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x3c, 0x6a, 0xd1, 0xb4, 0xc6, 0x00, 0x00, 0x00,
}

func (m *JwsSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JwsSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JwsSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintJwsSignature(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Protected) > 0 {
		i -= len(m.Protected)
		copy(dAtA[i:], m.Protected)
		i = encodeVarintJwsSignature(dAtA, i, uint64(len(m.Protected)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintJwsSignature(dAtA []byte, offset int, v uint64) int {
	offset -= sovJwsSignature(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *JwsSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Protected)
	if l > 0 {
		n += 1 + l + sovJwsSignature(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovJwsSignature(uint64(l))
	}
	return n
}

func sovJwsSignature(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJwsSignature(x uint64) (n int) {
	return sovJwsSignature(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JwsSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJwsSignature
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JwsSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JwsSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protected", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwsSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJwsSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJwsSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protected = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwsSignature
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJwsSignature
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJwsSignature
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJwsSignature(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthJwsSignature
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJwsSignature(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJwsSignature
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJwsSignature
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJwsSignature
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJwsSignature
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJwsSignature
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJwsSignature
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJwsSignature        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJwsSignature          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJwsSignature = fmt.Errorf("proto: unexpected end of group")
)
