// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sao/sao/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryMetadataRequest struct {
	Proposal     QueryProposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal"`
	JwsSignature JwsSignature  `protobuf:"bytes,2,opt,name=jws_signature,json=jwsSignature,proto3" json:"jws_signature"`
}

func (m *QueryMetadataRequest) Reset()         { *m = QueryMetadataRequest{} }
func (m *QueryMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMetadataRequest) ProtoMessage()    {}
func (*QueryMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{2}
}
func (m *QueryMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMetadataRequest.Merge(m, src)
}
func (m *QueryMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMetadataRequest proto.InternalMessageInfo

func (m *QueryMetadataRequest) GetProposal() QueryProposal {
	if m != nil {
		return m.Proposal
	}
	return QueryProposal{}
}

func (m *QueryMetadataRequest) GetJwsSignature() JwsSignature {
	if m != nil {
		return m.JwsSignature
	}
	return JwsSignature{}
}

type QueryMetadataResponse struct {
	Metadata Metadata              `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata"`
	Shards   map[string]*ShardMeta `protobuf:"bytes,2,rep,name=shards,proto3" json:"shards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryMetadataResponse) Reset()         { *m = QueryMetadataResponse{} }
func (m *QueryMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMetadataResponse) ProtoMessage()    {}
func (*QueryMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{3}
}
func (m *QueryMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMetadataResponse.Merge(m, src)
}
func (m *QueryMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMetadataResponse proto.InternalMessageInfo

func (m *QueryMetadataResponse) GetMetadata() Metadata {
	if m != nil {
		return m.Metadata
	}
	return Metadata{}
}

func (m *QueryMetadataResponse) GetShards() map[string]*ShardMeta {
	if m != nil {
		return m.Shards
	}
	return nil
}

type QueryLatesthightRequest struct {
}

func (m *QueryLatesthightRequest) Reset()         { *m = QueryLatesthightRequest{} }
func (m *QueryLatesthightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatesthightRequest) ProtoMessage()    {}
func (*QueryLatesthightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{4}
}
func (m *QueryLatesthightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatesthightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatesthightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatesthightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatesthightRequest.Merge(m, src)
}
func (m *QueryLatesthightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatesthightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatesthightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatesthightRequest proto.InternalMessageInfo

type QueryLatesthightResponse struct {
	LatestBlockHeight uint64 `protobuf:"varint,1,opt,name=latest_block_height,json=latestBlockHeight,proto3" json:"latest_block_height,omitempty"`
	LatestBlockTime   string `protobuf:"bytes,2,opt,name=latest_block_time,json=latestBlockTime,proto3" json:"latest_block_time,omitempty"`
}

func (m *QueryLatesthightResponse) Reset()         { *m = QueryLatesthightResponse{} }
func (m *QueryLatesthightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatesthightResponse) ProtoMessage()    {}
func (*QueryLatesthightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{5}
}
func (m *QueryLatesthightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatesthightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatesthightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatesthightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatesthightResponse.Merge(m, src)
}
func (m *QueryLatesthightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatesthightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatesthightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatesthightResponse proto.InternalMessageInfo

func (m *QueryLatesthightResponse) GetLatestBlockHeight() uint64 {
	if m != nil {
		return m.LatestBlockHeight
	}
	return 0
}

func (m *QueryLatesthightResponse) GetLatestBlockTime() string {
	if m != nil {
		return m.LatestBlockTime
	}
	return ""
}

type QueryGetTimeoutOrderRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryGetTimeoutOrderRequest) Reset()         { *m = QueryGetTimeoutOrderRequest{} }
func (m *QueryGetTimeoutOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimeoutOrderRequest) ProtoMessage()    {}
func (*QueryGetTimeoutOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{6}
}
func (m *QueryGetTimeoutOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimeoutOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimeoutOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimeoutOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimeoutOrderRequest.Merge(m, src)
}
func (m *QueryGetTimeoutOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimeoutOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimeoutOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimeoutOrderRequest proto.InternalMessageInfo

func (m *QueryGetTimeoutOrderRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryGetTimeoutOrderResponse struct {
	TimeoutOrder TimeoutOrder `protobuf:"bytes,1,opt,name=timeoutOrder,proto3" json:"timeoutOrder"`
}

func (m *QueryGetTimeoutOrderResponse) Reset()         { *m = QueryGetTimeoutOrderResponse{} }
func (m *QueryGetTimeoutOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimeoutOrderResponse) ProtoMessage()    {}
func (*QueryGetTimeoutOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{7}
}
func (m *QueryGetTimeoutOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimeoutOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimeoutOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimeoutOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimeoutOrderResponse.Merge(m, src)
}
func (m *QueryGetTimeoutOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimeoutOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimeoutOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimeoutOrderResponse proto.InternalMessageInfo

func (m *QueryGetTimeoutOrderResponse) GetTimeoutOrder() TimeoutOrder {
	if m != nil {
		return m.TimeoutOrder
	}
	return TimeoutOrder{}
}

type QueryAllTimeoutOrderRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimeoutOrderRequest) Reset()         { *m = QueryAllTimeoutOrderRequest{} }
func (m *QueryAllTimeoutOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimeoutOrderRequest) ProtoMessage()    {}
func (*QueryAllTimeoutOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{8}
}
func (m *QueryAllTimeoutOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimeoutOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimeoutOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimeoutOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimeoutOrderRequest.Merge(m, src)
}
func (m *QueryAllTimeoutOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimeoutOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimeoutOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimeoutOrderRequest proto.InternalMessageInfo

func (m *QueryAllTimeoutOrderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTimeoutOrderResponse struct {
	TimeoutOrder []TimeoutOrder      `protobuf:"bytes,1,rep,name=timeoutOrder,proto3" json:"timeoutOrder"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimeoutOrderResponse) Reset()         { *m = QueryAllTimeoutOrderResponse{} }
func (m *QueryAllTimeoutOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimeoutOrderResponse) ProtoMessage()    {}
func (*QueryAllTimeoutOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{9}
}
func (m *QueryAllTimeoutOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimeoutOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimeoutOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimeoutOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimeoutOrderResponse.Merge(m, src)
}
func (m *QueryAllTimeoutOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimeoutOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimeoutOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimeoutOrderResponse proto.InternalMessageInfo

func (m *QueryAllTimeoutOrderResponse) GetTimeoutOrder() []TimeoutOrder {
	if m != nil {
		return m.TimeoutOrder
	}
	return nil
}

func (m *QueryAllTimeoutOrderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetExpiredShardRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryGetExpiredShardRequest) Reset()         { *m = QueryGetExpiredShardRequest{} }
func (m *QueryGetExpiredShardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetExpiredShardRequest) ProtoMessage()    {}
func (*QueryGetExpiredShardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{10}
}
func (m *QueryGetExpiredShardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExpiredShardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExpiredShardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExpiredShardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExpiredShardRequest.Merge(m, src)
}
func (m *QueryGetExpiredShardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExpiredShardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExpiredShardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExpiredShardRequest proto.InternalMessageInfo

func (m *QueryGetExpiredShardRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryGetExpiredShardResponse struct {
	ExpiredShard ExpiredShard `protobuf:"bytes,1,opt,name=expiredShard,proto3" json:"expiredShard"`
}

func (m *QueryGetExpiredShardResponse) Reset()         { *m = QueryGetExpiredShardResponse{} }
func (m *QueryGetExpiredShardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetExpiredShardResponse) ProtoMessage()    {}
func (*QueryGetExpiredShardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{11}
}
func (m *QueryGetExpiredShardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExpiredShardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExpiredShardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExpiredShardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExpiredShardResponse.Merge(m, src)
}
func (m *QueryGetExpiredShardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExpiredShardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExpiredShardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExpiredShardResponse proto.InternalMessageInfo

func (m *QueryGetExpiredShardResponse) GetExpiredShard() ExpiredShard {
	if m != nil {
		return m.ExpiredShard
	}
	return ExpiredShard{}
}

type QueryAllExpiredShardRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredShardRequest) Reset()         { *m = QueryAllExpiredShardRequest{} }
func (m *QueryAllExpiredShardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpiredShardRequest) ProtoMessage()    {}
func (*QueryAllExpiredShardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{12}
}
func (m *QueryAllExpiredShardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredShardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredShardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredShardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredShardRequest.Merge(m, src)
}
func (m *QueryAllExpiredShardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredShardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredShardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredShardRequest proto.InternalMessageInfo

func (m *QueryAllExpiredShardRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllExpiredShardResponse struct {
	ExpiredShard []ExpiredShard      `protobuf:"bytes,1,rep,name=expiredShard,proto3" json:"expiredShard"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredShardResponse) Reset()         { *m = QueryAllExpiredShardResponse{} }
func (m *QueryAllExpiredShardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpiredShardResponse) ProtoMessage()    {}
func (*QueryAllExpiredShardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{13}
}
func (m *QueryAllExpiredShardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredShardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredShardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredShardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredShardResponse.Merge(m, src)
}
func (m *QueryAllExpiredShardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredShardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredShardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredShardResponse proto.InternalMessageInfo

func (m *QueryAllExpiredShardResponse) GetExpiredShard() []ExpiredShard {
	if m != nil {
		return m.ExpiredShard
	}
	return nil
}

func (m *QueryAllExpiredShardResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryNetVersionRequest struct {
}

func (m *QueryNetVersionRequest) Reset()         { *m = QueryNetVersionRequest{} }
func (m *QueryNetVersionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNetVersionRequest) ProtoMessage()    {}
func (*QueryNetVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{14}
}
func (m *QueryNetVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetVersionRequest.Merge(m, src)
}
func (m *QueryNetVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetVersionRequest proto.InternalMessageInfo

type QueryNetVersionResponse struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *QueryNetVersionResponse) Reset()         { *m = QueryNetVersionResponse{} }
func (m *QueryNetVersionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNetVersionResponse) ProtoMessage()    {}
func (*QueryNetVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c097aa6efc06297, []int{15}
}
func (m *QueryNetVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetVersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetVersionResponse.Merge(m, src)
}
func (m *QueryNetVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetVersionResponse proto.InternalMessageInfo

func (m *QueryNetVersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "saonetwork.sao.sao.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "saonetwork.sao.sao.QueryParamsResponse")
	proto.RegisterType((*QueryMetadataRequest)(nil), "saonetwork.sao.sao.QueryMetadataRequest")
	proto.RegisterType((*QueryMetadataResponse)(nil), "saonetwork.sao.sao.QueryMetadataResponse")
	proto.RegisterMapType((map[string]*ShardMeta)(nil), "saonetwork.sao.sao.QueryMetadataResponse.ShardsEntry")
	proto.RegisterType((*QueryLatesthightRequest)(nil), "saonetwork.sao.sao.QueryLatesthightRequest")
	proto.RegisterType((*QueryLatesthightResponse)(nil), "saonetwork.sao.sao.QueryLatesthightResponse")
	proto.RegisterType((*QueryGetTimeoutOrderRequest)(nil), "saonetwork.sao.sao.QueryGetTimeoutOrderRequest")
	proto.RegisterType((*QueryGetTimeoutOrderResponse)(nil), "saonetwork.sao.sao.QueryGetTimeoutOrderResponse")
	proto.RegisterType((*QueryAllTimeoutOrderRequest)(nil), "saonetwork.sao.sao.QueryAllTimeoutOrderRequest")
	proto.RegisterType((*QueryAllTimeoutOrderResponse)(nil), "saonetwork.sao.sao.QueryAllTimeoutOrderResponse")
	proto.RegisterType((*QueryGetExpiredShardRequest)(nil), "saonetwork.sao.sao.QueryGetExpiredShardRequest")
	proto.RegisterType((*QueryGetExpiredShardResponse)(nil), "saonetwork.sao.sao.QueryGetExpiredShardResponse")
	proto.RegisterType((*QueryAllExpiredShardRequest)(nil), "saonetwork.sao.sao.QueryAllExpiredShardRequest")
	proto.RegisterType((*QueryAllExpiredShardResponse)(nil), "saonetwork.sao.sao.QueryAllExpiredShardResponse")
	proto.RegisterType((*QueryNetVersionRequest)(nil), "saonetwork.sao.sao.QueryNetVersionRequest")
	proto.RegisterType((*QueryNetVersionResponse)(nil), "saonetwork.sao.sao.QueryNetVersionResponse")
}

func init() { proto.RegisterFile("sao/sao/query.proto", fileDescriptor_5c097aa6efc06297) }

var fileDescriptor_5c097aa6efc06297 = []byte{
	// 971 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x5d, 0x6f, 0xdb, 0x54,
	0x18, 0xc7, 0xeb, 0x74, 0x0b, 0xed, 0xd3, 0xa2, 0xb1, 0xd3, 0x52, 0x82, 0x17, 0xb2, 0xd6, 0xc0,
	0xda, 0x75, 0x93, 0xcd, 0x5a, 0x4d, 0x9a, 0xb8, 0x00, 0xad, 0x68, 0x0c, 0x0d, 0xf6, 0x82, 0x3b,
	0x21, 0xc4, 0x8d, 0x75, 0xd2, 0x1e, 0x39, 0x6e, 0x1d, 0x1f, 0xcf, 0xe7, 0x24, 0x5d, 0x84, 0x26,
	0x21, 0x24, 0x6e, 0x11, 0x88, 0x0f, 0xc0, 0x15, 0x12, 0xf7, 0x7c, 0x08, 0x76, 0x39, 0x89, 0x1b,
	0xae, 0x10, 0x6a, 0xf9, 0x20, 0xc8, 0xe7, 0x65, 0x3d, 0x4e, 0xec, 0x24, 0x9b, 0xe0, 0x22, 0x52,
	0x72, 0x9e, 0xb7, 0xdf, 0xf3, 0x9c, 0x27, 0x7f, 0x1b, 0x96, 0x18, 0xa6, 0x5e, 0xfe, 0x79, 0xd4,
	0x23, 0xd9, 0xc0, 0x4d, 0x33, 0xca, 0x29, 0x42, 0x0c, 0xd3, 0x84, 0xf0, 0x23, 0x9a, 0x1d, 0xba,
	0x0c, 0xd3, 0xfc, 0x63, 0x2f, 0x87, 0x34, 0xa4, 0xc2, 0xec, 0xe5, 0xdf, 0xa4, 0xa7, 0xdd, 0x0c,
	0x29, 0x0d, 0x63, 0xe2, 0xe1, 0x34, 0xf2, 0x70, 0x92, 0x50, 0x8e, 0x79, 0x44, 0x13, 0xa6, 0xac,
	0x9b, 0x7b, 0x94, 0x75, 0x29, 0xf3, 0xda, 0x98, 0x11, 0x59, 0xc0, 0xeb, 0x5f, 0x6b, 0x13, 0x8e,
	0xaf, 0x79, 0x29, 0x0e, 0xa3, 0x44, 0x38, 0x2b, 0xdf, 0x65, 0x0d, 0x92, 0xe2, 0x0c, 0x77, 0x75,
	0x86, 0x66, 0x01, 0x2f, 0x48, 0x33, 0x9a, 0x52, 0x86, 0x63, 0x65, 0x5d, 0xd1, 0xd6, 0x2e, 0xe1,
	0x78, 0x1f, 0x73, 0xac, 0xce, 0x1b, 0xfa, 0x9c, 0x75, 0x70, 0xb6, 0x1f, 0xe4, 0x56, 0x65, 0xb9,
	0xa0, 0x2d, 0x07, 0x47, 0x2c, 0x60, 0x51, 0x98, 0x60, 0xde, 0xcb, 0xc8, 0xb0, 0x91, 0x47, 0x5d,
	0x42, 0x7b, 0x3c, 0xa0, 0xd9, 0x3e, 0xc9, 0x86, 0x8d, 0xe4, 0x71, 0x1a, 0x65, 0x64, 0x3f, 0x10,
	0xb9, 0xa5, 0xd1, 0x59, 0x06, 0xf4, 0x79, 0x0e, 0xf8, 0x40, 0xb0, 0xfb, 0xe4, 0x51, 0x8f, 0x30,
	0xee, 0xdc, 0x87, 0xa5, 0xc2, 0x29, 0x4b, 0x69, 0xc2, 0x08, 0xba, 0x01, 0x75, 0xd9, 0x63, 0xc3,
	0x5a, 0xb5, 0x36, 0x16, 0xb6, 0x6c, 0x77, 0x74, 0xdc, 0xae, 0x8c, 0xd9, 0x39, 0xf3, 0xf4, 0xaf,
	0x8b, 0x33, 0xbe, 0xf2, 0x77, 0x7e, 0xb5, 0x60, 0x59, 0x64, 0xbc, 0xab, 0xfa, 0x55, 0x95, 0xd0,
	0x47, 0x30, 0xa7, 0x47, 0xa3, 0x92, 0xae, 0x95, 0x25, 0x95, 0x34, 0xca, 0x51, 0xe5, 0x7e, 0x1e,
	0x88, 0x3e, 0x85, 0x57, 0x0b, 0x53, 0x69, 0xd4, 0x44, 0xa6, 0xd5, 0xb2, 0x4c, 0x77, 0x8e, 0xd8,
	0xae, 0xf6, 0x53, 0x89, 0x16, 0x0f, 0x8c, 0x33, 0xe7, 0x9b, 0x1a, 0xbc, 0x3e, 0x84, 0xaa, 0xda,
	0xff, 0x00, 0xe6, 0xf4, 0x75, 0x29, 0xd6, 0x66, 0x59, 0x05, 0x1d, 0xa7, 0x31, 0x75, 0x0c, 0xba,
	0x0b, 0x75, 0x31, 0x7a, 0xd6, 0xa8, 0xad, 0xce, 0x6e, 0x2c, 0x6c, 0x5d, 0xaf, 0xec, 0x74, 0xb8,
	0xb4, 0xbb, 0x2b, 0xe2, 0x6e, 0x25, 0x3c, 0x1b, 0xf8, 0x2a, 0x89, 0xfd, 0x25, 0x2c, 0x18, 0xc7,
	0xe8, 0x35, 0x98, 0x3d, 0x24, 0x03, 0x01, 0x36, 0xef, 0xe7, 0x5f, 0xd1, 0x36, 0x9c, 0xed, 0xe3,
	0xb8, 0xa7, 0xc7, 0xf1, 0x56, 0x59, 0x39, 0x91, 0x21, 0x2f, 0xe7, 0x4b, 0xdf, 0xf7, 0x6b, 0x37,
	0x2c, 0xe7, 0x4d, 0x78, 0x43, 0x60, 0x7c, 0x86, 0x39, 0x61, 0xbc, 0x13, 0x85, 0x1d, 0xae, 0x37,
	0xa3, 0x0f, 0x8d, 0x51, 0x93, 0x9a, 0x8f, 0x0b, 0x4b, 0xb1, 0x38, 0x0e, 0xda, 0x31, 0xdd, 0x3b,
	0x0c, 0x3a, 0x24, 0x37, 0x0b, 0xa2, 0x33, 0xfe, 0x79, 0x69, 0xda, 0xc9, 0x2d, 0x9f, 0x08, 0x03,
	0xda, 0x84, 0xf3, 0x05, 0xff, 0x7c, 0x79, 0x05, 0xeb, 0xbc, 0x7f, 0xce, 0xf0, 0x7e, 0x18, 0x75,
	0x89, 0x73, 0x1d, 0x2e, 0x88, 0xba, 0xb7, 0x09, 0x7f, 0x28, 0x77, 0xfc, 0x7e, 0xbe, 0xe2, 0x7a,
	0x8d, 0x56, 0xa0, 0x5e, 0xa8, 0xa6, 0x7e, 0x39, 0x07, 0xd0, 0x2c, 0x0f, 0x53, 0xc8, 0x77, 0x60,
	0x91, 0x1b, 0xe7, 0xea, 0x5a, 0x4b, 0x17, 0xc7, 0x8c, 0xd7, 0x8b, 0x63, 0xc6, 0x3a, 0x44, 0x21,
	0xde, 0x8c, 0xe3, 0x32, 0xc4, 0x8f, 0x01, 0x4e, 0xa5, 0x43, 0x15, 0xba, 0xe4, 0x4a, 0x9d, 0x71,
	0x73, 0x9d, 0x71, 0xa5, 0x90, 0x29, 0x9d, 0x71, 0x1f, 0xe0, 0x90, 0xa8, 0x58, 0xdf, 0x88, 0x74,
	0x7e, 0xb3, 0x54, 0x4f, 0x23, 0x75, 0x2a, 0x7b, 0x9a, 0x7d, 0xd9, 0x9e, 0xd0, 0xed, 0x02, 0xb4,
	0xdc, 0xa3, 0xf5, 0x89, 0xd0, 0x12, 0xa4, 0x40, 0x6d, 0xdc, 0xdf, 0x2d, 0x29, 0x43, 0x62, 0xf3,
	0x5e, 0xe0, 0xfe, 0x8a, 0x61, 0xa7, 0xbd, 0x12, 0xe3, 0x7c, 0xdc, 0xfd, 0x99, 0xf1, 0xba, 0x57,
	0x33, 0xd6, 0xbc, 0xbf, 0x32, 0xc4, 0xff, 0xe3, 0xfe, 0xa6, 0xec, 0x69, 0xf6, 0x65, 0x7b, 0xfa,
	0xef, 0xee, 0xaf, 0x01, 0x2b, 0x02, 0xfa, 0x1e, 0xe1, 0x5f, 0x90, 0x8c, 0x45, 0x34, 0xd1, 0x8a,
	0xb0, 0xad, 0xc4, 0xc2, 0xb4, 0xa8, 0x4e, 0x1a, 0xf0, 0x4a, 0x5f, 0x1e, 0x29, 0x59, 0xd2, 0x3f,
	0xb7, 0x7e, 0x9f, 0x87, 0xb3, 0x22, 0x0a, 0x3d, 0x81, 0xba, 0x7c, 0x62, 0xa0, 0x4b, 0xd5, 0xc2,
	0x6f, 0x3e, 0x9c, 0xec, 0xf5, 0x89, 0x7e, 0xb2, 0xbc, 0xe3, 0x7c, 0xfb, 0xc7, 0x3f, 0x3f, 0xd5,
	0x9a, 0xc8, 0xf6, 0x76, 0x31, 0xbd, 0x27, 0x03, 0xbc, 0xe2, 0xc3, 0x1a, 0x7d, 0x67, 0xc1, 0x9c,
	0x56, 0x5b, 0xb4, 0x31, 0x85, 0x20, 0x4b, 0x86, 0xcb, 0x53, 0x4b, 0xb7, 0xf3, 0x8e, 0xa0, 0x68,
	0xa1, 0x66, 0x19, 0xc5, 0xf3, 0x67, 0xc3, 0x8f, 0x16, 0x2c, 0x18, 0x9a, 0x8a, 0xae, 0x54, 0x16,
	0x18, 0x15, 0x65, 0xfb, 0xea, 0x74, 0xce, 0x0a, 0x68, 0x5d, 0x00, 0xad, 0xa1, 0x8b, 0x65, 0x40,
	0xb1, 0xc1, 0xf0, 0x8b, 0x05, 0x8b, 0xa6, 0x42, 0x20, 0xaf, 0xb2, 0x4e, 0xb9, 0x2c, 0xdb, 0xef,
	0x4d, 0x1f, 0xa0, 0xe0, 0xb6, 0x04, 0xdc, 0x55, 0xb4, 0x59, 0x06, 0x57, 0x78, 0xbb, 0xf1, 0xbe,
	0x96, 0x1a, 0xf1, 0x04, 0xfd, 0x6c, 0xc1, 0x39, 0x33, 0xd9, 0xcd, 0x38, 0x1e, 0x83, 0x5a, 0x2e,
	0xcf, 0x63, 0x50, 0x2b, 0x74, 0xd6, 0xb9, 0x2c, 0x50, 0xdf, 0x46, 0x6b, 0x13, 0x51, 0xc5, 0x24,
	0xcd, 0xff, 0xea, 0xf8, 0x49, 0x96, 0xa8, 0xcf, 0xf8, 0x49, 0x96, 0xc9, 0xc8, 0xf8, 0x49, 0x16,
	0x5e, 0x05, 0x8b, 0x93, 0x34, 0x93, 0x4d, 0x9c, 0xe4, 0x8b, 0xa1, 0x56, 0x28, 0xde, 0xf8, 0x49,
	0x16, 0x50, 0xd1, 0xf7, 0x16, 0xc0, 0xa9, 0xd2, 0xa0, 0xcd, 0xca, 0x5a, 0x23, 0x42, 0x65, 0x5f,
	0x99, 0xca, 0x77, 0x9a, 0x3f, 0x49, 0x42, 0x78, 0xa0, 0x94, 0x6c, 0xe7, 0xc3, 0xa7, 0xc7, 0x2d,
	0xeb, 0xd9, 0x71, 0xcb, 0xfa, 0xfb, 0xb8, 0x65, 0xfd, 0x70, 0xd2, 0x9a, 0x79, 0x76, 0xd2, 0x9a,
	0xf9, 0xf3, 0xa4, 0x35, 0xf3, 0xd5, 0xbb, 0x61, 0xc4, 0x3b, 0xbd, 0xb6, 0xbb, 0x47, 0xbb, 0xc3,
	0x49, 0x1e, 0xcb, 0x1d, 0x19, 0xa4, 0x84, 0xb5, 0xeb, 0xe2, 0x45, 0x7c, 0xfb, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x86, 0x3d, 0x58, 0xe9, 0xd0, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Metadata items.
	Metadata(ctx context.Context, in *QueryMetadataRequest, opts ...grpc.CallOption) (*QueryMetadataResponse, error)
	// Queries a list of Latesthight items.
	Latesthight(ctx context.Context, in *QueryLatesthightRequest, opts ...grpc.CallOption) (*QueryLatesthightResponse, error)
	// Queries a TimeoutOrder by index.
	TimeoutOrder(ctx context.Context, in *QueryGetTimeoutOrderRequest, opts ...grpc.CallOption) (*QueryGetTimeoutOrderResponse, error)
	// Queries a list of TimeoutOrder items.
	TimeoutOrderAll(ctx context.Context, in *QueryAllTimeoutOrderRequest, opts ...grpc.CallOption) (*QueryAllTimeoutOrderResponse, error)
	// Queries a ExpiredShard by index.
	ExpiredShard(ctx context.Context, in *QueryGetExpiredShardRequest, opts ...grpc.CallOption) (*QueryGetExpiredShardResponse, error)
	// Queries a list of ExpiredShard items.
	ExpiredShardAll(ctx context.Context, in *QueryAllExpiredShardRequest, opts ...grpc.CallOption) (*QueryAllExpiredShardResponse, error)
	// Queries a list of NetVersion items.
	NetVersion(ctx context.Context, in *QueryNetVersionRequest, opts ...grpc.CallOption) (*QueryNetVersionResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.sao.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Metadata(ctx context.Context, in *QueryMetadataRequest, opts ...grpc.CallOption) (*QueryMetadataResponse, error) {
	out := new(QueryMetadataResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.sao.Query/Metadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Latesthight(ctx context.Context, in *QueryLatesthightRequest, opts ...grpc.CallOption) (*QueryLatesthightResponse, error) {
	out := new(QueryLatesthightResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.sao.Query/Latesthight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimeoutOrder(ctx context.Context, in *QueryGetTimeoutOrderRequest, opts ...grpc.CallOption) (*QueryGetTimeoutOrderResponse, error) {
	out := new(QueryGetTimeoutOrderResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.sao.Query/TimeoutOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimeoutOrderAll(ctx context.Context, in *QueryAllTimeoutOrderRequest, opts ...grpc.CallOption) (*QueryAllTimeoutOrderResponse, error) {
	out := new(QueryAllTimeoutOrderResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.sao.Query/TimeoutOrderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredShard(ctx context.Context, in *QueryGetExpiredShardRequest, opts ...grpc.CallOption) (*QueryGetExpiredShardResponse, error) {
	out := new(QueryGetExpiredShardResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.sao.Query/ExpiredShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredShardAll(ctx context.Context, in *QueryAllExpiredShardRequest, opts ...grpc.CallOption) (*QueryAllExpiredShardResponse, error) {
	out := new(QueryAllExpiredShardResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.sao.Query/ExpiredShardAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NetVersion(ctx context.Context, in *QueryNetVersionRequest, opts ...grpc.CallOption) (*QueryNetVersionResponse, error) {
	out := new(QueryNetVersionResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.sao.Query/NetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Metadata items.
	Metadata(context.Context, *QueryMetadataRequest) (*QueryMetadataResponse, error)
	// Queries a list of Latesthight items.
	Latesthight(context.Context, *QueryLatesthightRequest) (*QueryLatesthightResponse, error)
	// Queries a TimeoutOrder by index.
	TimeoutOrder(context.Context, *QueryGetTimeoutOrderRequest) (*QueryGetTimeoutOrderResponse, error)
	// Queries a list of TimeoutOrder items.
	TimeoutOrderAll(context.Context, *QueryAllTimeoutOrderRequest) (*QueryAllTimeoutOrderResponse, error)
	// Queries a ExpiredShard by index.
	ExpiredShard(context.Context, *QueryGetExpiredShardRequest) (*QueryGetExpiredShardResponse, error)
	// Queries a list of ExpiredShard items.
	ExpiredShardAll(context.Context, *QueryAllExpiredShardRequest) (*QueryAllExpiredShardResponse, error)
	// Queries a list of NetVersion items.
	NetVersion(context.Context, *QueryNetVersionRequest) (*QueryNetVersionResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Metadata(ctx context.Context, req *QueryMetadataRequest) (*QueryMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metadata not implemented")
}
func (*UnimplementedQueryServer) Latesthight(ctx context.Context, req *QueryLatesthightRequest) (*QueryLatesthightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Latesthight not implemented")
}
func (*UnimplementedQueryServer) TimeoutOrder(ctx context.Context, req *QueryGetTimeoutOrderRequest) (*QueryGetTimeoutOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeoutOrder not implemented")
}
func (*UnimplementedQueryServer) TimeoutOrderAll(ctx context.Context, req *QueryAllTimeoutOrderRequest) (*QueryAllTimeoutOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeoutOrderAll not implemented")
}
func (*UnimplementedQueryServer) ExpiredShard(ctx context.Context, req *QueryGetExpiredShardRequest) (*QueryGetExpiredShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredShard not implemented")
}
func (*UnimplementedQueryServer) ExpiredShardAll(ctx context.Context, req *QueryAllExpiredShardRequest) (*QueryAllExpiredShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredShardAll not implemented")
}
func (*UnimplementedQueryServer) NetVersion(ctx context.Context, req *QueryNetVersionRequest) (*QueryNetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetVersion not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.sao.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.sao.Query/Metadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Metadata(ctx, req.(*QueryMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Latesthight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatesthightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Latesthight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.sao.Query/Latesthight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Latesthight(ctx, req.(*QueryLatesthightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimeoutOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTimeoutOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimeoutOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.sao.Query/TimeoutOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimeoutOrder(ctx, req.(*QueryGetTimeoutOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimeoutOrderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTimeoutOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimeoutOrderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.sao.Query/TimeoutOrderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimeoutOrderAll(ctx, req.(*QueryAllTimeoutOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExpiredShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.sao.Query/ExpiredShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredShard(ctx, req.(*QueryGetExpiredShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredShardAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExpiredShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredShardAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.sao.Query/ExpiredShardAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredShardAll(ctx, req.(*QueryAllExpiredShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.sao.Query/NetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NetVersion(ctx, req.(*QueryNetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "saonetwork.sao.sao.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Metadata",
			Handler:    _Query_Metadata_Handler,
		},
		{
			MethodName: "Latesthight",
			Handler:    _Query_Latesthight_Handler,
		},
		{
			MethodName: "TimeoutOrder",
			Handler:    _Query_TimeoutOrder_Handler,
		},
		{
			MethodName: "TimeoutOrderAll",
			Handler:    _Query_TimeoutOrderAll_Handler,
		},
		{
			MethodName: "ExpiredShard",
			Handler:    _Query_ExpiredShard_Handler,
		},
		{
			MethodName: "ExpiredShardAll",
			Handler:    _Query_ExpiredShardAll_Handler,
		},
		{
			MethodName: "NetVersion",
			Handler:    _Query_NetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sao/sao/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.JwsSignature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shards) > 0 {
		for k := range m.Shards {
			v := m.Shards[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLatesthightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatesthightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatesthightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatesthightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatesthightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatesthightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LatestBlockTime) > 0 {
		i -= len(m.LatestBlockTime)
		copy(dAtA[i:], m.LatestBlockTime)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LatestBlockTime)))
		i--
		dAtA[i] = 0x12
	}
	if m.LatestBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LatestBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTimeoutOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimeoutOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimeoutOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTimeoutOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimeoutOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimeoutOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TimeoutOrder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTimeoutOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimeoutOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimeoutOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTimeoutOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimeoutOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimeoutOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TimeoutOrder) > 0 {
		for iNdEx := len(m.TimeoutOrder) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TimeoutOrder[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExpiredShardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExpiredShardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExpiredShardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExpiredShardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExpiredShardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExpiredShardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExpiredShard.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredShardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredShardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredShardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredShardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredShardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredShardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExpiredShard) > 0 {
		for iNdEx := len(m.ExpiredShard) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpiredShard[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryNetVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNetVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetVersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Proposal.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.JwsSignature.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.Shards) > 0 {
		for k, v := range m.Shards {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryLatesthightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatesthightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.LatestBlockHeight))
	}
	l = len(m.LatestBlockTime)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTimeoutOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryGetTimeoutOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TimeoutOrder.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTimeoutOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTimeoutOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TimeoutOrder) > 0 {
		for _, e := range m.TimeoutOrder {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExpiredShardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryGetExpiredShardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExpiredShard.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllExpiredShardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExpiredShardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExpiredShard) > 0 {
		for _, e := range m.ExpiredShard {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNetVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNetVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwsSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JwsSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shards == nil {
				m.Shards = make(map[string]*ShardMeta)
			}
			var mapkey string
			var mapvalue *ShardMeta
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ShardMeta{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Shards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatesthightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatesthightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatesthightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatesthightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatesthightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatesthightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockHeight", wireType)
			}
			m.LatestBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestBlockTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimeoutOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimeoutOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimeoutOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimeoutOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimeoutOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimeoutOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimeoutOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimeoutOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimeoutOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimeoutOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimeoutOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimeoutOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeoutOrder = append(m.TimeoutOrder, TimeoutOrder{})
			if err := m.TimeoutOrder[len(m.TimeoutOrder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExpiredShardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExpiredShardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExpiredShardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExpiredShardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExpiredShardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExpiredShardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredShard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpiredShard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredShardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredShardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredShardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredShardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredShardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredShardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredShard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiredShard = append(m.ExpiredShard, ExpiredShard{})
			if err := m.ExpiredShard[len(m.ExpiredShard)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNetVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNetVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
