// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sao/proposal.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Proposal struct {
	Owner      string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Provider   string   `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	GroupId    string   `protobuf:"bytes,3,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Duration   int32    `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Replica    int32    `protobuf:"varint,5,opt,name=replica,proto3" json:"replica,omitempty"`
	Timeout    int32    `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Alias      string   `protobuf:"bytes,7,opt,name=alias,proto3" json:"alias,omitempty"`
	DataId     string   `protobuf:"bytes,8,opt,name=dataId,proto3" json:"dataId,omitempty"`
	CommitId   string   `protobuf:"bytes,9,opt,name=commitId,proto3" json:"commitId,omitempty"`
	Tags       []string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	Cid        string   `protobuf:"bytes,11,opt,name=cid,proto3" json:"cid,omitempty"`
	Rule       string   `protobuf:"bytes,12,opt,name=rule,proto3" json:"rule,omitempty"`
	IsUpdate   bool     `protobuf:"varint,13,opt,name=isUpdate,proto3" json:"isUpdate,omitempty"`
	ExtendInfo string   `protobuf:"bytes,14,opt,name=extendInfo,proto3" json:"extendInfo,omitempty"`
	Size_      uint64   `protobuf:"varint,15,opt,name=size,proto3" json:"size,omitempty"`
	Force      bool     `protobuf:"varint,16,opt,name=force,proto3" json:"force,omitempty"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e85fedfd545b110c, []int{0}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Proposal) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *Proposal) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Proposal) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Proposal) GetReplica() int32 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *Proposal) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Proposal) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *Proposal) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *Proposal) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *Proposal) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Proposal) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *Proposal) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *Proposal) GetIsUpdate() bool {
	if m != nil {
		return m.IsUpdate
	}
	return false
}

func (m *Proposal) GetExtendInfo() string {
	if m != nil {
		return m.ExtendInfo
	}
	return ""
}

func (m *Proposal) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *Proposal) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func init() {
	proto.RegisterType((*Proposal)(nil), "saonetwork.sao.sao.Proposal")
}

func init() { proto.RegisterFile("sao/proposal.proto", fileDescriptor_e85fedfd545b110c) }

var fileDescriptor_e85fedfd545b110c = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xcb, 0x4e, 0xf3, 0x30,
	0x10, 0x85, 0xeb, 0x3f, 0xbd, 0xa4, 0xfe, 0x6f, 0x95, 0x85, 0xd0, 0x88, 0x45, 0x14, 0x21, 0x21,
	0x65, 0xd5, 0x2e, 0x78, 0x00, 0x24, 0x76, 0xd9, 0x20, 0x14, 0xc4, 0x86, 0x9d, 0x1b, 0xbb, 0xc5,
	0x22, 0xc9, 0x58, 0xb6, 0x43, 0x0b, 0x4f, 0xd1, 0xc7, 0x62, 0xd9, 0x25, 0x4b, 0xd4, 0xbe, 0x08,
	0xb2, 0xd3, 0x56, 0x2c, 0x12, 0x9d, 0xef, 0x9c, 0x99, 0xc9, 0x44, 0x43, 0x99, 0xe5, 0x38, 0xd3,
	0x06, 0x35, 0x5a, 0x5e, 0x4d, 0xb5, 0x41, 0x87, 0xcc, 0x7b, 0x8d, 0x74, 0x2b, 0x34, 0x2f, 0x53,
	0xcb, 0xd1, 0x3f, 0x97, 0x9b, 0x88, 0xc6, 0xf7, 0x87, 0x32, 0x76, 0x46, 0x07, 0xb8, 0x6a, 0xa4,
	0x01, 0x92, 0x92, 0x6c, 0x5c, 0x74, 0xc0, 0x2e, 0x68, 0xac, 0x0d, 0xbe, 0x2a, 0x21, 0x0d, 0xfc,
	0x0a, 0xc1, 0x89, 0x19, 0xd0, 0xd1, 0xd2, 0x60, 0xab, 0x73, 0x01, 0x51, 0x88, 0x8e, 0xe8, 0xbb,
	0x44, 0x6b, 0xb8, 0x53, 0xd8, 0x40, 0x3f, 0x25, 0xd9, 0xa0, 0x38, 0xb1, 0xef, 0x32, 0x52, 0x57,
	0xaa, 0xe4, 0x30, 0x08, 0xd1, 0x11, 0x7d, 0xe2, 0x54, 0x2d, 0xb1, 0x75, 0x30, 0xec, 0x92, 0x03,
	0xfa, 0xdd, 0x78, 0xa5, 0xb8, 0x85, 0x51, 0xb7, 0x5b, 0x00, 0x76, 0x4e, 0x87, 0x82, 0x3b, 0x9e,
	0x0b, 0x88, 0x83, 0x7d, 0x20, 0xff, 0xf5, 0x12, 0xeb, 0x5a, 0xb9, 0x5c, 0xc0, 0xb8, 0xdb, 0xf9,
	0xc8, 0x8c, 0xd1, 0xbe, 0xe3, 0x4b, 0x0b, 0x34, 0x8d, 0xb2, 0x71, 0x11, 0x34, 0x9b, 0xd0, 0xa8,
	0x54, 0x02, 0x7e, 0x87, 0x52, 0x2f, 0x7d, 0x95, 0x69, 0x2b, 0x09, 0x7f, 0x82, 0x15, 0xb4, 0x9f,
	0xaa, 0xec, 0xa3, 0x16, 0xdc, 0x49, 0xf8, 0x9b, 0x92, 0x2c, 0x2e, 0x4e, 0xcc, 0x12, 0x4a, 0xe5,
	0xda, 0xc9, 0x46, 0xe4, 0xcd, 0x02, 0xe1, 0x5f, 0xe8, 0xfa, 0xe1, 0xf8, 0x79, 0x56, 0xbd, 0x4b,
	0xf8, 0x9f, 0x92, 0xac, 0x5f, 0x04, 0xed, 0xff, 0x69, 0x81, 0xa6, 0x94, 0x30, 0x09, 0xc3, 0x3a,
	0xb8, 0xbd, 0xf9, 0xd8, 0x25, 0x64, 0xbb, 0x4b, 0xc8, 0xd7, 0x2e, 0x21, 0x9b, 0x7d, 0xd2, 0xdb,
	0xee, 0x93, 0xde, 0xe7, 0x3e, 0xe9, 0x3d, 0x5d, 0x2d, 0x95, 0x7b, 0x6e, 0xe7, 0xd3, 0x12, 0xeb,
	0xd9, 0x03, 0xc7, 0xbb, 0xee, 0x96, 0x33, 0x7f, 0xea, 0x75, 0x78, 0xbb, 0x37, 0x2d, 0xed, 0x7c,
	0x18, 0xce, 0x7d, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x65, 0xdf, 0x89, 0x04, 0x02, 0x00,
	0x00,
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Size_ != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x78
	}
	if len(m.ExtendInfo) > 0 {
		i -= len(m.ExtendInfo)
		copy(dAtA[i:], m.ExtendInfo)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ExtendInfo)))
		i--
		dAtA[i] = 0x72
	}
	if m.IsUpdate {
		i--
		if m.IsUpdate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.Rule) > 0 {
		i -= len(m.Rule)
		copy(dAtA[i:], m.Rule)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Rule)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintProposal(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.CommitId) > 0 {
		i -= len(m.CommitId)
		copy(dAtA[i:], m.CommitId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.CommitId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Timeout != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x30
	}
	if m.Replica != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Replica))
		i--
		dAtA[i] = 0x28
	}
	if m.Duration != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovProposal(uint64(m.Duration))
	}
	if m.Replica != 0 {
		n += 1 + sovProposal(uint64(m.Replica))
	}
	if m.Timeout != 0 {
		n += 1 + sovProposal(uint64(m.Timeout))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.CommitId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.IsUpdate {
		n += 2
	}
	l = len(m.ExtendInfo)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovProposal(uint64(m.Size_))
	}
	if m.Force {
		n += 3
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replica", wireType)
			}
			m.Replica = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Replica |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUpdate = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
