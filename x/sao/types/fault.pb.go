// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sao/sao/fault.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Fault struct {
	DataId   string `protobuf:"bytes,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	OrderId  uint64 `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	ShardId  string `protobuf:"bytes,3,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	CommitId string `protobuf:"bytes,4,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	Provider string `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	Reporter string `protobuf:"bytes,6,opt,name=reporter,proto3" json:"reporter,omitempty"`
	Confirms uint32 `protobuf:"varint,7,opt,name=confirms,proto3" json:"confirms,omitempty"`
	Status   uint32 `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Fault) Reset()         { *m = Fault{} }
func (m *Fault) String() string { return proto.CompactTextString(m) }
func (*Fault) ProtoMessage()    {}
func (*Fault) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f9070c2454d2f51, []int{0}
}
func (m *Fault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fault.Merge(m, src)
}
func (m *Fault) XXX_Size() int {
	return m.Size()
}
func (m *Fault) XXX_DiscardUnknown() {
	xxx_messageInfo_Fault.DiscardUnknown(m)
}

var xxx_messageInfo_Fault proto.InternalMessageInfo

func (m *Fault) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *Fault) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *Fault) GetShardId() string {
	if m != nil {
		return m.ShardId
	}
	return ""
}

func (m *Fault) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *Fault) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *Fault) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *Fault) GetConfirms() uint32 {
	if m != nil {
		return m.Confirms
	}
	return 0
}

func (m *Fault) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*Fault)(nil), "saonetwork.sao.sao.Fault")
}

func init() { proto.RegisterFile("sao/sao/fault.proto", fileDescriptor_5f9070c2454d2f51) }

var fileDescriptor_5f9070c2454d2f51 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0xd0, 0xbf, 0x4e, 0xbc, 0x40,
	0x10, 0xc0, 0x71, 0xf6, 0xf7, 0xbb, 0x03, 0x6e, 0x13, 0x9b, 0xd5, 0x28, 0x9e, 0xc9, 0x86, 0x98,
	0x98, 0x50, 0x41, 0xe1, 0x03, 0x98, 0x58, 0x98, 0xd0, 0x58, 0x60, 0x67, 0x63, 0xf6, 0xd8, 0x3d,
	0x8e, 0x28, 0x37, 0x64, 0x76, 0xf1, 0xcf, 0x5b, 0xf8, 0x58, 0x96, 0x57, 0xda, 0x69, 0xe0, 0x45,
	0xcc, 0xee, 0x7a, 0x16, 0x43, 0xf8, 0xf2, 0x61, 0x9a, 0xa1, 0x87, 0x5a, 0x40, 0x61, 0x67, 0x2d,
	0x86, 0x27, 0x93, 0xf7, 0x08, 0x06, 0x18, 0xd3, 0x02, 0xb6, 0xca, 0xbc, 0x00, 0x3e, 0xe6, 0x5a,
	0x80, 0x9d, 0xe5, 0x51, 0x03, 0x0d, 0x38, 0x2e, 0xec, 0x9b, 0xff, 0xf3, 0xfc, 0x8b, 0xd0, 0xf9,
	0x8d, 0xdd, 0x64, 0x27, 0x34, 0x92, 0xc2, 0x88, 0x87, 0x56, 0x26, 0x24, 0x25, 0xd9, 0xa2, 0x0a,
	0x6d, 0x96, 0x92, 0x9d, 0xd2, 0x18, 0x50, 0x2a, 0xb4, 0xf2, 0x2f, 0x25, 0xd9, 0xac, 0x8a, 0x5c,
	0x7b, 0xd2, 0x1b, 0x81, 0xd2, 0xd2, 0x7f, 0xb7, 0x14, 0xb9, 0x2e, 0x25, 0x3b, 0xa3, 0x8b, 0x1a,
	0xba, 0xae, 0x35, 0xd6, 0x66, 0xce, 0x62, 0xff, 0xa1, 0x94, 0x6c, 0x49, 0xe3, 0x1e, 0xe1, 0xb9,
	0x95, 0x0a, 0x93, 0xb9, 0xb7, 0x7d, 0x5b, 0x43, 0xd5, 0x03, 0x1a, 0x85, 0x49, 0xe8, 0x6d, 0xdf,
	0xd6, 0x6a, 0xd8, 0xae, 0x5b, 0xec, 0x74, 0x12, 0xa5, 0x24, 0x3b, 0xa8, 0xfe, 0x9a, 0x1d, 0xd3,
	0x50, 0x1b, 0x61, 0x06, 0x9d, 0xc4, 0x4e, 0x7e, 0xeb, 0xfa, 0xea, 0x63, 0xe4, 0x64, 0x37, 0x72,
	0xf2, 0x3d, 0x72, 0xf2, 0x3e, 0xf1, 0x60, 0x37, 0xf1, 0xe0, 0x73, 0xe2, 0xc1, 0xfd, 0x45, 0xd3,
	0x9a, 0xcd, 0xb0, 0xca, 0x6b, 0xe8, 0x8a, 0x3b, 0x01, 0xb7, 0xfe, 0x60, 0xee, 0x98, 0xaf, 0xee,
	0x69, 0xde, 0x7a, 0xa5, 0x57, 0xa1, 0xbb, 0xd4, 0xe5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x84,
	0x7f, 0xa8, 0xfd, 0x6a, 0x01, 0x00, 0x00,
}

func (m *Fault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintFault(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.Confirms != 0 {
		i = encodeVarintFault(dAtA, i, uint64(m.Confirms))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintFault(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintFault(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CommitId) > 0 {
		i -= len(m.CommitId)
		copy(dAtA[i:], m.CommitId)
		i = encodeVarintFault(dAtA, i, uint64(len(m.CommitId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ShardId) > 0 {
		i -= len(m.ShardId)
		copy(dAtA[i:], m.ShardId)
		i = encodeVarintFault(dAtA, i, uint64(len(m.ShardId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OrderId != 0 {
		i = encodeVarintFault(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintFault(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFault(dAtA []byte, offset int, v uint64) int {
	offset -= sovFault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Fault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovFault(uint64(l))
	}
	if m.OrderId != 0 {
		n += 1 + sovFault(uint64(m.OrderId))
	}
	l = len(m.ShardId)
	if l > 0 {
		n += 1 + l + sovFault(uint64(l))
	}
	l = len(m.CommitId)
	if l > 0 {
		n += 1 + l + sovFault(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovFault(uint64(l))
	}
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovFault(uint64(l))
	}
	if m.Confirms != 0 {
		n += 1 + sovFault(uint64(m.Confirms))
	}
	if m.Status != 0 {
		n += 1 + sovFault(uint64(m.Status))
	}
	return n
}

func sovFault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFault(x uint64) (n int) {
	return sovFault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Fault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirms", wireType)
			}
			m.Confirms = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Confirms |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFault = fmt.Errorf("proto: unexpected end of group")
)
