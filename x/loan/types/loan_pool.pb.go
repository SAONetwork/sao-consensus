// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sao/loan/loan_pool.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LoanPool struct {
	Total              types.DecCoin                          `protobuf:"bytes,1,opt,name=total,proto3" json:"total"`
	LoanedOut          types.Coin                             `protobuf:"bytes,2,opt,name=loaned_out,json=loanedOut,proto3" json:"loaned_out"`
	TotalBonds         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=totalBonds,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"totalBonds"`
	InterestDebt       types.DecCoin                          `protobuf:"bytes,4,opt,name=interest_debt,json=interestDebt,proto3" json:"interest_debt"`
	AccInterestPerCoin types.DecCoin                          `protobuf:"bytes,5,opt,name=acc_interest_per_coin,json=accInterestPerCoin,proto3" json:"acc_interest_per_coin"`
}

func (m *LoanPool) Reset()         { *m = LoanPool{} }
func (m *LoanPool) String() string { return proto.CompactTextString(m) }
func (*LoanPool) ProtoMessage()    {}
func (*LoanPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e126dc3375a7678, []int{0}
}
func (m *LoanPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoanPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoanPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoanPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoanPool.Merge(m, src)
}
func (m *LoanPool) XXX_Size() int {
	return m.Size()
}
func (m *LoanPool) XXX_DiscardUnknown() {
	xxx_messageInfo_LoanPool.DiscardUnknown(m)
}

var xxx_messageInfo_LoanPool proto.InternalMessageInfo

func (m *LoanPool) GetTotal() types.DecCoin {
	if m != nil {
		return m.Total
	}
	return types.DecCoin{}
}

func (m *LoanPool) GetLoanedOut() types.Coin {
	if m != nil {
		return m.LoanedOut
	}
	return types.Coin{}
}

func (m *LoanPool) GetInterestDebt() types.DecCoin {
	if m != nil {
		return m.InterestDebt
	}
	return types.DecCoin{}
}

func (m *LoanPool) GetAccInterestPerCoin() types.DecCoin {
	if m != nil {
		return m.AccInterestPerCoin
	}
	return types.DecCoin{}
}

func init() {
	proto.RegisterType((*LoanPool)(nil), "saonetwork.sao.loan.LoanPool")
}

func init() { proto.RegisterFile("sao/loan/loan_pool.proto", fileDescriptor_1e126dc3375a7678) }

var fileDescriptor_1e126dc3375a7678 = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x13, 0xdb, 0x8a, 0x1d, 0x75, 0x13, 0x15, 0xd2, 0x22, 0x69, 0x71, 0x21, 0xdd, 0x34,
	0xa1, 0xba, 0x71, 0x21, 0x22, 0xb5, 0x20, 0x82, 0x68, 0xa9, 0xb8, 0x11, 0x21, 0x4c, 0x26, 0x43,
	0x0d, 0x4d, 0xe7, 0x86, 0xcc, 0xd4, 0x9f, 0xad, 0x4f, 0xe0, 0xc3, 0xf8, 0x10, 0x5d, 0x16, 0x57,
	0xe2, 0xa2, 0x48, 0xfb, 0x22, 0x32, 0x3f, 0x4a, 0x17, 0x2e, 0xba, 0x49, 0x66, 0x38, 0xf7, 0x3b,
	0x73, 0xef, 0xcc, 0x41, 0x2e, 0xc7, 0x10, 0xa4, 0x80, 0x99, 0xfa, 0x84, 0x19, 0x40, 0xea, 0x67,
	0x39, 0x08, 0x70, 0xb6, 0x38, 0x06, 0x46, 0xc5, 0x13, 0xe4, 0x03, 0x9f, 0x63, 0xf0, 0xa5, 0x5e,
	0xdd, 0xee, 0x43, 0x1f, 0x94, 0x1e, 0xc8, 0x95, 0x2e, 0xad, 0x7a, 0x04, 0xf8, 0x10, 0x78, 0x10,
	0x61, 0x4e, 0x83, 0xc7, 0x56, 0x44, 0x05, 0x6e, 0x05, 0x04, 0x12, 0x66, 0xf4, 0x8a, 0xd6, 0x43,
	0x0d, 0xea, 0x8d, 0x96, 0xf6, 0x5e, 0x0b, 0x68, 0xed, 0x12, 0x30, 0xeb, 0x02, 0xa4, 0xce, 0x11,
	0x2a, 0x09, 0x10, 0x38, 0x75, 0xed, 0xba, 0xdd, 0x58, 0x3f, 0xd8, 0xf5, 0x4d, 0xa9, 0xf4, 0xf5,
	0x8d, 0xaf, 0xdf, 0xa1, 0xe4, 0x0c, 0x12, 0xd6, 0x2e, 0x8e, 0xa7, 0x35, 0xab, 0xa7, 0x01, 0xe7,
	0x04, 0x21, 0xd9, 0x1f, 0x8d, 0x43, 0x18, 0x09, 0x77, 0x45, 0xe1, 0x95, 0x7f, 0xf1, 0x05, 0xb6,
	0xac, 0x91, 0xeb, 0x91, 0x70, 0xee, 0x11, 0x52, 0x46, 0x6d, 0x60, 0x31, 0x77, 0x0b, 0x75, 0xbb,
	0x51, 0x6e, 0x1f, 0xcb, 0xa2, 0xaf, 0x69, 0x6d, 0xbf, 0x9f, 0x88, 0x87, 0x51, 0xe4, 0x13, 0x18,
	0x9a, 0xde, 0xcd, 0xaf, 0xc9, 0xe3, 0x41, 0x20, 0x5e, 0x32, 0xca, 0x65, 0x53, 0x1f, 0xef, 0x4d,
	0x64, 0x0e, 0xec, 0x50, 0xd2, 0x5b, 0xf0, 0x73, 0xce, 0xd1, 0x66, 0xc2, 0x04, 0xcd, 0x29, 0x17,
	0x61, 0x4c, 0x23, 0xe1, 0x16, 0x97, 0x9e, 0x6f, 0xe3, 0x17, 0xec, 0xd0, 0x48, 0x38, 0xb7, 0x68,
	0x07, 0x13, 0x12, 0xfe, 0x99, 0x65, 0x34, 0x0f, 0xe5, 0x3d, 0xbb, 0xa5, 0xa5, 0x0d, 0x1d, 0x4c,
	0xc8, 0x85, 0xe1, 0xbb, 0x34, 0x57, 0xca, 0xe9, 0x78, 0xe6, 0xd9, 0x93, 0x99, 0x67, 0x7f, 0xcf,
	0x3c, 0xfb, 0x6d, 0xee, 0x59, 0x93, 0xb9, 0x67, 0x7d, 0xce, 0x3d, 0xeb, 0x6e, 0x71, 0xf6, 0x1b,
	0x0c, 0x57, 0x3a, 0x0f, 0x81, 0x0c, 0xcd, 0xb3, 0x8e, 0x8d, 0x9a, 0x3f, 0x5a, 0x55, 0xaf, 0x79,
	0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xff, 0x34, 0xa7, 0x4f, 0x02, 0x00, 0x00,
}

func (m *LoanPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoanPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoanPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AccInterestPerCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLoanPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.InterestDebt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLoanPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TotalBonds.Size()
		i -= size
		if _, err := m.TotalBonds.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLoanPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.LoanedOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLoanPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Total.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLoanPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintLoanPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovLoanPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoanPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Total.Size()
	n += 1 + l + sovLoanPool(uint64(l))
	l = m.LoanedOut.Size()
	n += 1 + l + sovLoanPool(uint64(l))
	l = m.TotalBonds.Size()
	n += 1 + l + sovLoanPool(uint64(l))
	l = m.InterestDebt.Size()
	n += 1 + l + sovLoanPool(uint64(l))
	l = m.AccInterestPerCoin.Size()
	n += 1 + l + sovLoanPool(uint64(l))
	return n
}

func sovLoanPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLoanPool(x uint64) (n int) {
	return sovLoanPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoanPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoanPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoanPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoanPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoanPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoanPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoanPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanedOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoanPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoanPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoanPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LoanedOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBonds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoanPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoanPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoanPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBonds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestDebt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoanPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoanPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoanPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccInterestPerCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoanPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoanPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoanPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccInterestPerCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoanPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLoanPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLoanPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLoanPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoanPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoanPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLoanPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLoanPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLoanPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLoanPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLoanPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLoanPool = fmt.Errorf("proto: unexpected end of group")
)
