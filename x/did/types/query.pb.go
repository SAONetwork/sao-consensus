// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sao/did/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetDidBingingProofRequest struct {
	AccountId string `protobuf:"bytes,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
}

func (m *QueryGetDidBingingProofRequest) Reset()         { *m = QueryGetDidBingingProofRequest{} }
func (m *QueryGetDidBingingProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDidBingingProofRequest) ProtoMessage()    {}
func (*QueryGetDidBingingProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{2}
}
func (m *QueryGetDidBingingProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDidBingingProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDidBingingProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDidBingingProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDidBingingProofRequest.Merge(m, src)
}
func (m *QueryGetDidBingingProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDidBingingProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDidBingingProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDidBingingProofRequest proto.InternalMessageInfo

func (m *QueryGetDidBingingProofRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type QueryGetDidBingingProofResponse struct {
	DidBingingProof DidBingingProof `protobuf:"bytes,1,opt,name=DidBingingProof,proto3" json:"DidBingingProof"`
}

func (m *QueryGetDidBingingProofResponse) Reset()         { *m = QueryGetDidBingingProofResponse{} }
func (m *QueryGetDidBingingProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDidBingingProofResponse) ProtoMessage()    {}
func (*QueryGetDidBingingProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{3}
}
func (m *QueryGetDidBingingProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDidBingingProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDidBingingProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDidBingingProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDidBingingProofResponse.Merge(m, src)
}
func (m *QueryGetDidBingingProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDidBingingProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDidBingingProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDidBingingProofResponse proto.InternalMessageInfo

func (m *QueryGetDidBingingProofResponse) GetDidBingingProof() DidBingingProof {
	if m != nil {
		return m.DidBingingProof
	}
	return DidBingingProof{}
}

type QueryAllDidBingingProofRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDidBingingProofRequest) Reset()         { *m = QueryAllDidBingingProofRequest{} }
func (m *QueryAllDidBingingProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDidBingingProofRequest) ProtoMessage()    {}
func (*QueryAllDidBingingProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{4}
}
func (m *QueryAllDidBingingProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDidBingingProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDidBingingProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDidBingingProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDidBingingProofRequest.Merge(m, src)
}
func (m *QueryAllDidBingingProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDidBingingProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDidBingingProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDidBingingProofRequest proto.InternalMessageInfo

func (m *QueryAllDidBingingProofRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDidBingingProofResponse struct {
	DidBingingProof []DidBingingProof   `protobuf:"bytes,1,rep,name=DidBingingProof,proto3" json:"DidBingingProof"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDidBingingProofResponse) Reset()         { *m = QueryAllDidBingingProofResponse{} }
func (m *QueryAllDidBingingProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDidBingingProofResponse) ProtoMessage()    {}
func (*QueryAllDidBingingProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{5}
}
func (m *QueryAllDidBingingProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDidBingingProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDidBingingProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDidBingingProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDidBingingProofResponse.Merge(m, src)
}
func (m *QueryAllDidBingingProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDidBingingProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDidBingingProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDidBingingProofResponse proto.InternalMessageInfo

func (m *QueryAllDidBingingProofResponse) GetDidBingingProof() []DidBingingProof {
	if m != nil {
		return m.DidBingingProof
	}
	return nil
}

func (m *QueryAllDidBingingProofResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAccountListRequest struct {
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
}

func (m *QueryGetAccountListRequest) Reset()         { *m = QueryGetAccountListRequest{} }
func (m *QueryGetAccountListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountListRequest) ProtoMessage()    {}
func (*QueryGetAccountListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{6}
}
func (m *QueryGetAccountListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountListRequest.Merge(m, src)
}
func (m *QueryGetAccountListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountListRequest proto.InternalMessageInfo

func (m *QueryGetAccountListRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

type QueryGetAccountListResponse struct {
	AccountList AccountList `protobuf:"bytes,1,opt,name=accountList,proto3" json:"accountList"`
}

func (m *QueryGetAccountListResponse) Reset()         { *m = QueryGetAccountListResponse{} }
func (m *QueryGetAccountListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountListResponse) ProtoMessage()    {}
func (*QueryGetAccountListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{7}
}
func (m *QueryGetAccountListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountListResponse.Merge(m, src)
}
func (m *QueryGetAccountListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountListResponse proto.InternalMessageInfo

func (m *QueryGetAccountListResponse) GetAccountList() AccountList {
	if m != nil {
		return m.AccountList
	}
	return AccountList{}
}

type QueryAllAccountListRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccountListRequest) Reset()         { *m = QueryAllAccountListRequest{} }
func (m *QueryAllAccountListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccountListRequest) ProtoMessage()    {}
func (*QueryAllAccountListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{8}
}
func (m *QueryAllAccountListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccountListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccountListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccountListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccountListRequest.Merge(m, src)
}
func (m *QueryAllAccountListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccountListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccountListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccountListRequest proto.InternalMessageInfo

func (m *QueryAllAccountListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAccountListResponse struct {
	AccountList []AccountList       `protobuf:"bytes,1,rep,name=accountList,proto3" json:"accountList"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccountListResponse) Reset()         { *m = QueryAllAccountListResponse{} }
func (m *QueryAllAccountListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccountListResponse) ProtoMessage()    {}
func (*QueryAllAccountListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{9}
}
func (m *QueryAllAccountListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccountListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccountListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccountListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccountListResponse.Merge(m, src)
}
func (m *QueryAllAccountListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccountListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccountListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccountListResponse proto.InternalMessageInfo

func (m *QueryAllAccountListResponse) GetAccountList() []AccountList {
	if m != nil {
		return m.AccountList
	}
	return nil
}

func (m *QueryAllAccountListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAccountAuthRequest struct {
	AccountDid string `protobuf:"bytes,1,opt,name=accountDid,proto3" json:"accountDid,omitempty"`
}

func (m *QueryGetAccountAuthRequest) Reset()         { *m = QueryGetAccountAuthRequest{} }
func (m *QueryGetAccountAuthRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountAuthRequest) ProtoMessage()    {}
func (*QueryGetAccountAuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{10}
}
func (m *QueryGetAccountAuthRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountAuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountAuthRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountAuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountAuthRequest.Merge(m, src)
}
func (m *QueryGetAccountAuthRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountAuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountAuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountAuthRequest proto.InternalMessageInfo

func (m *QueryGetAccountAuthRequest) GetAccountDid() string {
	if m != nil {
		return m.AccountDid
	}
	return ""
}

type QueryGetAccountAuthResponse struct {
	AccountAuth AccountAuth `protobuf:"bytes,1,opt,name=accountAuth,proto3" json:"accountAuth"`
}

func (m *QueryGetAccountAuthResponse) Reset()         { *m = QueryGetAccountAuthResponse{} }
func (m *QueryGetAccountAuthResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountAuthResponse) ProtoMessage()    {}
func (*QueryGetAccountAuthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{11}
}
func (m *QueryGetAccountAuthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountAuthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountAuthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountAuthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountAuthResponse.Merge(m, src)
}
func (m *QueryGetAccountAuthResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountAuthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountAuthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountAuthResponse proto.InternalMessageInfo

func (m *QueryGetAccountAuthResponse) GetAccountAuth() AccountAuth {
	if m != nil {
		return m.AccountAuth
	}
	return AccountAuth{}
}

type QueryAllAccountAuthRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccountAuthRequest) Reset()         { *m = QueryAllAccountAuthRequest{} }
func (m *QueryAllAccountAuthRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccountAuthRequest) ProtoMessage()    {}
func (*QueryAllAccountAuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{12}
}
func (m *QueryAllAccountAuthRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccountAuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccountAuthRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccountAuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccountAuthRequest.Merge(m, src)
}
func (m *QueryAllAccountAuthRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccountAuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccountAuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccountAuthRequest proto.InternalMessageInfo

func (m *QueryAllAccountAuthRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAccountAuthResponse struct {
	AccountAuth []AccountAuth       `protobuf:"bytes,1,rep,name=accountAuth,proto3" json:"accountAuth"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccountAuthResponse) Reset()         { *m = QueryAllAccountAuthResponse{} }
func (m *QueryAllAccountAuthResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccountAuthResponse) ProtoMessage()    {}
func (*QueryAllAccountAuthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{13}
}
func (m *QueryAllAccountAuthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccountAuthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccountAuthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccountAuthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccountAuthResponse.Merge(m, src)
}
func (m *QueryAllAccountAuthResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccountAuthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccountAuthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccountAuthResponse proto.InternalMessageInfo

func (m *QueryAllAccountAuthResponse) GetAccountAuth() []AccountAuth {
	if m != nil {
		return m.AccountAuth
	}
	return nil
}

func (m *QueryAllAccountAuthResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllAccountAuthsRequest struct {
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
}

func (m *QueryGetAllAccountAuthsRequest) Reset()         { *m = QueryGetAllAccountAuthsRequest{} }
func (m *QueryGetAllAccountAuthsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllAccountAuthsRequest) ProtoMessage()    {}
func (*QueryGetAllAccountAuthsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{14}
}
func (m *QueryGetAllAccountAuthsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllAccountAuthsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllAccountAuthsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllAccountAuthsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllAccountAuthsRequest.Merge(m, src)
}
func (m *QueryGetAllAccountAuthsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllAccountAuthsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllAccountAuthsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllAccountAuthsRequest proto.InternalMessageInfo

func (m *QueryGetAllAccountAuthsRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

type QueryGetAllAccountAuthsResponse struct {
	AccountAuths []*AccountAuth `protobuf:"bytes,1,rep,name=accountAuths,proto3" json:"accountAuths,omitempty"`
}

func (m *QueryGetAllAccountAuthsResponse) Reset()         { *m = QueryGetAllAccountAuthsResponse{} }
func (m *QueryGetAllAccountAuthsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllAccountAuthsResponse) ProtoMessage()    {}
func (*QueryGetAllAccountAuthsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{15}
}
func (m *QueryGetAllAccountAuthsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllAccountAuthsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllAccountAuthsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllAccountAuthsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllAccountAuthsResponse.Merge(m, src)
}
func (m *QueryGetAllAccountAuthsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllAccountAuthsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllAccountAuthsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllAccountAuthsResponse proto.InternalMessageInfo

func (m *QueryGetAllAccountAuthsResponse) GetAccountAuths() []*AccountAuth {
	if m != nil {
		return m.AccountAuths
	}
	return nil
}

type QueryGetSidDocumentRequest struct {
	VersionId string `protobuf:"bytes,1,opt,name=versionId,proto3" json:"versionId,omitempty"`
}

func (m *QueryGetSidDocumentRequest) Reset()         { *m = QueryGetSidDocumentRequest{} }
func (m *QueryGetSidDocumentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSidDocumentRequest) ProtoMessage()    {}
func (*QueryGetSidDocumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{16}
}
func (m *QueryGetSidDocumentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSidDocumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSidDocumentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSidDocumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSidDocumentRequest.Merge(m, src)
}
func (m *QueryGetSidDocumentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSidDocumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSidDocumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSidDocumentRequest proto.InternalMessageInfo

func (m *QueryGetSidDocumentRequest) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

type QueryGetSidDocumentResponse struct {
	SidDocument SidDocument `protobuf:"bytes,1,opt,name=sidDocument,proto3" json:"sidDocument"`
}

func (m *QueryGetSidDocumentResponse) Reset()         { *m = QueryGetSidDocumentResponse{} }
func (m *QueryGetSidDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSidDocumentResponse) ProtoMessage()    {}
func (*QueryGetSidDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{17}
}
func (m *QueryGetSidDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSidDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSidDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSidDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSidDocumentResponse.Merge(m, src)
}
func (m *QueryGetSidDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSidDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSidDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSidDocumentResponse proto.InternalMessageInfo

func (m *QueryGetSidDocumentResponse) GetSidDocument() SidDocument {
	if m != nil {
		return m.SidDocument
	}
	return SidDocument{}
}

type QueryAllSidDocumentRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSidDocumentRequest) Reset()         { *m = QueryAllSidDocumentRequest{} }
func (m *QueryAllSidDocumentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSidDocumentRequest) ProtoMessage()    {}
func (*QueryAllSidDocumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{18}
}
func (m *QueryAllSidDocumentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSidDocumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSidDocumentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSidDocumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSidDocumentRequest.Merge(m, src)
}
func (m *QueryAllSidDocumentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSidDocumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSidDocumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSidDocumentRequest proto.InternalMessageInfo

func (m *QueryAllSidDocumentRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSidDocumentResponse struct {
	SidDocument []SidDocument       `protobuf:"bytes,1,rep,name=sidDocument,proto3" json:"sidDocument"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSidDocumentResponse) Reset()         { *m = QueryAllSidDocumentResponse{} }
func (m *QueryAllSidDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSidDocumentResponse) ProtoMessage()    {}
func (*QueryAllSidDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{19}
}
func (m *QueryAllSidDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSidDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSidDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSidDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSidDocumentResponse.Merge(m, src)
}
func (m *QueryAllSidDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSidDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSidDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSidDocumentResponse proto.InternalMessageInfo

func (m *QueryAllSidDocumentResponse) GetSidDocument() []SidDocument {
	if m != nil {
		return m.SidDocument
	}
	return nil
}

func (m *QueryAllSidDocumentResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSidDocumentVersionRequest struct {
	DocId string `protobuf:"bytes,1,opt,name=docId,proto3" json:"docId,omitempty"`
}

func (m *QueryGetSidDocumentVersionRequest) Reset()         { *m = QueryGetSidDocumentVersionRequest{} }
func (m *QueryGetSidDocumentVersionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSidDocumentVersionRequest) ProtoMessage()    {}
func (*QueryGetSidDocumentVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{20}
}
func (m *QueryGetSidDocumentVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSidDocumentVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSidDocumentVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSidDocumentVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSidDocumentVersionRequest.Merge(m, src)
}
func (m *QueryGetSidDocumentVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSidDocumentVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSidDocumentVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSidDocumentVersionRequest proto.InternalMessageInfo

func (m *QueryGetSidDocumentVersionRequest) GetDocId() string {
	if m != nil {
		return m.DocId
	}
	return ""
}

type QueryGetSidDocumentVersionResponse struct {
	SidDocumentVersion SidDocumentVersion `protobuf:"bytes,1,opt,name=sidDocumentVersion,proto3" json:"sidDocumentVersion"`
}

func (m *QueryGetSidDocumentVersionResponse) Reset()         { *m = QueryGetSidDocumentVersionResponse{} }
func (m *QueryGetSidDocumentVersionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSidDocumentVersionResponse) ProtoMessage()    {}
func (*QueryGetSidDocumentVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{21}
}
func (m *QueryGetSidDocumentVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSidDocumentVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSidDocumentVersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSidDocumentVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSidDocumentVersionResponse.Merge(m, src)
}
func (m *QueryGetSidDocumentVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSidDocumentVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSidDocumentVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSidDocumentVersionResponse proto.InternalMessageInfo

func (m *QueryGetSidDocumentVersionResponse) GetSidDocumentVersion() SidDocumentVersion {
	if m != nil {
		return m.SidDocumentVersion
	}
	return SidDocumentVersion{}
}

type QueryAllSidDocumentVersionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSidDocumentVersionRequest) Reset()         { *m = QueryAllSidDocumentVersionRequest{} }
func (m *QueryAllSidDocumentVersionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSidDocumentVersionRequest) ProtoMessage()    {}
func (*QueryAllSidDocumentVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{22}
}
func (m *QueryAllSidDocumentVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSidDocumentVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSidDocumentVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSidDocumentVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSidDocumentVersionRequest.Merge(m, src)
}
func (m *QueryAllSidDocumentVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSidDocumentVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSidDocumentVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSidDocumentVersionRequest proto.InternalMessageInfo

func (m *QueryAllSidDocumentVersionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSidDocumentVersionResponse struct {
	SidDocumentVersion []SidDocumentVersion `protobuf:"bytes,1,rep,name=sidDocumentVersion,proto3" json:"sidDocumentVersion"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSidDocumentVersionResponse) Reset()         { *m = QueryAllSidDocumentVersionResponse{} }
func (m *QueryAllSidDocumentVersionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSidDocumentVersionResponse) ProtoMessage()    {}
func (*QueryAllSidDocumentVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{23}
}
func (m *QueryAllSidDocumentVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSidDocumentVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSidDocumentVersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSidDocumentVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSidDocumentVersionResponse.Merge(m, src)
}
func (m *QueryAllSidDocumentVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSidDocumentVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSidDocumentVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSidDocumentVersionResponse proto.InternalMessageInfo

func (m *QueryAllSidDocumentVersionResponse) GetSidDocumentVersion() []SidDocumentVersion {
	if m != nil {
		return m.SidDocumentVersion
	}
	return nil
}

func (m *QueryAllSidDocumentVersionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPastSeedsRequest struct {
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
}

func (m *QueryGetPastSeedsRequest) Reset()         { *m = QueryGetPastSeedsRequest{} }
func (m *QueryGetPastSeedsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPastSeedsRequest) ProtoMessage()    {}
func (*QueryGetPastSeedsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{24}
}
func (m *QueryGetPastSeedsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPastSeedsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPastSeedsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPastSeedsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPastSeedsRequest.Merge(m, src)
}
func (m *QueryGetPastSeedsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPastSeedsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPastSeedsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPastSeedsRequest proto.InternalMessageInfo

func (m *QueryGetPastSeedsRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

type QueryGetPastSeedsResponse struct {
	PastSeeds PastSeeds `protobuf:"bytes,1,opt,name=pastSeeds,proto3" json:"pastSeeds"`
}

func (m *QueryGetPastSeedsResponse) Reset()         { *m = QueryGetPastSeedsResponse{} }
func (m *QueryGetPastSeedsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPastSeedsResponse) ProtoMessage()    {}
func (*QueryGetPastSeedsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{25}
}
func (m *QueryGetPastSeedsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPastSeedsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPastSeedsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPastSeedsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPastSeedsResponse.Merge(m, src)
}
func (m *QueryGetPastSeedsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPastSeedsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPastSeedsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPastSeedsResponse proto.InternalMessageInfo

func (m *QueryGetPastSeedsResponse) GetPastSeeds() PastSeeds {
	if m != nil {
		return m.PastSeeds
	}
	return PastSeeds{}
}

type QueryAllPastSeedsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPastSeedsRequest) Reset()         { *m = QueryAllPastSeedsRequest{} }
func (m *QueryAllPastSeedsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPastSeedsRequest) ProtoMessage()    {}
func (*QueryAllPastSeedsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{26}
}
func (m *QueryAllPastSeedsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPastSeedsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPastSeedsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPastSeedsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPastSeedsRequest.Merge(m, src)
}
func (m *QueryAllPastSeedsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPastSeedsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPastSeedsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPastSeedsRequest proto.InternalMessageInfo

func (m *QueryAllPastSeedsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPastSeedsResponse struct {
	PastSeeds  []PastSeeds         `protobuf:"bytes,1,rep,name=pastSeeds,proto3" json:"pastSeeds"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPastSeedsResponse) Reset()         { *m = QueryAllPastSeedsResponse{} }
func (m *QueryAllPastSeedsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPastSeedsResponse) ProtoMessage()    {}
func (*QueryAllPastSeedsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{27}
}
func (m *QueryAllPastSeedsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPastSeedsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPastSeedsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPastSeedsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPastSeedsResponse.Merge(m, src)
}
func (m *QueryAllPastSeedsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPastSeedsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPastSeedsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPastSeedsResponse proto.InternalMessageInfo

func (m *QueryAllPastSeedsResponse) GetPastSeeds() []PastSeeds {
	if m != nil {
		return m.PastSeeds
	}
	return nil
}

func (m *QueryAllPastSeedsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPaymentAddressRequest struct {
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
}

func (m *QueryGetPaymentAddressRequest) Reset()         { *m = QueryGetPaymentAddressRequest{} }
func (m *QueryGetPaymentAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentAddressRequest) ProtoMessage()    {}
func (*QueryGetPaymentAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{28}
}
func (m *QueryGetPaymentAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentAddressRequest.Merge(m, src)
}
func (m *QueryGetPaymentAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentAddressRequest proto.InternalMessageInfo

func (m *QueryGetPaymentAddressRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

type QueryGetPaymentAddressResponse struct {
	PaymentAddress PaymentAddress `protobuf:"bytes,1,opt,name=paymentAddress,proto3" json:"paymentAddress"`
}

func (m *QueryGetPaymentAddressResponse) Reset()         { *m = QueryGetPaymentAddressResponse{} }
func (m *QueryGetPaymentAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPaymentAddressResponse) ProtoMessage()    {}
func (*QueryGetPaymentAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{29}
}
func (m *QueryGetPaymentAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPaymentAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPaymentAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPaymentAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPaymentAddressResponse.Merge(m, src)
}
func (m *QueryGetPaymentAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPaymentAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPaymentAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPaymentAddressResponse proto.InternalMessageInfo

func (m *QueryGetPaymentAddressResponse) GetPaymentAddress() PaymentAddress {
	if m != nil {
		return m.PaymentAddress
	}
	return PaymentAddress{}
}

type QueryAllPaymentAddressRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentAddressRequest) Reset()         { *m = QueryAllPaymentAddressRequest{} }
func (m *QueryAllPaymentAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentAddressRequest) ProtoMessage()    {}
func (*QueryAllPaymentAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{30}
}
func (m *QueryAllPaymentAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentAddressRequest.Merge(m, src)
}
func (m *QueryAllPaymentAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentAddressRequest proto.InternalMessageInfo

func (m *QueryAllPaymentAddressRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPaymentAddressResponse struct {
	PaymentAddress []PaymentAddress    `protobuf:"bytes,1,rep,name=paymentAddress,proto3" json:"paymentAddress"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPaymentAddressResponse) Reset()         { *m = QueryAllPaymentAddressResponse{} }
func (m *QueryAllPaymentAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPaymentAddressResponse) ProtoMessage()    {}
func (*QueryAllPaymentAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1769a3ee02bdf63c, []int{31}
}
func (m *QueryAllPaymentAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPaymentAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPaymentAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPaymentAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPaymentAddressResponse.Merge(m, src)
}
func (m *QueryAllPaymentAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPaymentAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPaymentAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPaymentAddressResponse proto.InternalMessageInfo

func (m *QueryAllPaymentAddressResponse) GetPaymentAddress() []PaymentAddress {
	if m != nil {
		return m.PaymentAddress
	}
	return nil
}

func (m *QueryAllPaymentAddressResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "saonetwork.sao.did.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "saonetwork.sao.did.QueryParamsResponse")
	proto.RegisterType((*QueryGetDidBingingProofRequest)(nil), "saonetwork.sao.did.QueryGetDidBingingProofRequest")
	proto.RegisterType((*QueryGetDidBingingProofResponse)(nil), "saonetwork.sao.did.QueryGetDidBingingProofResponse")
	proto.RegisterType((*QueryAllDidBingingProofRequest)(nil), "saonetwork.sao.did.QueryAllDidBingingProofRequest")
	proto.RegisterType((*QueryAllDidBingingProofResponse)(nil), "saonetwork.sao.did.QueryAllDidBingingProofResponse")
	proto.RegisterType((*QueryGetAccountListRequest)(nil), "saonetwork.sao.did.QueryGetAccountListRequest")
	proto.RegisterType((*QueryGetAccountListResponse)(nil), "saonetwork.sao.did.QueryGetAccountListResponse")
	proto.RegisterType((*QueryAllAccountListRequest)(nil), "saonetwork.sao.did.QueryAllAccountListRequest")
	proto.RegisterType((*QueryAllAccountListResponse)(nil), "saonetwork.sao.did.QueryAllAccountListResponse")
	proto.RegisterType((*QueryGetAccountAuthRequest)(nil), "saonetwork.sao.did.QueryGetAccountAuthRequest")
	proto.RegisterType((*QueryGetAccountAuthResponse)(nil), "saonetwork.sao.did.QueryGetAccountAuthResponse")
	proto.RegisterType((*QueryAllAccountAuthRequest)(nil), "saonetwork.sao.did.QueryAllAccountAuthRequest")
	proto.RegisterType((*QueryAllAccountAuthResponse)(nil), "saonetwork.sao.did.QueryAllAccountAuthResponse")
	proto.RegisterType((*QueryGetAllAccountAuthsRequest)(nil), "saonetwork.sao.did.QueryGetAllAccountAuthsRequest")
	proto.RegisterType((*QueryGetAllAccountAuthsResponse)(nil), "saonetwork.sao.did.QueryGetAllAccountAuthsResponse")
	proto.RegisterType((*QueryGetSidDocumentRequest)(nil), "saonetwork.sao.did.QueryGetSidDocumentRequest")
	proto.RegisterType((*QueryGetSidDocumentResponse)(nil), "saonetwork.sao.did.QueryGetSidDocumentResponse")
	proto.RegisterType((*QueryAllSidDocumentRequest)(nil), "saonetwork.sao.did.QueryAllSidDocumentRequest")
	proto.RegisterType((*QueryAllSidDocumentResponse)(nil), "saonetwork.sao.did.QueryAllSidDocumentResponse")
	proto.RegisterType((*QueryGetSidDocumentVersionRequest)(nil), "saonetwork.sao.did.QueryGetSidDocumentVersionRequest")
	proto.RegisterType((*QueryGetSidDocumentVersionResponse)(nil), "saonetwork.sao.did.QueryGetSidDocumentVersionResponse")
	proto.RegisterType((*QueryAllSidDocumentVersionRequest)(nil), "saonetwork.sao.did.QueryAllSidDocumentVersionRequest")
	proto.RegisterType((*QueryAllSidDocumentVersionResponse)(nil), "saonetwork.sao.did.QueryAllSidDocumentVersionResponse")
	proto.RegisterType((*QueryGetPastSeedsRequest)(nil), "saonetwork.sao.did.QueryGetPastSeedsRequest")
	proto.RegisterType((*QueryGetPastSeedsResponse)(nil), "saonetwork.sao.did.QueryGetPastSeedsResponse")
	proto.RegisterType((*QueryAllPastSeedsRequest)(nil), "saonetwork.sao.did.QueryAllPastSeedsRequest")
	proto.RegisterType((*QueryAllPastSeedsResponse)(nil), "saonetwork.sao.did.QueryAllPastSeedsResponse")
	proto.RegisterType((*QueryGetPaymentAddressRequest)(nil), "saonetwork.sao.did.QueryGetPaymentAddressRequest")
	proto.RegisterType((*QueryGetPaymentAddressResponse)(nil), "saonetwork.sao.did.QueryGetPaymentAddressResponse")
	proto.RegisterType((*QueryAllPaymentAddressRequest)(nil), "saonetwork.sao.did.QueryAllPaymentAddressRequest")
	proto.RegisterType((*QueryAllPaymentAddressResponse)(nil), "saonetwork.sao.did.QueryAllPaymentAddressResponse")
}

func init() { proto.RegisterFile("sao/did/query.proto", fileDescriptor_1769a3ee02bdf63c) }

var fileDescriptor_1769a3ee02bdf63c = []byte{
	// 1358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x99, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0xe3, 0x2e, 0xad, 0x94, 0x49, 0x55, 0x60, 0x1a, 0xa4, 0xe2, 0x26, 0x9b, 0x30, 0x25,
	0x3f, 0x68, 0x13, 0xbb, 0xbb, 0x21, 0xd0, 0x22, 0x04, 0xda, 0x10, 0x11, 0x21, 0x21, 0x08, 0x89,
	0xc4, 0x01, 0x21, 0x56, 0xde, 0xb5, 0xeb, 0x58, 0x75, 0xec, 0xed, 0x8e, 0x37, 0x10, 0x45, 0xb9,
	0xf4, 0x2f, 0x40, 0xaa, 0xc4, 0x05, 0x89, 0x13, 0xa8, 0x12, 0x42, 0xe2, 0x04, 0x42, 0x42, 0x88,
	0x6b, 0x25, 0x2e, 0x95, 0xb8, 0x70, 0x42, 0x28, 0xe1, 0x1f, 0xe0, 0x3f, 0x40, 0x1e, 0x3f, 0xaf,
	0xc7, 0xf6, 0x78, 0xd6, 0x9b, 0xba, 0xb7, 0x74, 0x66, 0xde, 0xcc, 0xe7, 0xfb, 0x7d, 0xb3, 0xf6,
	0x7b, 0x2e, 0xba, 0x4c, 0x0d, 0x5f, 0x37, 0x1d, 0x53, 0xbf, 0x37, 0xb0, 0xfa, 0x87, 0x5a, 0xaf,
	0xef, 0x07, 0x3e, 0xc6, 0xd4, 0xf0, 0x3d, 0x2b, 0xf8, 0xdc, 0xef, 0xdf, 0xd5, 0xa8, 0xe1, 0x6b,
	0xa6, 0x63, 0xaa, 0xd3, 0xb6, 0x6f, 0xfb, 0x6c, 0x5a, 0x0f, 0xff, 0x8a, 0x56, 0xaa, 0x33, 0xb6,
	0xef, 0xdb, 0xae, 0xa5, 0x1b, 0x3d, 0x47, 0x37, 0x3c, 0xcf, 0x0f, 0x8c, 0xc0, 0xf1, 0x3d, 0x0a,
	0xb3, 0xd7, 0xbb, 0x3e, 0xdd, 0xf7, 0xa9, 0xde, 0x31, 0xa8, 0x15, 0x1d, 0xa0, 0x1f, 0x34, 0x3a,
	0x56, 0x60, 0x34, 0xf4, 0x9e, 0x61, 0x3b, 0x1e, 0x5b, 0x0c, 0x6b, 0xa7, 0x63, 0x90, 0x9e, 0xd1,
	0x37, 0xf6, 0xe3, 0x1d, 0xe6, 0xe2, 0x51, 0xd3, 0x31, 0xdb, 0x1d, 0xc7, 0x33, 0x1d, 0xcf, 0x6e,
	0xf7, 0xfa, 0xbe, 0x7f, 0x07, 0x16, 0xa8, 0xf1, 0x02, 0xa3, 0xdb, 0xf5, 0x07, 0x5e, 0xd0, 0x76,
	0x1d, 0x1a, 0x64, 0xe7, 0xa8, 0x63, 0xb6, 0x4d, 0xbf, 0x3b, 0xd8, 0xb7, 0xbc, 0x78, 0x8e, 0x88,
	0xe6, 0xda, 0x07, 0x56, 0x9f, 0x26, 0x48, 0x57, 0x12, 0x24, 0x1a, 0xb4, 0xa9, 0x65, 0x99, 0x31,
	0xd6, 0x6c, 0x32, 0x73, 0xc8, 0x02, 0x0d, 0xd3, 0xec, 0x5b, 0x94, 0x16, 0x41, 0x19, 0x83, 0x60,
	0x0f, 0xe6, 0xae, 0xc6, 0x73, 0x02, 0x35, 0x64, 0x1a, 0xe1, 0x8f, 0x42, 0x9b, 0xb6, 0x99, 0x07,
	0x3b, 0xd6, 0xbd, 0x81, 0x45, 0x03, 0xf2, 0x21, 0xba, 0x9c, 0x1a, 0xa5, 0x3d, 0xdf, 0xa3, 0x16,
	0xbe, 0x85, 0x2e, 0x44, 0x5e, 0x5d, 0x51, 0xe6, 0x95, 0xe5, 0xa9, 0xa6, 0xaa, 0xe5, 0xd3, 0xa6,
	0x45, 0x31, 0x1b, 0xcf, 0x3c, 0xfa, 0x7b, 0x6e, 0x62, 0x07, 0xd6, 0x93, 0xb7, 0x50, 0x9d, 0x6d,
	0xb8, 0x65, 0x05, 0x9b, 0x8e, 0xb9, 0xe1, 0x78, 0xb6, 0xe3, 0xd9, 0xdb, 0x21, 0x07, 0x1c, 0x89,
	0x67, 0xd0, 0x24, 0xb0, 0xbf, 0x67, 0xb2, 0xed, 0x27, 0x77, 0x92, 0x01, 0x72, 0x80, 0xe6, 0x0a,
	0xe3, 0x01, 0x6e, 0x17, 0x3d, 0x9b, 0x99, 0x02, 0xca, 0x6b, 0x22, 0xca, 0xcc, 0x52, 0xc0, 0xcd,
	0xee, 0x40, 0xf6, 0x80, 0xbb, 0xe5, 0xba, 0x05, 0xdc, 0xef, 0x22, 0x94, 0xdc, 0x2c, 0x38, 0x71,
	0x51, 0x8b, 0xae, 0xa1, 0x16, 0x5e, 0x43, 0x2d, 0xba, 0xe7, 0x70, 0x0d, 0xb5, 0x6d, 0xc3, 0xb6,
	0x20, 0x76, 0x87, 0x8b, 0x24, 0xbf, 0x2b, 0x20, 0x51, 0x74, 0x94, 0x4c, 0x62, 0xed, 0xc9, 0x24,
	0xe2, 0xad, 0x94, 0x80, 0x73, 0x4c, 0xc0, 0xd2, 0x48, 0x01, 0x11, 0x51, 0x4a, 0x81, 0x86, 0xd4,
	0x38, 0x47, 0xad, 0x28, 0x71, 0xef, 0x3b, 0x34, 0x88, 0x7d, 0x7a, 0x0e, 0xd5, 0x4c, 0x27, 0xce,
	0x6c, 0xf8, 0x27, 0xb9, 0x83, 0xae, 0x0a, 0xd7, 0x83, 0xd8, 0x2d, 0x34, 0x65, 0x24, 0xc3, 0xe0,
	0xec, 0x9c, 0x48, 0x28, 0x17, 0x0d, 0x22, 0xf9, 0x48, 0x62, 0x02, 0x57, 0xcb, 0x75, 0x05, 0x5c,
	0x55, 0xe5, 0xef, 0x47, 0x05, 0xe4, 0x64, 0x8f, 0x29, 0x92, 0x53, 0x3b, 0x9b, 0x9c, 0xea, 0xf2,
	0xf5, 0x66, 0x2e, 0x5f, 0xad, 0x41, 0xb0, 0x17, 0xfb, 0x52, 0x47, 0x08, 0x4e, 0xdd, 0x1c, 0xa6,
	0x8d, 0x1b, 0x11, 0x64, 0x2f, 0x8a, 0xce, 0xc9, 0x0d, 0x87, 0x4b, 0x64, 0x2f, 0x5c, 0x96, 0x91,
	0x1b, 0x0e, 0x09, 0xb2, 0xc7, 0x53, 0x3e, 0xc5, 0xec, 0xc9, 0xe5, 0xd4, 0xce, 0x26, 0xa7, 0xba,
	0xec, 0x35, 0x93, 0x27, 0x6a, 0x9a, 0x99, 0xca, 0x7e, 0x71, 0x73, 0x85, 0x31, 0x20, 0xf4, 0x1d,
	0x74, 0x91, 0xc3, 0xa5, 0x25, 0x95, 0xee, 0xa4, 0x82, 0xc8, 0x1b, 0xc9, 0xcd, 0xda, 0x75, 0xcc,
	0x4d, 0x78, 0xd7, 0x71, 0x4f, 0x7a, 0x78, 0xeb, 0x25, 0x4f, 0xfa, 0xe1, 0x00, 0x7f, 0xaf, 0x52,
	0xb1, 0x49, 0x22, 0x68, 0x32, 0x2c, 0xbb, 0x57, 0x5c, 0x74, 0x9c, 0x08, 0x2e, 0x92, 0xbf, 0x57,
	0x02, 0xc6, 0xa7, 0x71, 0xaf, 0x4a, 0xc9, 0xa9, 0x9d, 0x4d, 0x4e, 0x75, 0xf7, 0xea, 0x36, 0x7a,
	0x49, 0xe0, 0xff, 0xc7, 0x51, 0x7e, 0x62, 0x7b, 0xa6, 0xd1, 0x79, 0xd3, 0xef, 0x0e, 0xd3, 0x17,
	0xfd, 0x83, 0xdc, 0x57, 0x10, 0x91, 0xc5, 0x82, 0xe6, 0x4f, 0x11, 0xa6, 0xb9, 0xd9, 0xa1, 0xc7,
	0x72, 0xe9, 0xb0, 0x1a, 0x1c, 0x10, 0xec, 0x43, 0xee, 0x02, 0x7f, 0xda, 0xf0, 0x0c, 0x7f, 0x55,
	0xe9, 0xfd, 0x23, 0x56, 0x5c, 0x70, 0xda, 0x08, 0xc5, 0xb5, 0x2a, 0x14, 0x57, 0x97, 0xfa, 0x15,
	0x74, 0x25, 0x4e, 0xdf, 0xb6, 0x41, 0x83, 0xdd, 0xb0, 0xfc, 0x2c, 0x7e, 0x98, 0x7c, 0x86, 0x5e,
	0x14, 0xac, 0x06, 0xc5, 0x2d, 0x34, 0xd9, 0x8b, 0x07, 0xc1, 0xdf, 0x59, 0x71, 0xb1, 0x08, 0x8b,
	0x40, 0x5f, 0x12, 0x45, 0x3a, 0x40, 0xd3, 0x72, 0xdd, 0x1c, 0x4d, 0x55, 0xf9, 0x7b, 0xa8, 0x80,
	0x88, 0xf4, 0x21, 0x62, 0x11, 0xb5, 0xf1, 0x45, 0x54, 0x97, 0x9b, 0x06, 0x9a, 0x4d, 0xdc, 0x66,
	0x1d, 0x40, 0x2b, 0x6a, 0x00, 0x8a, 0x13, 0xd4, 0x4f, 0xde, 0x10, 0xd9, 0x10, 0x10, 0xb8, 0x8d,
	0x2e, 0xf5, 0x52, 0x33, 0x60, 0x25, 0x11, 0xab, 0xe4, 0x57, 0x82, 0xd4, 0x4c, 0x3c, 0xb1, 0x01,
	0x93, 0xf9, 0x29, 0xc2, 0xac, 0x2a, 0x73, 0xbf, 0x2a, 0x49, 0x65, 0x3e, 0x86, 0xba, 0xda, 0x93,
	0xa8, 0xab, 0x2c, 0x9b, 0xcd, 0xff, 0xa6, 0xd1, 0x79, 0x46, 0x8f, 0x8f, 0xd1, 0x85, 0xa8, 0x61,
	0xc2, 0xc2, 0x07, 0x41, 0xbe, 0x37, 0x53, 0x97, 0x46, 0xae, 0x8b, 0x0e, 0x24, 0xe4, 0xfe, 0x9f,
	0xff, 0x3e, 0x38, 0x37, 0x83, 0x55, 0x7d, 0xd7, 0xf0, 0x3f, 0x88, 0x02, 0xf4, 0x74, 0xcf, 0x8b,
	0x7f, 0x52, 0x72, 0x2d, 0x05, 0x6e, 0x16, 0x1e, 0x50, 0xd8, 0xbd, 0xa9, 0x6b, 0x63, 0xc5, 0x00,
	0xe0, 0x6d, 0x06, 0xb8, 0x86, 0x1b, 0x22, 0xc0, 0x5c, 0xfb, 0xad, 0x1f, 0x0d, 0xdb, 0xc1, 0x63,
	0xfc, 0x83, 0x82, 0x70, 0x66, 0xdb, 0x96, 0xeb, 0x4a, 0xd0, 0x0b, 0x1b, 0x38, 0x09, 0x7a, 0x71,
	0x27, 0x46, 0x56, 0x19, 0xfa, 0x12, 0x5e, 0x28, 0x85, 0x8e, 0xbf, 0x51, 0xd0, 0x14, 0x57, 0xd6,
	0x63, 0x4d, 0x66, 0x57, 0xbe, 0x49, 0x51, 0xf5, 0xd2, 0xeb, 0x81, 0x4f, 0x63, 0x7c, 0xcb, 0x78,
	0x51, 0xc4, 0xc7, 0x7f, 0xb8, 0xd0, 0x8f, 0x4c, 0xc7, 0x3c, 0xc6, 0x5f, 0x2b, 0xe8, 0x12, 0xb7,
	0x4f, 0xe8, 0xa5, 0x26, 0xf3, 0x65, 0x2c, 0x46, 0x71, 0x47, 0x44, 0x96, 0x19, 0x23, 0xc1, 0xf3,
	0xa3, 0x18, 0xf1, 0x77, 0x89, 0x7d, 0xac, 0x88, 0x2e, 0x63, 0x1f, 0xd7, 0x25, 0x94, 0xb2, 0x8f,
	0x2f, 0xf7, 0xc9, 0x3a, 0x43, 0xd3, 0xf1, 0xaa, 0x0c, 0xcd, 0x18, 0x04, 0x7b, 0xc3, 0x4b, 0xb9,
	0x99, 0x71, 0x31, 0xdc, 0xae, 0xac, 0x8b, 0xe5, 0x50, 0xc5, 0x9d, 0x49, 0x39, 0x17, 0x43, 0x54,
	0xfc, 0xb3, 0x82, 0x70, 0xbe, 0xf2, 0x97, 0xff, 0xdc, 0xc5, 0xad, 0x85, 0xfc, 0xe7, 0x5e, 0xd0,
	0x5a, 0x90, 0xd7, 0x19, 0x69, 0x03, 0xeb, 0x22, 0x52, 0xdb, 0x0a, 0xda, 0x86, 0xeb, 0xb6, 0x79,
	0x62, 0x0a, 0x97, 0xf3, 0x5b, 0x05, 0x4d, 0x71, 0x15, 0x91, 0x3c, 0xfd, 0xf9, 0x62, 0x5e, 0x9e,
	0x7e, 0x41, 0x55, 0x4e, 0x5e, 0x65, 0xa4, 0x1a, 0x5e, 0x11, 0x91, 0xf2, 0x9f, 0xef, 0xf4, 0xa3,
	0x61, 0xe3, 0x12, 0x65, 0x9f, 0xdb, 0x6d, 0x64, 0xf6, 0xc7, 0x22, 0x15, 0xf7, 0x0f, 0xf2, 0xec,
	0xf3, 0xa4, 0xf8, 0x37, 0x05, 0xe1, 0x7c, 0x59, 0x89, 0xd7, 0x4b, 0x7a, 0x93, 0x2e, 0xa0, 0xd5,
	0xd7, 0xc6, 0x0d, 0x03, 0xde, 0x5b, 0x8c, 0xb7, 0x89, 0x6f, 0x8e, 0xe2, 0x8d, 0x3f, 0x8c, 0xea,
	0x47, 0xac, 0xb7, 0x38, 0xc6, 0xbf, 0x28, 0xe8, 0x85, 0xfc, 0xc6, 0xa1, 0xc9, 0xeb, 0x25, 0x4d,
	0x2b, 0x2d, 0x41, 0x5a, 0xcc, 0x93, 0x9b, 0x4c, 0xc2, 0x75, 0xbc, 0x5c, 0x56, 0x02, 0xfe, 0x4a,
	0x41, 0x93, 0xc3, 0x1a, 0x11, 0xaf, 0xc8, 0xac, 0xcb, 0x56, 0xba, 0xea, 0x6a, 0xc9, 0xd5, 0x00,
	0xb7, 0xc2, 0xe0, 0x16, 0xf1, 0xcb, 0xe2, 0x77, 0x7e, 0xfc, 0x51, 0x19, 0x7e, 0x58, 0x0f, 0x14,
	0x74, 0x71, 0xb8, 0x47, 0x68, 0xe5, 0x8a, 0xcc, 0x93, 0x31, 0xd8, 0x44, 0xe5, 0x34, 0x59, 0x64,
	0x6c, 0xf3, 0xb8, 0x2e, 0x67, 0xc3, 0xdf, 0x2b, 0xe8, 0x52, 0xba, 0x1c, 0xc3, 0x0d, 0xb9, 0x0b,
	0x82, 0x42, 0x53, 0x6d, 0x8e, 0x13, 0x02, 0x84, 0x0d, 0x46, 0x78, 0x03, 0xbf, 0x22, 0x26, 0x4c,
	0x7d, 0x78, 0x07, 0x0b, 0x1f, 0x2a, 0xe8, 0xf9, 0xf4, 0x6e, 0xa1, 0x8f, 0x0d, 0xb9, 0x33, 0xe3,
	0xf1, 0x16, 0x56, 0xb8, 0xe4, 0x06, 0xe3, 0x5d, 0xc0, 0xd7, 0x4a, 0xf0, 0x6e, 0xbc, 0xfd, 0xe8,
	0xa4, 0xae, 0x3c, 0x3e, 0xa9, 0x2b, 0xff, 0x9c, 0xd4, 0x95, 0x2f, 0x4f, 0xeb, 0x13, 0x8f, 0x4f,
	0xeb, 0x13, 0x7f, 0x9d, 0xd6, 0x27, 0x3e, 0x59, 0xb0, 0x9d, 0x60, 0x6f, 0xd0, 0xd1, 0xba, 0xfe,
	0x7e, 0x76, 0xa3, 0x2f, 0xd8, 0x56, 0xc1, 0x61, 0xcf, 0xa2, 0x9d, 0x0b, 0xec, 0x7f, 0x0c, 0xd6,
	0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x04, 0xe2, 0xc1, 0x73, 0xc1, 0x19, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a DidBingingProof by index.
	DidBingingProof(ctx context.Context, in *QueryGetDidBingingProofRequest, opts ...grpc.CallOption) (*QueryGetDidBingingProofResponse, error)
	// Queries a list of DidBingingProof items.
	DidBingingProofAll(ctx context.Context, in *QueryAllDidBingingProofRequest, opts ...grpc.CallOption) (*QueryAllDidBingingProofResponse, error)
	// Queries a AccountList by index.
	AccountList(ctx context.Context, in *QueryGetAccountListRequest, opts ...grpc.CallOption) (*QueryGetAccountListResponse, error)
	// Queries a list of AccountList items.
	AccountListAll(ctx context.Context, in *QueryAllAccountListRequest, opts ...grpc.CallOption) (*QueryAllAccountListResponse, error)
	// Queries a AccountAuth by index.
	AccountAuth(ctx context.Context, in *QueryGetAccountAuthRequest, opts ...grpc.CallOption) (*QueryGetAccountAuthResponse, error)
	// Queries a list of AccountAuth items.
	AccountAuthAll(ctx context.Context, in *QueryAllAccountAuthRequest, opts ...grpc.CallOption) (*QueryAllAccountAuthResponse, error)
	// Queries a list of GetAllAccountAuth items.
	GetAllAccountAuths(ctx context.Context, in *QueryGetAllAccountAuthsRequest, opts ...grpc.CallOption) (*QueryGetAllAccountAuthsResponse, error)
	// Queries a SidDocument by index.
	SidDocument(ctx context.Context, in *QueryGetSidDocumentRequest, opts ...grpc.CallOption) (*QueryGetSidDocumentResponse, error)
	// Queries a list of SidDocument items.
	SidDocumentAll(ctx context.Context, in *QueryAllSidDocumentRequest, opts ...grpc.CallOption) (*QueryAllSidDocumentResponse, error)
	// Queries a SidDocumentVersion by index.
	SidDocumentVersion(ctx context.Context, in *QueryGetSidDocumentVersionRequest, opts ...grpc.CallOption) (*QueryGetSidDocumentVersionResponse, error)
	// Queries a list of SidDocumentVersion items.
	SidDocumentVersionAll(ctx context.Context, in *QueryAllSidDocumentVersionRequest, opts ...grpc.CallOption) (*QueryAllSidDocumentVersionResponse, error)
	// Queries a PastSeeds by index.
	PastSeeds(ctx context.Context, in *QueryGetPastSeedsRequest, opts ...grpc.CallOption) (*QueryGetPastSeedsResponse, error)
	// Queries a list of PastSeeds items.
	PastSeedsAll(ctx context.Context, in *QueryAllPastSeedsRequest, opts ...grpc.CallOption) (*QueryAllPastSeedsResponse, error)
	// Queries a PaymentAddress by index.
	PaymentAddress(ctx context.Context, in *QueryGetPaymentAddressRequest, opts ...grpc.CallOption) (*QueryGetPaymentAddressResponse, error)
	// Queries a list of PaymentAddress items.
	PaymentAddressAll(ctx context.Context, in *QueryAllPaymentAddressRequest, opts ...grpc.CallOption) (*QueryAllPaymentAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DidBingingProof(ctx context.Context, in *QueryGetDidBingingProofRequest, opts ...grpc.CallOption) (*QueryGetDidBingingProofResponse, error) {
	out := new(QueryGetDidBingingProofResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/DidBingingProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DidBingingProofAll(ctx context.Context, in *QueryAllDidBingingProofRequest, opts ...grpc.CallOption) (*QueryAllDidBingingProofResponse, error) {
	out := new(QueryAllDidBingingProofResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/DidBingingProofAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountList(ctx context.Context, in *QueryGetAccountListRequest, opts ...grpc.CallOption) (*QueryGetAccountListResponse, error) {
	out := new(QueryGetAccountListResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/AccountList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountListAll(ctx context.Context, in *QueryAllAccountListRequest, opts ...grpc.CallOption) (*QueryAllAccountListResponse, error) {
	out := new(QueryAllAccountListResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/AccountListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountAuth(ctx context.Context, in *QueryGetAccountAuthRequest, opts ...grpc.CallOption) (*QueryGetAccountAuthResponse, error) {
	out := new(QueryGetAccountAuthResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/AccountAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountAuthAll(ctx context.Context, in *QueryAllAccountAuthRequest, opts ...grpc.CallOption) (*QueryAllAccountAuthResponse, error) {
	out := new(QueryAllAccountAuthResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/AccountAuthAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllAccountAuths(ctx context.Context, in *QueryGetAllAccountAuthsRequest, opts ...grpc.CallOption) (*QueryGetAllAccountAuthsResponse, error) {
	out := new(QueryGetAllAccountAuthsResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/GetAllAccountAuths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SidDocument(ctx context.Context, in *QueryGetSidDocumentRequest, opts ...grpc.CallOption) (*QueryGetSidDocumentResponse, error) {
	out := new(QueryGetSidDocumentResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/SidDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SidDocumentAll(ctx context.Context, in *QueryAllSidDocumentRequest, opts ...grpc.CallOption) (*QueryAllSidDocumentResponse, error) {
	out := new(QueryAllSidDocumentResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/SidDocumentAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SidDocumentVersion(ctx context.Context, in *QueryGetSidDocumentVersionRequest, opts ...grpc.CallOption) (*QueryGetSidDocumentVersionResponse, error) {
	out := new(QueryGetSidDocumentVersionResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/SidDocumentVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SidDocumentVersionAll(ctx context.Context, in *QueryAllSidDocumentVersionRequest, opts ...grpc.CallOption) (*QueryAllSidDocumentVersionResponse, error) {
	out := new(QueryAllSidDocumentVersionResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/SidDocumentVersionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PastSeeds(ctx context.Context, in *QueryGetPastSeedsRequest, opts ...grpc.CallOption) (*QueryGetPastSeedsResponse, error) {
	out := new(QueryGetPastSeedsResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/PastSeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PastSeedsAll(ctx context.Context, in *QueryAllPastSeedsRequest, opts ...grpc.CallOption) (*QueryAllPastSeedsResponse, error) {
	out := new(QueryAllPastSeedsResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/PastSeedsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentAddress(ctx context.Context, in *QueryGetPaymentAddressRequest, opts ...grpc.CallOption) (*QueryGetPaymentAddressResponse, error) {
	out := new(QueryGetPaymentAddressResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/PaymentAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PaymentAddressAll(ctx context.Context, in *QueryAllPaymentAddressRequest, opts ...grpc.CallOption) (*QueryAllPaymentAddressResponse, error) {
	out := new(QueryAllPaymentAddressResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.did.Query/PaymentAddressAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a DidBingingProof by index.
	DidBingingProof(context.Context, *QueryGetDidBingingProofRequest) (*QueryGetDidBingingProofResponse, error)
	// Queries a list of DidBingingProof items.
	DidBingingProofAll(context.Context, *QueryAllDidBingingProofRequest) (*QueryAllDidBingingProofResponse, error)
	// Queries a AccountList by index.
	AccountList(context.Context, *QueryGetAccountListRequest) (*QueryGetAccountListResponse, error)
	// Queries a list of AccountList items.
	AccountListAll(context.Context, *QueryAllAccountListRequest) (*QueryAllAccountListResponse, error)
	// Queries a AccountAuth by index.
	AccountAuth(context.Context, *QueryGetAccountAuthRequest) (*QueryGetAccountAuthResponse, error)
	// Queries a list of AccountAuth items.
	AccountAuthAll(context.Context, *QueryAllAccountAuthRequest) (*QueryAllAccountAuthResponse, error)
	// Queries a list of GetAllAccountAuth items.
	GetAllAccountAuths(context.Context, *QueryGetAllAccountAuthsRequest) (*QueryGetAllAccountAuthsResponse, error)
	// Queries a SidDocument by index.
	SidDocument(context.Context, *QueryGetSidDocumentRequest) (*QueryGetSidDocumentResponse, error)
	// Queries a list of SidDocument items.
	SidDocumentAll(context.Context, *QueryAllSidDocumentRequest) (*QueryAllSidDocumentResponse, error)
	// Queries a SidDocumentVersion by index.
	SidDocumentVersion(context.Context, *QueryGetSidDocumentVersionRequest) (*QueryGetSidDocumentVersionResponse, error)
	// Queries a list of SidDocumentVersion items.
	SidDocumentVersionAll(context.Context, *QueryAllSidDocumentVersionRequest) (*QueryAllSidDocumentVersionResponse, error)
	// Queries a PastSeeds by index.
	PastSeeds(context.Context, *QueryGetPastSeedsRequest) (*QueryGetPastSeedsResponse, error)
	// Queries a list of PastSeeds items.
	PastSeedsAll(context.Context, *QueryAllPastSeedsRequest) (*QueryAllPastSeedsResponse, error)
	// Queries a PaymentAddress by index.
	PaymentAddress(context.Context, *QueryGetPaymentAddressRequest) (*QueryGetPaymentAddressResponse, error)
	// Queries a list of PaymentAddress items.
	PaymentAddressAll(context.Context, *QueryAllPaymentAddressRequest) (*QueryAllPaymentAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) DidBingingProof(ctx context.Context, req *QueryGetDidBingingProofRequest) (*QueryGetDidBingingProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DidBingingProof not implemented")
}
func (*UnimplementedQueryServer) DidBingingProofAll(ctx context.Context, req *QueryAllDidBingingProofRequest) (*QueryAllDidBingingProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DidBingingProofAll not implemented")
}
func (*UnimplementedQueryServer) AccountList(ctx context.Context, req *QueryGetAccountListRequest) (*QueryGetAccountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountList not implemented")
}
func (*UnimplementedQueryServer) AccountListAll(ctx context.Context, req *QueryAllAccountListRequest) (*QueryAllAccountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountListAll not implemented")
}
func (*UnimplementedQueryServer) AccountAuth(ctx context.Context, req *QueryGetAccountAuthRequest) (*QueryGetAccountAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAuth not implemented")
}
func (*UnimplementedQueryServer) AccountAuthAll(ctx context.Context, req *QueryAllAccountAuthRequest) (*QueryAllAccountAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAuthAll not implemented")
}
func (*UnimplementedQueryServer) GetAllAccountAuths(ctx context.Context, req *QueryGetAllAccountAuthsRequest) (*QueryGetAllAccountAuthsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAccountAuths not implemented")
}
func (*UnimplementedQueryServer) SidDocument(ctx context.Context, req *QueryGetSidDocumentRequest) (*QueryGetSidDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SidDocument not implemented")
}
func (*UnimplementedQueryServer) SidDocumentAll(ctx context.Context, req *QueryAllSidDocumentRequest) (*QueryAllSidDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SidDocumentAll not implemented")
}
func (*UnimplementedQueryServer) SidDocumentVersion(ctx context.Context, req *QueryGetSidDocumentVersionRequest) (*QueryGetSidDocumentVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SidDocumentVersion not implemented")
}
func (*UnimplementedQueryServer) SidDocumentVersionAll(ctx context.Context, req *QueryAllSidDocumentVersionRequest) (*QueryAllSidDocumentVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SidDocumentVersionAll not implemented")
}
func (*UnimplementedQueryServer) PastSeeds(ctx context.Context, req *QueryGetPastSeedsRequest) (*QueryGetPastSeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PastSeeds not implemented")
}
func (*UnimplementedQueryServer) PastSeedsAll(ctx context.Context, req *QueryAllPastSeedsRequest) (*QueryAllPastSeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PastSeedsAll not implemented")
}
func (*UnimplementedQueryServer) PaymentAddress(ctx context.Context, req *QueryGetPaymentAddressRequest) (*QueryGetPaymentAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAddress not implemented")
}
func (*UnimplementedQueryServer) PaymentAddressAll(ctx context.Context, req *QueryAllPaymentAddressRequest) (*QueryAllPaymentAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentAddressAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DidBingingProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDidBingingProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DidBingingProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/DidBingingProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DidBingingProof(ctx, req.(*QueryGetDidBingingProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DidBingingProofAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDidBingingProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DidBingingProofAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/DidBingingProofAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DidBingingProofAll(ctx, req.(*QueryAllDidBingingProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/AccountList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountList(ctx, req.(*QueryGetAccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/AccountListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountListAll(ctx, req.(*QueryAllAccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/AccountAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountAuth(ctx, req.(*QueryGetAccountAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountAuthAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAccountAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountAuthAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/AccountAuthAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountAuthAll(ctx, req.(*QueryAllAccountAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllAccountAuths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllAccountAuthsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllAccountAuths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/GetAllAccountAuths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllAccountAuths(ctx, req.(*QueryGetAllAccountAuthsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SidDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSidDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SidDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/SidDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SidDocument(ctx, req.(*QueryGetSidDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SidDocumentAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSidDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SidDocumentAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/SidDocumentAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SidDocumentAll(ctx, req.(*QueryAllSidDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SidDocumentVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSidDocumentVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SidDocumentVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/SidDocumentVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SidDocumentVersion(ctx, req.(*QueryGetSidDocumentVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SidDocumentVersionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSidDocumentVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SidDocumentVersionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/SidDocumentVersionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SidDocumentVersionAll(ctx, req.(*QueryAllSidDocumentVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PastSeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPastSeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PastSeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/PastSeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PastSeeds(ctx, req.(*QueryGetPastSeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PastSeedsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPastSeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PastSeedsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/PastSeedsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PastSeedsAll(ctx, req.(*QueryAllPastSeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPaymentAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/PaymentAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentAddress(ctx, req.(*QueryGetPaymentAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PaymentAddressAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPaymentAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PaymentAddressAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.did.Query/PaymentAddressAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PaymentAddressAll(ctx, req.(*QueryAllPaymentAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "saonetwork.sao.did.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DidBingingProof",
			Handler:    _Query_DidBingingProof_Handler,
		},
		{
			MethodName: "DidBingingProofAll",
			Handler:    _Query_DidBingingProofAll_Handler,
		},
		{
			MethodName: "AccountList",
			Handler:    _Query_AccountList_Handler,
		},
		{
			MethodName: "AccountListAll",
			Handler:    _Query_AccountListAll_Handler,
		},
		{
			MethodName: "AccountAuth",
			Handler:    _Query_AccountAuth_Handler,
		},
		{
			MethodName: "AccountAuthAll",
			Handler:    _Query_AccountAuthAll_Handler,
		},
		{
			MethodName: "GetAllAccountAuths",
			Handler:    _Query_GetAllAccountAuths_Handler,
		},
		{
			MethodName: "SidDocument",
			Handler:    _Query_SidDocument_Handler,
		},
		{
			MethodName: "SidDocumentAll",
			Handler:    _Query_SidDocumentAll_Handler,
		},
		{
			MethodName: "SidDocumentVersion",
			Handler:    _Query_SidDocumentVersion_Handler,
		},
		{
			MethodName: "SidDocumentVersionAll",
			Handler:    _Query_SidDocumentVersionAll_Handler,
		},
		{
			MethodName: "PastSeeds",
			Handler:    _Query_PastSeeds_Handler,
		},
		{
			MethodName: "PastSeedsAll",
			Handler:    _Query_PastSeedsAll_Handler,
		},
		{
			MethodName: "PaymentAddress",
			Handler:    _Query_PaymentAddress_Handler,
		},
		{
			MethodName: "PaymentAddressAll",
			Handler:    _Query_PaymentAddressAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sao/did/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetDidBingingProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDidBingingProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDidBingingProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDidBingingProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDidBingingProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDidBingingProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DidBingingProof.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDidBingingProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDidBingingProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDidBingingProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDidBingingProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDidBingingProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDidBingingProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DidBingingProof) > 0 {
		for iNdEx := len(m.DidBingingProof) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DidBingingProof[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AccountList.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAccountListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccountListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccountListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAccountListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccountListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccountListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountList) > 0 {
		for iNdEx := len(m.AccountList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountAuthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountAuthRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountAuthRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountDid) > 0 {
		i -= len(m.AccountDid)
		copy(dAtA[i:], m.AccountDid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccountDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountAuthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountAuthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountAuthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AccountAuth.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAccountAuthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccountAuthRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccountAuthRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAccountAuthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccountAuthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccountAuthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccountAuth) > 0 {
		for iNdEx := len(m.AccountAuth) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountAuth[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllAccountAuthsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllAccountAuthsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllAccountAuthsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllAccountAuthsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllAccountAuthsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllAccountAuthsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountAuths) > 0 {
		for iNdEx := len(m.AccountAuths) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountAuths[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSidDocumentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSidDocumentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSidDocumentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VersionId) > 0 {
		i -= len(m.VersionId)
		copy(dAtA[i:], m.VersionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VersionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSidDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSidDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSidDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SidDocument.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSidDocumentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSidDocumentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSidDocumentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSidDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSidDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSidDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SidDocument) > 0 {
		for iNdEx := len(m.SidDocument) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SidDocument[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSidDocumentVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSidDocumentVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSidDocumentVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DocId) > 0 {
		i -= len(m.DocId)
		copy(dAtA[i:], m.DocId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DocId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSidDocumentVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSidDocumentVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSidDocumentVersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SidDocumentVersion.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSidDocumentVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSidDocumentVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSidDocumentVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSidDocumentVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSidDocumentVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSidDocumentVersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SidDocumentVersion) > 0 {
		for iNdEx := len(m.SidDocumentVersion) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SidDocumentVersion[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPastSeedsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPastSeedsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPastSeedsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPastSeedsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPastSeedsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPastSeedsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PastSeeds.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPastSeedsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPastSeedsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPastSeedsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPastSeedsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPastSeedsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPastSeedsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PastSeeds) > 0 {
		for iNdEx := len(m.PastSeeds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PastSeeds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPaymentAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPaymentAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPaymentAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PaymentAddress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPaymentAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPaymentAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPaymentAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PaymentAddress) > 0 {
		for iNdEx := len(m.PaymentAddress) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentAddress[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetDidBingingProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDidBingingProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DidBingingProof.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDidBingingProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDidBingingProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DidBingingProof) > 0 {
		for _, e := range m.DidBingingProof {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AccountList.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAccountListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAccountListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountList) > 0 {
		for _, e := range m.AccountList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountAuthRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountDid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountAuthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AccountAuth.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAccountAuthRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAccountAuthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountAuth) > 0 {
		for _, e := range m.AccountAuth {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllAccountAuthsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllAccountAuthsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountAuths) > 0 {
		for _, e := range m.AccountAuths {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetSidDocumentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VersionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSidDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SidDocument.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSidDocumentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSidDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SidDocument) > 0 {
		for _, e := range m.SidDocument {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSidDocumentVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DocId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSidDocumentVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SidDocumentVersion.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSidDocumentVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSidDocumentVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SidDocumentVersion) > 0 {
		for _, e := range m.SidDocumentVersion {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPastSeedsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPastSeedsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PastSeeds.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPastSeedsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPastSeedsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PastSeeds) > 0 {
		for _, e := range m.PastSeeds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPaymentAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPaymentAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PaymentAddress.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPaymentAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPaymentAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentAddress) > 0 {
		for _, e := range m.PaymentAddress {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDidBingingProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDidBingingProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDidBingingProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDidBingingProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDidBingingProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDidBingingProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidBingingProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DidBingingProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDidBingingProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDidBingingProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDidBingingProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDidBingingProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDidBingingProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDidBingingProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidBingingProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidBingingProof = append(m.DidBingingProof, DidBingingProof{})
			if err := m.DidBingingProof[len(m.DidBingingProof)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccountList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccountListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccountListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccountListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccountListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccountListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccountListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountList = append(m.AccountList, AccountList{})
			if err := m.AccountList[len(m.AccountList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountAuthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountAuthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountAuthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountAuthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountAuthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountAuthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccountAuth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccountAuthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccountAuthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccountAuthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccountAuthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccountAuthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccountAuthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAuth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAuth = append(m.AccountAuth, AccountAuth{})
			if err := m.AccountAuth[len(m.AccountAuth)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllAccountAuthsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllAccountAuthsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllAccountAuthsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllAccountAuthsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllAccountAuthsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllAccountAuthsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAuths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAuths = append(m.AccountAuths, &AccountAuth{})
			if err := m.AccountAuths[len(m.AccountAuths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSidDocumentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSidDocumentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSidDocumentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSidDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSidDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSidDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SidDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SidDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSidDocumentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSidDocumentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSidDocumentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSidDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSidDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSidDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SidDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SidDocument = append(m.SidDocument, SidDocument{})
			if err := m.SidDocument[len(m.SidDocument)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSidDocumentVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSidDocumentVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSidDocumentVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSidDocumentVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSidDocumentVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSidDocumentVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SidDocumentVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SidDocumentVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSidDocumentVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSidDocumentVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSidDocumentVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSidDocumentVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSidDocumentVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSidDocumentVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SidDocumentVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SidDocumentVersion = append(m.SidDocumentVersion, SidDocumentVersion{})
			if err := m.SidDocumentVersion[len(m.SidDocumentVersion)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPastSeedsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPastSeedsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPastSeedsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPastSeedsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPastSeedsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPastSeedsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PastSeeds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PastSeeds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPastSeedsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPastSeedsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPastSeedsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPastSeedsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPastSeedsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPastSeedsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PastSeeds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PastSeeds = append(m.PastSeeds, PastSeeds{})
			if err := m.PastSeeds[len(m.PastSeeds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPaymentAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPaymentAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPaymentAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPaymentAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPaymentAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPaymentAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAddress = append(m.PaymentAddress, PaymentAddress{})
			if err := m.PaymentAddress[len(m.PaymentAddress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
