// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sao/did/sid_document.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SidDocument struct {
	VersionId  string `protobuf:"bytes,1,opt,name=versionId,proto3" json:"versionId,omitempty"`
	Signing    string `protobuf:"bytes,2,opt,name=signing,proto3" json:"signing,omitempty"`
	Encryption string `protobuf:"bytes,3,opt,name=encryption,proto3" json:"encryption,omitempty"`
}

func (m *SidDocument) Reset()         { *m = SidDocument{} }
func (m *SidDocument) String() string { return proto.CompactTextString(m) }
func (*SidDocument) ProtoMessage()    {}
func (*SidDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_35fb493bce8189f5, []int{0}
}
func (m *SidDocument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SidDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SidDocument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SidDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SidDocument.Merge(m, src)
}
func (m *SidDocument) XXX_Size() int {
	return m.Size()
}
func (m *SidDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_SidDocument.DiscardUnknown(m)
}

var xxx_messageInfo_SidDocument proto.InternalMessageInfo

func (m *SidDocument) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

func (m *SidDocument) GetSigning() string {
	if m != nil {
		return m.Signing
	}
	return ""
}

func (m *SidDocument) GetEncryption() string {
	if m != nil {
		return m.Encryption
	}
	return ""
}

func init() {
	proto.RegisterType((*SidDocument)(nil), "saonetwork.sao.did.SidDocument")
}

func init() { proto.RegisterFile("sao/did/sid_document.proto", fileDescriptor_35fb493bce8189f5) }

var fileDescriptor_35fb493bce8189f5 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0x4e, 0xcc, 0xd7,
	0x4f, 0xc9, 0x4c, 0xd1, 0x2f, 0xce, 0x4c, 0x89, 0x4f, 0xc9, 0x4f, 0x2e, 0xcd, 0x4d, 0xcd, 0x2b,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2a, 0x4e, 0xcc, 0xcf, 0x4b, 0x2d, 0x29, 0xcf,
	0x2f, 0xca, 0xd6, 0x2b, 0x4e, 0xcc, 0xd7, 0x4b, 0xc9, 0x4c, 0x51, 0x4a, 0xe5, 0xe2, 0x0e, 0xce,
	0x4c, 0x71, 0x81, 0x2a, 0x14, 0x92, 0xe1, 0xe2, 0x2c, 0x4b, 0x2d, 0x2a, 0xce, 0xcc, 0xcf, 0xf3,
	0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x42, 0x08, 0x08, 0x49, 0x70, 0xb1, 0x17, 0x67,
	0xa6, 0xe7, 0x65, 0xe6, 0xa5, 0x4b, 0x30, 0x81, 0xe5, 0x60, 0x5c, 0x21, 0x39, 0x2e, 0xae, 0xd4,
	0xbc, 0xe4, 0xa2, 0xca, 0x82, 0x92, 0xcc, 0xfc, 0x3c, 0x09, 0x66, 0xb0, 0x24, 0x92, 0x88, 0x93,
	0xfd, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1,
	0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0xa9, 0xa6, 0x67, 0x96, 0x64,
	0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x07, 0x27, 0xe6, 0xfb, 0x41, 0xdc, 0xa7, 0x0f, 0xf2,
	0x46, 0x05, 0xd8, 0x23, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x2f, 0x18, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xa9, 0x90, 0x5c, 0x06, 0xe0, 0x00, 0x00, 0x00,
}

func (m *SidDocument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SidDocument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SidDocument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Encryption) > 0 {
		i -= len(m.Encryption)
		copy(dAtA[i:], m.Encryption)
		i = encodeVarintSidDocument(dAtA, i, uint64(len(m.Encryption)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signing) > 0 {
		i -= len(m.Signing)
		copy(dAtA[i:], m.Signing)
		i = encodeVarintSidDocument(dAtA, i, uint64(len(m.Signing)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VersionId) > 0 {
		i -= len(m.VersionId)
		copy(dAtA[i:], m.VersionId)
		i = encodeVarintSidDocument(dAtA, i, uint64(len(m.VersionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSidDocument(dAtA []byte, offset int, v uint64) int {
	offset -= sovSidDocument(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SidDocument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VersionId)
	if l > 0 {
		n += 1 + l + sovSidDocument(uint64(l))
	}
	l = len(m.Signing)
	if l > 0 {
		n += 1 + l + sovSidDocument(uint64(l))
	}
	l = len(m.Encryption)
	if l > 0 {
		n += 1 + l + sovSidDocument(uint64(l))
	}
	return n
}

func sovSidDocument(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSidDocument(x uint64) (n int) {
	return sovSidDocument(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SidDocument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSidDocument
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SidDocument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SidDocument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encryption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSidDocument
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSidDocument
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSidDocument
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encryption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSidDocument(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSidDocument
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSidDocument(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSidDocument
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSidDocument
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSidDocument
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSidDocument
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSidDocument
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSidDocument
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSidDocument        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSidDocument          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSidDocument = fmt.Errorf("proto: unexpected end of group")
)
