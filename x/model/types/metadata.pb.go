// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sao/model/metadata.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Metadata struct {
	DataId        string           `protobuf:"bytes,1,opt,name=dataId,proto3" json:"dataId,omitempty"`
	Owner         string           `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Alias         string           `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	GroupId       string           `protobuf:"bytes,4,opt,name=groupId,proto3" json:"groupId,omitempty"`
	OrderId       uint64           `protobuf:"varint,5,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Tags          []string         `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	Cid           string           `protobuf:"bytes,7,opt,name=cid,proto3" json:"cid,omitempty"`
	Commits       []string         `protobuf:"bytes,8,rep,name=commits,proto3" json:"commits,omitempty"`
	ExtendInfo    string           `protobuf:"bytes,9,opt,name=extendInfo,proto3" json:"extendInfo,omitempty"`
	Update        bool             `protobuf:"varint,10,opt,name=update,proto3" json:"update,omitempty"`
	Commit        string           `protobuf:"bytes,11,opt,name=commit,proto3" json:"commit,omitempty"`
	Rule          string           `protobuf:"bytes,12,opt,name=rule,proto3" json:"rule,omitempty"`
	Duration      uint64           `protobuf:"varint,13,opt,name=duration,proto3" json:"duration,omitempty"`
	CreatedAt     uint64           `protobuf:"varint,14,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	ReadonlyDids  []string         `protobuf:"bytes,15,rep,name=readonlyDids,proto3" json:"readonlyDids,omitempty"`
	ReadwriteDids []string         `protobuf:"bytes,16,rep,name=readwriteDids,proto3" json:"readwriteDids,omitempty"`
	Shards        map[int32]string `protobuf:"bytes,17,rep,name=shards,proto3" json:"shards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f86945b10149945, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *Metadata) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Metadata) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *Metadata) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Metadata) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *Metadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Metadata) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *Metadata) GetCommits() []string {
	if m != nil {
		return m.Commits
	}
	return nil
}

func (m *Metadata) GetExtendInfo() string {
	if m != nil {
		return m.ExtendInfo
	}
	return ""
}

func (m *Metadata) GetUpdate() bool {
	if m != nil {
		return m.Update
	}
	return false
}

func (m *Metadata) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *Metadata) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *Metadata) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Metadata) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Metadata) GetReadonlyDids() []string {
	if m != nil {
		return m.ReadonlyDids
	}
	return nil
}

func (m *Metadata) GetReadwriteDids() []string {
	if m != nil {
		return m.ReadwriteDids
	}
	return nil
}

func (m *Metadata) GetShards() map[int32]string {
	if m != nil {
		return m.Shards
	}
	return nil
}

func init() {
	proto.RegisterType((*Metadata)(nil), "saonetwork.sao.model.Metadata")
	proto.RegisterMapType((map[int32]string)(nil), "saonetwork.sao.model.Metadata.ShardsEntry")
}

func init() { proto.RegisterFile("sao/model/metadata.proto", fileDescriptor_0f86945b10149945) }

var fileDescriptor_0f86945b10149945 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0x87, 0xb3, 0xcd, 0x9f, 0x26, 0x9b, 0x16, 0xca, 0xaa, 0x42, 0xa3, 0x0a, 0x59, 0x56, 0x85,
	0x84, 0xc5, 0xc1, 0x91, 0xe0, 0x02, 0xdc, 0x5a, 0xc1, 0x21, 0x07, 0x38, 0xb8, 0x37, 0x6e, 0xdb,
	0xec, 0x90, 0x5a, 0xb5, 0x3d, 0xd1, 0xee, 0x9a, 0x34, 0x6f, 0xc1, 0x6b, 0xf0, 0x26, 0x1c, 0x7b,
	0xe4, 0x88, 0x92, 0x17, 0x41, 0x3b, 0xb6, 0xa1, 0x91, 0x7a, 0xf2, 0x7c, 0xdf, 0xfe, 0x76, 0x35,
	0xeb, 0x59, 0x09, 0x4e, 0xd3, 0xac, 0x24, 0x83, 0xc5, 0xac, 0x44, 0xaf, 0x8d, 0xf6, 0x3a, 0x5d,
	0x59, 0xf2, 0xa4, 0x4e, 0x9d, 0xa6, 0x0a, 0xfd, 0x9a, 0xec, 0x6d, 0xea, 0x34, 0xa5, 0x1c, 0x3a,
	0xff, 0x39, 0x90, 0xe3, 0xcf, 0x6d, 0x50, 0x3d, 0x97, 0xa3, 0xf0, 0x9d, 0x1b, 0x10, 0xb1, 0x48,
	0x26, 0x59, 0x4b, 0xea, 0x54, 0x0e, 0x69, 0x5d, 0xa1, 0x85, 0x03, 0xd6, 0x0d, 0x04, 0xab, 0x8b,
	0x5c, 0x3b, 0xe8, 0x37, 0x96, 0x41, 0x81, 0x3c, 0x5c, 0x5a, 0xaa, 0x57, 0x73, 0x03, 0x03, 0xf6,
	0x1d, 0x86, 0x15, 0xb2, 0x06, 0xed, 0xdc, 0xc0, 0x30, 0x16, 0xc9, 0x20, 0xeb, 0x50, 0x29, 0x39,
	0xf0, 0x7a, 0xe9, 0x60, 0x14, 0xf7, 0x93, 0x49, 0xc6, 0xb5, 0x3a, 0x91, 0xfd, 0x45, 0x6e, 0xe0,
	0x90, 0xcf, 0x08, 0x65, 0xd8, 0xbf, 0xa0, 0xb2, 0xcc, 0xbd, 0x83, 0x31, 0x07, 0x3b, 0x54, 0x91,
	0x94, 0x78, 0xe7, 0xb1, 0x32, 0xf3, 0xea, 0x1b, 0xc1, 0x84, 0xb7, 0x3c, 0x30, 0xe1, 0x5e, 0xf5,
	0xca, 0x68, 0x8f, 0x20, 0x63, 0x91, 0x8c, 0xb3, 0x96, 0x82, 0x6f, 0x8e, 0x80, 0x69, 0x73, 0xdf,
	0x86, 0x42, 0x3f, 0xb6, 0x2e, 0x10, 0x8e, 0xd8, 0x72, 0xad, 0xce, 0xe4, 0xd8, 0xd4, 0x56, 0xfb,
	0x9c, 0x2a, 0x38, 0xe6, 0xf6, 0xff, 0xb1, 0x7a, 0x21, 0x27, 0x0b, 0x8b, 0xda, 0xa3, 0xb9, 0xf0,
	0xf0, 0x84, 0x17, 0xff, 0x0b, 0x75, 0x2e, 0x8f, 0x2c, 0x6a, 0x43, 0x55, 0xb1, 0xf9, 0x98, 0x1b,
	0x07, 0x4f, 0xb9, 0xf9, 0x3d, 0xa7, 0x5e, 0xca, 0xe3, 0xc0, 0x6b, 0x9b, 0x7b, 0xe4, 0xd0, 0x09,
	0x87, 0xf6, 0xa5, 0xba, 0x94, 0x23, 0x77, 0xa3, 0xad, 0x71, 0xf0, 0x2c, 0xee, 0x27, 0xd3, 0x37,
	0xaf, 0xd3, 0xc7, 0x66, 0x9a, 0x76, 0xf3, 0x4c, 0xaf, 0x38, 0xfc, 0xa9, 0xf2, 0x76, 0x93, 0xb5,
	0x3b, 0xcf, 0xde, 0xcb, 0xe9, 0x03, 0x1d, 0x7e, 0xf3, 0x2d, 0x6e, 0x78, 0xde, 0xc3, 0x2c, 0x94,
	0x61, 0xac, 0xdf, 0x75, 0x51, 0x63, 0x37, 0x6c, 0x86, 0x0f, 0x07, 0xef, 0xc4, 0xe5, 0xc5, 0xaf,
	0x6d, 0x24, 0xee, 0xb7, 0x91, 0xf8, 0xb3, 0x8d, 0xc4, 0x8f, 0x5d, 0xd4, 0xbb, 0xdf, 0x45, 0xbd,
	0xdf, 0xbb, 0xa8, 0xf7, 0xf5, 0xd5, 0x32, 0xf7, 0x37, 0xf5, 0x75, 0xba, 0xa0, 0x72, 0x76, 0xa5,
	0xe9, 0x4b, 0xd3, 0xd2, 0x2c, 0xbc, 0xc5, 0xbb, 0xf6, 0x35, 0xfa, 0xcd, 0x0a, 0xdd, 0xf5, 0x88,
	0xdf, 0xe2, 0xdb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x64, 0xbb, 0x6b, 0x73, 0xa7, 0x02, 0x00,
	0x00,
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shards) > 0 {
		for k := range m.Shards {
			v := m.Shards[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMetadata(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintMetadata(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMetadata(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.ReadwriteDids) > 0 {
		for iNdEx := len(m.ReadwriteDids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReadwriteDids[iNdEx])
			copy(dAtA[i:], m.ReadwriteDids[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.ReadwriteDids[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.ReadonlyDids) > 0 {
		for iNdEx := len(m.ReadonlyDids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReadonlyDids[iNdEx])
			copy(dAtA[i:], m.ReadonlyDids[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.ReadonlyDids[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.CreatedAt != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x70
	}
	if m.Duration != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Rule) > 0 {
		i -= len(m.Rule)
		copy(dAtA[i:], m.Rule)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Rule)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Commit) > 0 {
		i -= len(m.Commit)
		copy(dAtA[i:], m.Commit)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Commit)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Update {
		i--
		if m.Update {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.ExtendInfo) > 0 {
		i -= len(m.ExtendInfo)
		copy(dAtA[i:], m.ExtendInfo)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.ExtendInfo)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Commits) > 0 {
		for iNdEx := len(m.Commits) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Commits[iNdEx])
			copy(dAtA[i:], m.Commits[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.Commits[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintMetadata(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.OrderId != 0 {
		i = encodeVarintMetadata(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.OrderId != 0 {
		n += 1 + sovMetadata(uint64(m.OrderId))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if len(m.Commits) > 0 {
		for _, s := range m.Commits {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	l = len(m.ExtendInfo)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Update {
		n += 2
	}
	l = len(m.Commit)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovMetadata(uint64(m.Duration))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovMetadata(uint64(m.CreatedAt))
	}
	if len(m.ReadonlyDids) > 0 {
		for _, s := range m.ReadonlyDids {
			l = len(s)
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if len(m.ReadwriteDids) > 0 {
		for _, s := range m.ReadwriteDids {
			l = len(s)
			n += 2 + l + sovMetadata(uint64(l))
		}
	}
	if len(m.Shards) > 0 {
		for k, v := range m.Shards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMetadata(uint64(k)) + 1 + len(v) + sovMetadata(uint64(len(v)))
			n += mapEntrySize + 2 + sovMetadata(uint64(mapEntrySize))
		}
	}
	return n
}

func sovMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commits = append(m.Commits, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Update = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadonlyDids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadonlyDids = append(m.ReadonlyDids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadwriteDids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadwriteDids = append(m.ReadwriteDids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shards == nil {
				m.Shards = make(map[int32]string)
			}
			var mapkey int32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMetadata
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMetadata
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMetadata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMetadata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Shards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMetadata = fmt.Errorf("proto: unexpected end of group")
)
