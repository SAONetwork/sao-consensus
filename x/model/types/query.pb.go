// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sao/model/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetMetadataRequest struct {
	DataId string `protobuf:"bytes,1,opt,name=dataId,proto3" json:"dataId,omitempty"`
}

func (m *QueryGetMetadataRequest) Reset()         { *m = QueryGetMetadataRequest{} }
func (m *QueryGetMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMetadataRequest) ProtoMessage()    {}
func (*QueryGetMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{2}
}
func (m *QueryGetMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMetadataRequest.Merge(m, src)
}
func (m *QueryGetMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMetadataRequest proto.InternalMessageInfo

func (m *QueryGetMetadataRequest) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

type QueryGetMetadataResponse struct {
	Metadata Metadata              `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata"`
	OrderId  uint64                `protobuf:"varint,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Shards   map[string]*ShardMeta `protobuf:"bytes,3,rep,name=shards,proto3" json:"shards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryGetMetadataResponse) Reset()         { *m = QueryGetMetadataResponse{} }
func (m *QueryGetMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMetadataResponse) ProtoMessage()    {}
func (*QueryGetMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{3}
}
func (m *QueryGetMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMetadataResponse.Merge(m, src)
}
func (m *QueryGetMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMetadataResponse proto.InternalMessageInfo

func (m *QueryGetMetadataResponse) GetMetadata() Metadata {
	if m != nil {
		return m.Metadata
	}
	return Metadata{}
}

func (m *QueryGetMetadataResponse) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *QueryGetMetadataResponse) GetShards() map[string]*ShardMeta {
	if m != nil {
		return m.Shards
	}
	return nil
}

type QueryAllMetadataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMetadataRequest) Reset()         { *m = QueryAllMetadataRequest{} }
func (m *QueryAllMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMetadataRequest) ProtoMessage()    {}
func (*QueryAllMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{4}
}
func (m *QueryAllMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMetadataRequest.Merge(m, src)
}
func (m *QueryAllMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMetadataRequest proto.InternalMessageInfo

func (m *QueryAllMetadataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMetadataResponse struct {
	Metadata   []Metadata          `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMetadataResponse) Reset()         { *m = QueryAllMetadataResponse{} }
func (m *QueryAllMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMetadataResponse) ProtoMessage()    {}
func (*QueryAllMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{5}
}
func (m *QueryAllMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMetadataResponse.Merge(m, src)
}
func (m *QueryAllMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMetadataResponse proto.InternalMessageInfo

func (m *QueryAllMetadataResponse) GetMetadata() []Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *QueryAllMetadataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetModelRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *QueryGetModelRequest) Reset()         { *m = QueryGetModelRequest{} }
func (m *QueryGetModelRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetModelRequest) ProtoMessage()    {}
func (*QueryGetModelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{6}
}
func (m *QueryGetModelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetModelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetModelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetModelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetModelRequest.Merge(m, src)
}
func (m *QueryGetModelRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetModelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetModelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetModelRequest proto.InternalMessageInfo

func (m *QueryGetModelRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type QueryGetModelResponse struct {
	Model Model `protobuf:"bytes,1,opt,name=model,proto3" json:"model"`
}

func (m *QueryGetModelResponse) Reset()         { *m = QueryGetModelResponse{} }
func (m *QueryGetModelResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetModelResponse) ProtoMessage()    {}
func (*QueryGetModelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{7}
}
func (m *QueryGetModelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetModelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetModelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetModelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetModelResponse.Merge(m, src)
}
func (m *QueryGetModelResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetModelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetModelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetModelResponse proto.InternalMessageInfo

func (m *QueryGetModelResponse) GetModel() Model {
	if m != nil {
		return m.Model
	}
	return Model{}
}

type QueryAllModelRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllModelRequest) Reset()         { *m = QueryAllModelRequest{} }
func (m *QueryAllModelRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllModelRequest) ProtoMessage()    {}
func (*QueryAllModelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{8}
}
func (m *QueryAllModelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllModelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllModelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllModelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllModelRequest.Merge(m, src)
}
func (m *QueryAllModelRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllModelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllModelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllModelRequest proto.InternalMessageInfo

func (m *QueryAllModelRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllModelResponse struct {
	Model      []Model             `protobuf:"bytes,1,rep,name=model,proto3" json:"model"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllModelResponse) Reset()         { *m = QueryAllModelResponse{} }
func (m *QueryAllModelResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllModelResponse) ProtoMessage()    {}
func (*QueryAllModelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{9}
}
func (m *QueryAllModelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllModelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllModelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllModelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllModelResponse.Merge(m, src)
}
func (m *QueryAllModelResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllModelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllModelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllModelResponse proto.InternalMessageInfo

func (m *QueryAllModelResponse) GetModel() []Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *QueryAllModelResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetExpiredDataRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryGetExpiredDataRequest) Reset()         { *m = QueryGetExpiredDataRequest{} }
func (m *QueryGetExpiredDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetExpiredDataRequest) ProtoMessage()    {}
func (*QueryGetExpiredDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{10}
}
func (m *QueryGetExpiredDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExpiredDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExpiredDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExpiredDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExpiredDataRequest.Merge(m, src)
}
func (m *QueryGetExpiredDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExpiredDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExpiredDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExpiredDataRequest proto.InternalMessageInfo

func (m *QueryGetExpiredDataRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryGetExpiredDataResponse struct {
	ExpiredData ExpiredData `protobuf:"bytes,1,opt,name=expiredData,proto3" json:"expiredData"`
}

func (m *QueryGetExpiredDataResponse) Reset()         { *m = QueryGetExpiredDataResponse{} }
func (m *QueryGetExpiredDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetExpiredDataResponse) ProtoMessage()    {}
func (*QueryGetExpiredDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{11}
}
func (m *QueryGetExpiredDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExpiredDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExpiredDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExpiredDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExpiredDataResponse.Merge(m, src)
}
func (m *QueryGetExpiredDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExpiredDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExpiredDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExpiredDataResponse proto.InternalMessageInfo

func (m *QueryGetExpiredDataResponse) GetExpiredData() ExpiredData {
	if m != nil {
		return m.ExpiredData
	}
	return ExpiredData{}
}

type QueryAllExpiredDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredDataRequest) Reset()         { *m = QueryAllExpiredDataRequest{} }
func (m *QueryAllExpiredDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpiredDataRequest) ProtoMessage()    {}
func (*QueryAllExpiredDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{12}
}
func (m *QueryAllExpiredDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredDataRequest.Merge(m, src)
}
func (m *QueryAllExpiredDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredDataRequest proto.InternalMessageInfo

func (m *QueryAllExpiredDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllExpiredDataResponse struct {
	ExpiredData []ExpiredData       `protobuf:"bytes,1,rep,name=expiredData,proto3" json:"expiredData"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredDataResponse) Reset()         { *m = QueryAllExpiredDataResponse{} }
func (m *QueryAllExpiredDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpiredDataResponse) ProtoMessage()    {}
func (*QueryAllExpiredDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{13}
}
func (m *QueryAllExpiredDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredDataResponse.Merge(m, src)
}
func (m *QueryAllExpiredDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredDataResponse proto.InternalMessageInfo

func (m *QueryAllExpiredDataResponse) GetExpiredData() []ExpiredData {
	if m != nil {
		return m.ExpiredData
	}
	return nil
}

func (m *QueryAllExpiredDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetOrderFinishRequest struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *QueryGetOrderFinishRequest) Reset()         { *m = QueryGetOrderFinishRequest{} }
func (m *QueryGetOrderFinishRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderFinishRequest) ProtoMessage()    {}
func (*QueryGetOrderFinishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{14}
}
func (m *QueryGetOrderFinishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderFinishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderFinishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderFinishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderFinishRequest.Merge(m, src)
}
func (m *QueryGetOrderFinishRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderFinishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderFinishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderFinishRequest proto.InternalMessageInfo

func (m *QueryGetOrderFinishRequest) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type QueryGetOrderFinishResponse struct {
	OrderFinish OrderFinish `protobuf:"bytes,1,opt,name=orderFinish,proto3" json:"orderFinish"`
}

func (m *QueryGetOrderFinishResponse) Reset()         { *m = QueryGetOrderFinishResponse{} }
func (m *QueryGetOrderFinishResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderFinishResponse) ProtoMessage()    {}
func (*QueryGetOrderFinishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{15}
}
func (m *QueryGetOrderFinishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderFinishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderFinishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderFinishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderFinishResponse.Merge(m, src)
}
func (m *QueryGetOrderFinishResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderFinishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderFinishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderFinishResponse proto.InternalMessageInfo

func (m *QueryGetOrderFinishResponse) GetOrderFinish() OrderFinish {
	if m != nil {
		return m.OrderFinish
	}
	return OrderFinish{}
}

type QueryAllOrderFinishRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrderFinishRequest) Reset()         { *m = QueryAllOrderFinishRequest{} }
func (m *QueryAllOrderFinishRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrderFinishRequest) ProtoMessage()    {}
func (*QueryAllOrderFinishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{16}
}
func (m *QueryAllOrderFinishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrderFinishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrderFinishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrderFinishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrderFinishRequest.Merge(m, src)
}
func (m *QueryAllOrderFinishRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrderFinishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrderFinishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrderFinishRequest proto.InternalMessageInfo

func (m *QueryAllOrderFinishRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOrderFinishResponse struct {
	OrderFinish []OrderFinish       `protobuf:"bytes,1,rep,name=orderFinish,proto3" json:"orderFinish"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrderFinishResponse) Reset()         { *m = QueryAllOrderFinishResponse{} }
func (m *QueryAllOrderFinishResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrderFinishResponse) ProtoMessage()    {}
func (*QueryAllOrderFinishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{17}
}
func (m *QueryAllOrderFinishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrderFinishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrderFinishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrderFinishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrderFinishResponse.Merge(m, src)
}
func (m *QueryAllOrderFinishResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrderFinishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrderFinishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrderFinishResponse proto.InternalMessageInfo

func (m *QueryAllOrderFinishResponse) GetOrderFinish() []OrderFinish {
	if m != nil {
		return m.OrderFinish
	}
	return nil
}

func (m *QueryAllOrderFinishResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetExpiredOrderRequest struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryGetExpiredOrderRequest) Reset()         { *m = QueryGetExpiredOrderRequest{} }
func (m *QueryGetExpiredOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetExpiredOrderRequest) ProtoMessage()    {}
func (*QueryGetExpiredOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{18}
}
func (m *QueryGetExpiredOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExpiredOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExpiredOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExpiredOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExpiredOrderRequest.Merge(m, src)
}
func (m *QueryGetExpiredOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExpiredOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExpiredOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExpiredOrderRequest proto.InternalMessageInfo

func (m *QueryGetExpiredOrderRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryGetExpiredOrderResponse struct {
	ExpiredOrder ExpiredOrder `protobuf:"bytes,1,opt,name=expiredOrder,proto3" json:"expiredOrder"`
}

func (m *QueryGetExpiredOrderResponse) Reset()         { *m = QueryGetExpiredOrderResponse{} }
func (m *QueryGetExpiredOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetExpiredOrderResponse) ProtoMessage()    {}
func (*QueryGetExpiredOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{19}
}
func (m *QueryGetExpiredOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetExpiredOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetExpiredOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetExpiredOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetExpiredOrderResponse.Merge(m, src)
}
func (m *QueryGetExpiredOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetExpiredOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetExpiredOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetExpiredOrderResponse proto.InternalMessageInfo

func (m *QueryGetExpiredOrderResponse) GetExpiredOrder() ExpiredOrder {
	if m != nil {
		return m.ExpiredOrder
	}
	return ExpiredOrder{}
}

type QueryAllExpiredOrderRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredOrderRequest) Reset()         { *m = QueryAllExpiredOrderRequest{} }
func (m *QueryAllExpiredOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpiredOrderRequest) ProtoMessage()    {}
func (*QueryAllExpiredOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{20}
}
func (m *QueryAllExpiredOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredOrderRequest.Merge(m, src)
}
func (m *QueryAllExpiredOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredOrderRequest proto.InternalMessageInfo

func (m *QueryAllExpiredOrderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllExpiredOrderResponse struct {
	ExpiredOrder []ExpiredOrder      `protobuf:"bytes,1,rep,name=expiredOrder,proto3" json:"expiredOrder"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllExpiredOrderResponse) Reset()         { *m = QueryAllExpiredOrderResponse{} }
func (m *QueryAllExpiredOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllExpiredOrderResponse) ProtoMessage()    {}
func (*QueryAllExpiredOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_096465c9c0ab629f, []int{21}
}
func (m *QueryAllExpiredOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllExpiredOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllExpiredOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllExpiredOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllExpiredOrderResponse.Merge(m, src)
}
func (m *QueryAllExpiredOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllExpiredOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllExpiredOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllExpiredOrderResponse proto.InternalMessageInfo

func (m *QueryAllExpiredOrderResponse) GetExpiredOrder() []ExpiredOrder {
	if m != nil {
		return m.ExpiredOrder
	}
	return nil
}

func (m *QueryAllExpiredOrderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "saonetwork.sao.model.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "saonetwork.sao.model.QueryParamsResponse")
	proto.RegisterType((*QueryGetMetadataRequest)(nil), "saonetwork.sao.model.QueryGetMetadataRequest")
	proto.RegisterType((*QueryGetMetadataResponse)(nil), "saonetwork.sao.model.QueryGetMetadataResponse")
	proto.RegisterMapType((map[string]*ShardMeta)(nil), "saonetwork.sao.model.QueryGetMetadataResponse.ShardsEntry")
	proto.RegisterType((*QueryAllMetadataRequest)(nil), "saonetwork.sao.model.QueryAllMetadataRequest")
	proto.RegisterType((*QueryAllMetadataResponse)(nil), "saonetwork.sao.model.QueryAllMetadataResponse")
	proto.RegisterType((*QueryGetModelRequest)(nil), "saonetwork.sao.model.QueryGetModelRequest")
	proto.RegisterType((*QueryGetModelResponse)(nil), "saonetwork.sao.model.QueryGetModelResponse")
	proto.RegisterType((*QueryAllModelRequest)(nil), "saonetwork.sao.model.QueryAllModelRequest")
	proto.RegisterType((*QueryAllModelResponse)(nil), "saonetwork.sao.model.QueryAllModelResponse")
	proto.RegisterType((*QueryGetExpiredDataRequest)(nil), "saonetwork.sao.model.QueryGetExpiredDataRequest")
	proto.RegisterType((*QueryGetExpiredDataResponse)(nil), "saonetwork.sao.model.QueryGetExpiredDataResponse")
	proto.RegisterType((*QueryAllExpiredDataRequest)(nil), "saonetwork.sao.model.QueryAllExpiredDataRequest")
	proto.RegisterType((*QueryAllExpiredDataResponse)(nil), "saonetwork.sao.model.QueryAllExpiredDataResponse")
	proto.RegisterType((*QueryGetOrderFinishRequest)(nil), "saonetwork.sao.model.QueryGetOrderFinishRequest")
	proto.RegisterType((*QueryGetOrderFinishResponse)(nil), "saonetwork.sao.model.QueryGetOrderFinishResponse")
	proto.RegisterType((*QueryAllOrderFinishRequest)(nil), "saonetwork.sao.model.QueryAllOrderFinishRequest")
	proto.RegisterType((*QueryAllOrderFinishResponse)(nil), "saonetwork.sao.model.QueryAllOrderFinishResponse")
	proto.RegisterType((*QueryGetExpiredOrderRequest)(nil), "saonetwork.sao.model.QueryGetExpiredOrderRequest")
	proto.RegisterType((*QueryGetExpiredOrderResponse)(nil), "saonetwork.sao.model.QueryGetExpiredOrderResponse")
	proto.RegisterType((*QueryAllExpiredOrderRequest)(nil), "saonetwork.sao.model.QueryAllExpiredOrderRequest")
	proto.RegisterType((*QueryAllExpiredOrderResponse)(nil), "saonetwork.sao.model.QueryAllExpiredOrderResponse")
}

func init() { proto.RegisterFile("sao/model/query.proto", fileDescriptor_096465c9c0ab629f) }

var fileDescriptor_096465c9c0ab629f = []byte{
	// 1120 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x33, 0x71, 0x62, 0xda, 0x71, 0xf9, 0xa1, 0x21, 0x2d, 0x96, 0xe3, 0xba, 0xe9, 0xa4,
	0x34, 0x4e, 0x42, 0x77, 0x13, 0xb7, 0x05, 0x94, 0x13, 0xa9, 0x68, 0xab, 0x48, 0xfc, 0x48, 0xb7,
	0xb7, 0x1e, 0x88, 0x26, 0xf5, 0x60, 0xaf, 0xb2, 0xf6, 0xb8, 0xbb, 0x9b, 0x52, 0x2b, 0xca, 0x05,
	0x2e, 0x48, 0x5c, 0x90, 0xe0, 0x02, 0x37, 0x0e, 0x05, 0x09, 0x4e, 0x1c, 0xf8, 0x1f, 0x7a, 0x23,
	0x12, 0x17, 0x4e, 0x08, 0x25, 0xfc, 0x21, 0x68, 0x67, 0xde, 0x66, 0x67, 0xbd, 0xeb, 0xf5, 0x3a,
	0x72, 0x2f, 0x56, 0x76, 0x76, 0xde, 0xbc, 0xcf, 0xf7, 0xfb, 0x66, 0x77, 0xde, 0x06, 0x5f, 0xf4,
	0x98, 0x30, 0x3b, 0xa2, 0xc9, 0x1d, 0xf3, 0xc9, 0x3e, 0x77, 0xfb, 0x46, 0xcf, 0x15, 0xbe, 0x20,
	0x73, 0x1e, 0x13, 0x5d, 0xee, 0x7f, 0x21, 0xdc, 0x3d, 0xc3, 0x63, 0xc2, 0x90, 0x33, 0x2a, 0x73,
	0x2d, 0xd1, 0x12, 0x72, 0x82, 0x19, 0xfc, 0xa5, 0xe6, 0x56, 0xaa, 0x2d, 0x21, 0x5a, 0x0e, 0x37,
	0x59, 0xcf, 0x36, 0x59, 0xb7, 0x2b, 0x7c, 0xe6, 0xdb, 0xa2, 0xeb, 0xc1, 0xdd, 0x95, 0xc7, 0xc2,
	0xeb, 0x08, 0xcf, 0xdc, 0x65, 0x1e, 0x57, 0x29, 0xcc, 0xa7, 0xeb, 0xbb, 0xdc, 0x67, 0xeb, 0x66,
	0x8f, 0xb5, 0xec, 0xae, 0x9c, 0x0c, 0x73, 0x2f, 0x45, 0x30, 0x3d, 0xe6, 0xb2, 0x4e, 0xb8, 0x46,
	0x39, 0x1a, 0xef, 0x70, 0x9f, 0x35, 0x99, 0xcf, 0xe0, 0x8e, 0x86, 0x2f, 0x7f, 0x61, 0xb8, 0x12,
	0x0d, 0x7b, 0x6d, 0xe6, 0x36, 0x77, 0x82, 0xb0, 0x10, 0x37, 0xba, 0xc7, 0x9f, 0xf5, 0x6c, 0x97,
	0x37, 0x77, 0xb4, 0x05, 0xb5, 0xbb, 0xc2, 0x6d, 0x72, 0x77, 0xe7, 0x73, 0xbb, 0x6b, 0x7b, 0x6d,
	0xb8, 0x7b, 0x39, 0x19, 0x2b, 0x67, 0xa9, 0xdb, 0x74, 0x0e, 0x93, 0x07, 0x81, 0xc2, 0x6d, 0x09,
	0x6f, 0xf1, 0x27, 0xfb, 0xdc, 0xf3, 0xe9, 0x03, 0xfc, 0x66, 0x6c, 0xd4, 0xeb, 0x89, 0xae, 0xc7,
	0xc9, 0x06, 0x2e, 0x2a, 0x91, 0x65, 0xb4, 0x80, 0xea, 0xa5, 0x46, 0xd5, 0x48, 0xf3, 0xdc, 0x50,
	0x51, 0x77, 0x66, 0x5e, 0xfc, 0x73, 0x65, 0xca, 0x82, 0x08, 0xba, 0x8e, 0xdf, 0x92, 0x4b, 0xde,
	0xe7, 0xfe, 0xc7, 0x60, 0x08, 0x64, 0x23, 0x97, 0x70, 0x31, 0xb8, 0xdc, 0x6a, 0xca, 0x65, 0xcf,
	0x5b, 0x70, 0x45, 0x7f, 0x9e, 0xc6, 0xe5, 0x64, 0x0c, 0xb0, 0x7c, 0x80, 0xcf, 0x85, 0xc6, 0x02,
	0x4d, 0x2d, 0x9d, 0x26, 0x8c, 0x04, 0x9e, 0xd3, 0x28, 0x52, 0xc6, 0xaf, 0x48, 0x27, 0xb6, 0x9a,
	0xe5, 0xe9, 0x05, 0x54, 0x9f, 0xb1, 0xc2, 0x4b, 0x62, 0xe1, 0xa2, 0xac, 0x81, 0x57, 0x2e, 0x2c,
	0x14, 0xea, 0xa5, 0xc6, 0x46, 0xfa, 0xca, 0xc3, 0xd8, 0x8c, 0x87, 0x32, 0xf8, 0x6e, 0xd7, 0x77,
	0xfb, 0x16, 0xac, 0x54, 0x79, 0x84, 0x4b, 0xda, 0x30, 0x79, 0x03, 0x17, 0xf6, 0x78, 0x1f, 0x04,
	0x07, 0x7f, 0x92, 0xdb, 0x78, 0xf6, 0x29, 0x73, 0xf6, 0xb9, 0x84, 0x29, 0x35, 0xae, 0xa4, 0xe7,
	0x94, 0x6b, 0x04, 0x09, 0x2d, 0x35, 0x7b, 0x63, 0xfa, 0x7d, 0x44, 0x19, 0x78, 0xbb, 0xe9, 0x38,
	0x83, 0xde, 0xde, 0xc3, 0x38, 0xda, 0xb3, 0x60, 0xd4, 0x75, 0x43, 0x6d, 0x70, 0x23, 0xd8, 0xe0,
	0x86, 0x7a, 0x86, 0x60, 0x83, 0x1b, 0xdb, 0xac, 0xc5, 0x21, 0xd6, 0xd2, 0x22, 0xe9, 0x73, 0x04,
	0xb5, 0x88, 0xe5, 0x48, 0xad, 0x45, 0xe1, 0x0c, 0xb5, 0xb8, 0x1f, 0xc3, 0x54, 0x0e, 0x2c, 0x8d,
	0xc4, 0x54, 0xe9, 0x63, 0x9c, 0x75, 0x3c, 0x77, 0x5a, 0x96, 0x20, 0x65, 0xe8, 0x43, 0xc2, 0x6f,
	0xba, 0x8d, 0x2f, 0x0e, 0xcc, 0x04, 0x35, 0xef, 0xe1, 0x59, 0x49, 0x0b, 0x6e, 0xcd, 0x0f, 0x91,
	0x12, 0xfc, 0x82, 0x0e, 0x35, 0x9f, 0x7e, 0x06, 0xb9, 0x03, 0x8b, 0xf4, 0xdc, 0x93, 0xaa, 0xc1,
	0x0f, 0x08, 0x90, 0xa3, 0x04, 0x49, 0xe4, 0xc2, 0x38, 0xc8, 0x93, 0xf3, 0xfd, 0x16, 0xae, 0x84,
	0x6e, 0xde, 0x55, 0xaf, 0x99, 0x0f, 0xe3, 0x4f, 0x78, 0x9b, 0xdb, 0xad, 0xb6, 0x2f, 0xd5, 0xcf,
	0x58, 0x70, 0x45, 0xdb, 0x78, 0x3e, 0x35, 0x0a, 0x64, 0x6d, 0xe1, 0x12, 0x8f, 0x86, 0xc1, 0xb9,
	0xab, 0xe9, 0xe2, 0xb4, 0x78, 0x90, 0xa8, 0xc7, 0xd2, 0x26, 0xf0, 0x6d, 0x3a, 0x4e, 0x0a, 0xdf,
	0xa4, 0x2a, 0xf4, 0x3b, 0x02, 0x41, 0x83, 0x69, 0x86, 0x09, 0x2a, 0x9c, 0x55, 0xd0, 0xe4, 0x2a,
	0xb7, 0x11, 0x55, 0xee, 0xd3, 0xe0, 0xfd, 0x77, 0x4f, 0x9e, 0x1e, 0xa1, 0x33, 0x55, 0x7c, 0xde,
	0xb7, 0x3b, 0xdc, 0xf3, 0x59, 0xa7, 0x07, 0xc5, 0x8b, 0x06, 0xf4, 0xfa, 0xc5, 0x62, 0x23, 0xb9,
	0x22, 0x1a, 0xce, 0xae, 0x9f, 0x16, 0x1f, 0xca, 0xd5, 0x62, 0xf5, 0xfa, 0xa5, 0x50, 0xbe, 0x8c,
	0xfa, 0xe5, 0x12, 0x54, 0x38, 0xab, 0xa0, 0xc9, 0xd5, 0xef, 0x76, 0xe2, 0x19, 0x92, 0x99, 0x47,
	0x3d, 0x7a, 0x0e, 0xae, 0xa6, 0x87, 0x81, 0xd4, 0x8f, 0xf0, 0x05, 0xae, 0x8d, 0x83, 0xa9, 0x34,
	0x73, 0xaf, 0xca, 0x99, 0x20, 0x36, 0x16, 0x4d, 0x79, 0xe2, 0xb9, 0x88, 0x41, 0x4e, 0xaa, 0x7e,
	0x7f, 0x20, 0x50, 0x95, 0xc8, 0x33, 0x54, 0x55, 0xe1, 0xec, 0xaa, 0x26, 0x56, 0xc3, 0xc6, 0x9f,
	0xaf, 0xe2, 0x59, 0xc9, 0x4d, 0xbe, 0x42, 0xb8, 0xa8, 0xfa, 0x27, 0x52, 0xcf, 0xe8, 0x3a, 0x62,
	0xed, 0x5a, 0x65, 0x39, 0xc7, 0x4c, 0x95, 0x95, 0x5e, 0xfb, 0xf2, 0xaf, 0xff, 0xbe, 0x9b, 0xae,
	0x91, 0xaa, 0xf9, 0x90, 0x89, 0x4f, 0x54, 0x88, 0x39, 0xd8, 0xc3, 0x92, 0x1f, 0x11, 0x3e, 0x17,
	0x9e, 0xd5, 0xe4, 0x46, 0xde, 0xee, 0x47, 0xc1, 0x18, 0xe3, 0x35, 0x4b, 0xd4, 0x94, 0x44, 0xcb,
	0x64, 0x29, 0x9d, 0x28, 0x6c, 0x11, 0xcc, 0x03, 0xd5, 0x15, 0x1e, 0x92, 0xef, 0x11, 0x2e, 0x85,
	0xab, 0x6c, 0x3a, 0x4e, 0x26, 0x5f, 0xb2, 0x23, 0xca, 0xe4, 0x4b, 0x69, 0x6e, 0xe8, 0x75, 0xc9,
	0xb7, 0x40, 0x6a, 0xd9, 0x7c, 0xe4, 0x1b, 0x84, 0x67, 0xe5, 0x09, 0x4b, 0x56, 0x46, 0x38, 0xa0,
	0xf5, 0x06, 0x95, 0xd5, 0x5c, 0x73, 0x01, 0x65, 0x59, 0xa2, 0x2c, 0x92, 0xab, 0x43, 0x50, 0xe4,
	0xef, 0xc1, 0x1e, 0xef, 0x1f, 0x92, 0xaf, 0x83, 0x0a, 0x06, 0xd7, 0x81, 0x43, 0x2b, 0x23, 0x24,
	0xe7, 0x05, 0x1a, 0xec, 0x3b, 0xe8, 0xa2, 0x04, 0xba, 0x4c, 0xe6, 0x33, 0x80, 0xc8, 0x2f, 0x08,
	0x97, 0xb4, 0xc3, 0x8c, 0xac, 0x65, 0x4b, 0x4e, 0x1e, 0xcf, 0x95, 0xf5, 0x31, 0x22, 0x80, 0xec,
	0xa6, 0x24, 0xbb, 0x41, 0x56, 0xd3, 0xc9, 0xf4, 0xcf, 0x28, 0xf3, 0x40, 0xbd, 0x12, 0x0f, 0xc9,
	0x4f, 0x08, 0xbf, 0xa6, 0x2d, 0x16, 0x58, 0xb7, 0x96, 0x6d, 0xc7, 0x98, 0xb0, 0xe9, 0x6d, 0x01,
	0x5d, 0x91, 0xb0, 0xd7, 0x08, 0x1d, 0x0d, 0x4b, 0x7e, 0x45, 0xb8, 0xa4, 0x1d, 0x2d, 0xa3, 0xdc,
	0x4c, 0x1e, 0x96, 0xa3, 0xdc, 0x4c, 0x39, 0xf7, 0xe8, 0xbb, 0x12, 0x70, 0x8d, 0x18, 0xe9, 0x80,
	0xfa, 0x67, 0xa7, 0x79, 0x70, 0xda, 0x1e, 0x28, 0x43, 0xb5, 0xf5, 0x72, 0x18, 0x3a, 0x26, 0x6f,
	0xfa, 0x39, 0x3d, 0xca, 0x50, 0x9d, 0x97, 0xfc, 0x86, 0xf0, 0x05, 0xfd, 0x4d, 0x4f, 0xf2, 0xed,
	0x36, 0xfd, 0xfc, 0xaa, 0x34, 0xc6, 0x09, 0x01, 0xc6, 0x5b, 0x92, 0xd1, 0x20, 0xef, 0x0c, 0x32,
	0x4a, 0xba, 0xf8, 0xc7, 0x7a, 0xb4, 0x45, 0x9f, 0x23, 0xfc, 0xba, 0xbe, 0x5c, 0x60, 0x69, 0xbe,
	0x1d, 0x97, 0x1b, 0x78, 0xc8, 0xd9, 0x49, 0x57, 0x25, 0xf0, 0xdb, 0x64, 0x31, 0x07, 0xf0, 0x9d,
	0xcd, 0x17, 0xc7, 0x35, 0x74, 0x74, 0x5c, 0x43, 0xff, 0x1e, 0xd7, 0xd0, 0xb7, 0x27, 0xb5, 0xa9,
	0xa3, 0x93, 0xda, 0xd4, 0xdf, 0x27, 0xb5, 0xa9, 0x47, 0x4b, 0x2d, 0xdb, 0x6f, 0xef, 0xef, 0x1a,
	0x8f, 0x45, 0x67, 0x70, 0xa1, 0x67, 0x50, 0x1f, 0xbf, 0xdf, 0xe3, 0xde, 0x6e, 0x51, 0xfe, 0x87,
	0xe2, 0xe6, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xa8, 0xdb, 0xd4, 0xf0, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Metadata by index.
	Metadata(ctx context.Context, in *QueryGetMetadataRequest, opts ...grpc.CallOption) (*QueryGetMetadataResponse, error)
	// Queries a list of Metadata items.
	MetadataAll(ctx context.Context, in *QueryAllMetadataRequest, opts ...grpc.CallOption) (*QueryAllMetadataResponse, error)
	// Queries a Model by index.
	Model(ctx context.Context, in *QueryGetModelRequest, opts ...grpc.CallOption) (*QueryGetModelResponse, error)
	// Queries a list of Model items.
	ModelAll(ctx context.Context, in *QueryAllModelRequest, opts ...grpc.CallOption) (*QueryAllModelResponse, error)
	// Queries a ExpiredData by index.
	ExpiredData(ctx context.Context, in *QueryGetExpiredDataRequest, opts ...grpc.CallOption) (*QueryGetExpiredDataResponse, error)
	// Queries a list of ExpiredData items.
	ExpiredDataAll(ctx context.Context, in *QueryAllExpiredDataRequest, opts ...grpc.CallOption) (*QueryAllExpiredDataResponse, error)
	// Queries a OrderFinish by index.
	OrderFinish(ctx context.Context, in *QueryGetOrderFinishRequest, opts ...grpc.CallOption) (*QueryGetOrderFinishResponse, error)
	// Queries a list of OrderFinish items.
	OrderFinishAll(ctx context.Context, in *QueryAllOrderFinishRequest, opts ...grpc.CallOption) (*QueryAllOrderFinishResponse, error)
	// Queries a ExpiredOrder by index.
	ExpiredOrder(ctx context.Context, in *QueryGetExpiredOrderRequest, opts ...grpc.CallOption) (*QueryGetExpiredOrderResponse, error)
	// Queries a list of ExpiredOrder items.
	ExpiredOrderAll(ctx context.Context, in *QueryAllExpiredOrderRequest, opts ...grpc.CallOption) (*QueryAllExpiredOrderResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.model.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Metadata(ctx context.Context, in *QueryGetMetadataRequest, opts ...grpc.CallOption) (*QueryGetMetadataResponse, error) {
	out := new(QueryGetMetadataResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.model.Query/Metadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MetadataAll(ctx context.Context, in *QueryAllMetadataRequest, opts ...grpc.CallOption) (*QueryAllMetadataResponse, error) {
	out := new(QueryAllMetadataResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.model.Query/MetadataAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Model(ctx context.Context, in *QueryGetModelRequest, opts ...grpc.CallOption) (*QueryGetModelResponse, error) {
	out := new(QueryGetModelResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.model.Query/Model", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ModelAll(ctx context.Context, in *QueryAllModelRequest, opts ...grpc.CallOption) (*QueryAllModelResponse, error) {
	out := new(QueryAllModelResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.model.Query/ModelAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredData(ctx context.Context, in *QueryGetExpiredDataRequest, opts ...grpc.CallOption) (*QueryGetExpiredDataResponse, error) {
	out := new(QueryGetExpiredDataResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.model.Query/ExpiredData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredDataAll(ctx context.Context, in *QueryAllExpiredDataRequest, opts ...grpc.CallOption) (*QueryAllExpiredDataResponse, error) {
	out := new(QueryAllExpiredDataResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.model.Query/ExpiredDataAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderFinish(ctx context.Context, in *QueryGetOrderFinishRequest, opts ...grpc.CallOption) (*QueryGetOrderFinishResponse, error) {
	out := new(QueryGetOrderFinishResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.model.Query/OrderFinish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderFinishAll(ctx context.Context, in *QueryAllOrderFinishRequest, opts ...grpc.CallOption) (*QueryAllOrderFinishResponse, error) {
	out := new(QueryAllOrderFinishResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.model.Query/OrderFinishAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredOrder(ctx context.Context, in *QueryGetExpiredOrderRequest, opts ...grpc.CallOption) (*QueryGetExpiredOrderResponse, error) {
	out := new(QueryGetExpiredOrderResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.model.Query/ExpiredOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiredOrderAll(ctx context.Context, in *QueryAllExpiredOrderRequest, opts ...grpc.CallOption) (*QueryAllExpiredOrderResponse, error) {
	out := new(QueryAllExpiredOrderResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.model.Query/ExpiredOrderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Metadata by index.
	Metadata(context.Context, *QueryGetMetadataRequest) (*QueryGetMetadataResponse, error)
	// Queries a list of Metadata items.
	MetadataAll(context.Context, *QueryAllMetadataRequest) (*QueryAllMetadataResponse, error)
	// Queries a Model by index.
	Model(context.Context, *QueryGetModelRequest) (*QueryGetModelResponse, error)
	// Queries a list of Model items.
	ModelAll(context.Context, *QueryAllModelRequest) (*QueryAllModelResponse, error)
	// Queries a ExpiredData by index.
	ExpiredData(context.Context, *QueryGetExpiredDataRequest) (*QueryGetExpiredDataResponse, error)
	// Queries a list of ExpiredData items.
	ExpiredDataAll(context.Context, *QueryAllExpiredDataRequest) (*QueryAllExpiredDataResponse, error)
	// Queries a OrderFinish by index.
	OrderFinish(context.Context, *QueryGetOrderFinishRequest) (*QueryGetOrderFinishResponse, error)
	// Queries a list of OrderFinish items.
	OrderFinishAll(context.Context, *QueryAllOrderFinishRequest) (*QueryAllOrderFinishResponse, error)
	// Queries a ExpiredOrder by index.
	ExpiredOrder(context.Context, *QueryGetExpiredOrderRequest) (*QueryGetExpiredOrderResponse, error)
	// Queries a list of ExpiredOrder items.
	ExpiredOrderAll(context.Context, *QueryAllExpiredOrderRequest) (*QueryAllExpiredOrderResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Metadata(ctx context.Context, req *QueryGetMetadataRequest) (*QueryGetMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metadata not implemented")
}
func (*UnimplementedQueryServer) MetadataAll(ctx context.Context, req *QueryAllMetadataRequest) (*QueryAllMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetadataAll not implemented")
}
func (*UnimplementedQueryServer) Model(ctx context.Context, req *QueryGetModelRequest) (*QueryGetModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Model not implemented")
}
func (*UnimplementedQueryServer) ModelAll(ctx context.Context, req *QueryAllModelRequest) (*QueryAllModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelAll not implemented")
}
func (*UnimplementedQueryServer) ExpiredData(ctx context.Context, req *QueryGetExpiredDataRequest) (*QueryGetExpiredDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredData not implemented")
}
func (*UnimplementedQueryServer) ExpiredDataAll(ctx context.Context, req *QueryAllExpiredDataRequest) (*QueryAllExpiredDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredDataAll not implemented")
}
func (*UnimplementedQueryServer) OrderFinish(ctx context.Context, req *QueryGetOrderFinishRequest) (*QueryGetOrderFinishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderFinish not implemented")
}
func (*UnimplementedQueryServer) OrderFinishAll(ctx context.Context, req *QueryAllOrderFinishRequest) (*QueryAllOrderFinishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderFinishAll not implemented")
}
func (*UnimplementedQueryServer) ExpiredOrder(ctx context.Context, req *QueryGetExpiredOrderRequest) (*QueryGetExpiredOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredOrder not implemented")
}
func (*UnimplementedQueryServer) ExpiredOrderAll(ctx context.Context, req *QueryAllExpiredOrderRequest) (*QueryAllExpiredOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiredOrderAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.model.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.model.Query/Metadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Metadata(ctx, req.(*QueryGetMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MetadataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MetadataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.model.Query/MetadataAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MetadataAll(ctx, req.(*QueryAllMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Model_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Model(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.model.Query/Model",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Model(ctx, req.(*QueryGetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ModelAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModelAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.model.Query/ModelAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModelAll(ctx, req.(*QueryAllModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExpiredDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.model.Query/ExpiredData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredData(ctx, req.(*QueryGetExpiredDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredDataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExpiredDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredDataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.model.Query/ExpiredDataAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredDataAll(ctx, req.(*QueryAllExpiredDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrderFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.model.Query/OrderFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderFinish(ctx, req.(*QueryGetOrderFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderFinishAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOrderFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderFinishAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.model.Query/OrderFinishAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderFinishAll(ctx, req.(*QueryAllOrderFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetExpiredOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.model.Query/ExpiredOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredOrder(ctx, req.(*QueryGetExpiredOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiredOrderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllExpiredOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiredOrderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.model.Query/ExpiredOrderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiredOrderAll(ctx, req.(*QueryAllExpiredOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "saonetwork.sao.model.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Metadata",
			Handler:    _Query_Metadata_Handler,
		},
		{
			MethodName: "MetadataAll",
			Handler:    _Query_MetadataAll_Handler,
		},
		{
			MethodName: "Model",
			Handler:    _Query_Model_Handler,
		},
		{
			MethodName: "ModelAll",
			Handler:    _Query_ModelAll_Handler,
		},
		{
			MethodName: "ExpiredData",
			Handler:    _Query_ExpiredData_Handler,
		},
		{
			MethodName: "ExpiredDataAll",
			Handler:    _Query_ExpiredDataAll_Handler,
		},
		{
			MethodName: "OrderFinish",
			Handler:    _Query_OrderFinish_Handler,
		},
		{
			MethodName: "OrderFinishAll",
			Handler:    _Query_OrderFinishAll_Handler,
		},
		{
			MethodName: "ExpiredOrder",
			Handler:    _Query_ExpiredOrder_Handler,
		},
		{
			MethodName: "ExpiredOrderAll",
			Handler:    _Query_ExpiredOrderAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sao/model/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataId) > 0 {
		i -= len(m.DataId)
		copy(dAtA[i:], m.DataId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DataId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shards) > 0 {
		for k := range m.Shards {
			v := m.Shards[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.OrderId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetModelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetModelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetModelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetModelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetModelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetModelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Model.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllModelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllModelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllModelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllModelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllModelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllModelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Model) > 0 {
		for iNdEx := len(m.Model) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Model[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExpiredDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExpiredDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExpiredDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExpiredDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExpiredDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExpiredDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExpiredData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExpiredData) > 0 {
		for iNdEx := len(m.ExpiredData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpiredData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderFinishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderFinishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderFinishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderFinishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderFinishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderFinishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OrderFinish.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOrderFinishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrderFinishRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrderFinishRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOrderFinishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrderFinishResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrderFinishResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderFinish) > 0 {
		for iNdEx := len(m.OrderFinish) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderFinish[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExpiredOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExpiredOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExpiredOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetExpiredOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetExpiredOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetExpiredOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExpiredOrder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllExpiredOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllExpiredOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllExpiredOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExpiredOrder) > 0 {
		for iNdEx := len(m.ExpiredOrder) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpiredOrder[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.OrderId != 0 {
		n += 1 + sovQuery(uint64(m.OrderId))
	}
	if len(m.Shards) > 0 {
		for k, v := range m.Shards {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryAllMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetModelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetModelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Model.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllModelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllModelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Model) > 0 {
		for _, e := range m.Model {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExpiredDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryGetExpiredDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExpiredData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllExpiredDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExpiredDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExpiredData) > 0 {
		for _, e := range m.ExpiredData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrderFinishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	return n
}

func (m *QueryGetOrderFinishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OrderFinish.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOrderFinishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOrderFinishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrderFinish) > 0 {
		for _, e := range m.OrderFinish {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetExpiredOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryGetExpiredOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExpiredOrder.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllExpiredOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllExpiredOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExpiredOrder) > 0 {
		for _, e := range m.ExpiredOrder {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shards == nil {
				m.Shards = make(map[string]*ShardMeta)
			}
			var mapkey string
			var mapvalue *ShardMeta
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ShardMeta{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Shards[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, Metadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetModelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetModelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetModelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetModelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetModelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetModelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllModelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllModelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllModelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllModelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllModelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllModelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = append(m.Model, Model{})
			if err := m.Model[len(m.Model)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExpiredDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExpiredDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExpiredDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExpiredDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExpiredDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExpiredDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpiredData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiredData = append(m.ExpiredData, ExpiredData{})
			if err := m.ExpiredData[len(m.ExpiredData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderFinishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderFinishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderFinishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderFinishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderFinishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderFinishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderFinish", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrderFinish.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrderFinishRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrderFinishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrderFinishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrderFinishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrderFinishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrderFinishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderFinish", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderFinish = append(m.OrderFinish, OrderFinish{})
			if err := m.OrderFinish[len(m.OrderFinish)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExpiredOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExpiredOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExpiredOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetExpiredOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetExpiredOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetExpiredOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpiredOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllExpiredOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllExpiredOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllExpiredOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiredOrder = append(m.ExpiredOrder, ExpiredOrder{})
			if err := m.ExpiredOrder[len(m.ExpiredOrder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
