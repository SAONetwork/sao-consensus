// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sao/node/fishmen.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Fishman struct {
	Creater string `protobuf:"bytes,1,opt,name=creater,proto3" json:"creater,omitempty"`
	Peer    string `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *Fishman) Reset()         { *m = Fishman{} }
func (m *Fishman) String() string { return proto.CompactTextString(m) }
func (*Fishman) ProtoMessage()    {}
func (*Fishman) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e486a765505fbe2, []int{0}
}
func (m *Fishman) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fishman) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fishman.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fishman) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fishman.Merge(m, src)
}
func (m *Fishman) XXX_Size() int {
	return m.Size()
}
func (m *Fishman) XXX_DiscardUnknown() {
	xxx_messageInfo_Fishman.DiscardUnknown(m)
}

var xxx_messageInfo_Fishman proto.InternalMessageInfo

func (m *Fishman) GetCreater() string {
	if m != nil {
		return m.Creater
	}
	return ""
}

func (m *Fishman) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

type FishmenParam struct {
	Version     string     `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	PenaltyBase uint64     `protobuf:"varint,2,opt,name=penalty_base,json=penaltyBase,proto3" json:"penalty_base,omitempty"`
	MaxPenalty  uint64     `protobuf:"varint,3,opt,name=max_penalty,json=maxPenalty,proto3" json:"max_penalty,omitempty"`
	Fishmen     []*Fishman `protobuf:"bytes,4,rep,name=fishmen,proto3" json:"fishmen,omitempty"`
}

func (m *FishmenParam) Reset()         { *m = FishmenParam{} }
func (m *FishmenParam) String() string { return proto.CompactTextString(m) }
func (*FishmenParam) ProtoMessage()    {}
func (*FishmenParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e486a765505fbe2, []int{1}
}
func (m *FishmenParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FishmenParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FishmenParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FishmenParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FishmenParam.Merge(m, src)
}
func (m *FishmenParam) XXX_Size() int {
	return m.Size()
}
func (m *FishmenParam) XXX_DiscardUnknown() {
	xxx_messageInfo_FishmenParam.DiscardUnknown(m)
}

var xxx_messageInfo_FishmenParam proto.InternalMessageInfo

func (m *FishmenParam) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *FishmenParam) GetPenaltyBase() uint64 {
	if m != nil {
		return m.PenaltyBase
	}
	return 0
}

func (m *FishmenParam) GetMaxPenalty() uint64 {
	if m != nil {
		return m.MaxPenalty
	}
	return 0
}

func (m *FishmenParam) GetFishmen() []*Fishman {
	if m != nil {
		return m.Fishmen
	}
	return nil
}

func init() {
	proto.RegisterType((*Fishman)(nil), "saonetwork.sao.node.Fishman")
	proto.RegisterType((*FishmenParam)(nil), "saonetwork.sao.node.FishmenParam")
}

func init() { proto.RegisterFile("sao/node/fishmen.proto", fileDescriptor_0e486a765505fbe2) }

var fileDescriptor_0e486a765505fbe2 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xeb, 0xbf, 0xd5, 0x5f, 0xe1, 0x74, 0x32, 0x08, 0x45, 0x08, 0x99, 0xd2, 0x01, 0x75,
	0x72, 0x24, 0x90, 0x60, 0x45, 0x1d, 0x3a, 0xa2, 0x2a, 0x6c, 0x2c, 0xd5, 0x4d, 0xb9, 0xa4, 0x11,
	0xc4, 0x37, 0xb2, 0x0d, 0xa4, 0x6f, 0xc1, 0x43, 0xf0, 0x30, 0x8c, 0x1d, 0x19, 0x51, 0xf2, 0x22,
	0x28, 0x4e, 0xb2, 0xb1, 0xdd, 0x7b, 0xfc, 0x9d, 0x6b, 0x9d, 0xc3, 0x8f, 0x2d, 0x50, 0xa4, 0xe9,
	0x11, 0xa3, 0xa7, 0xcc, 0x6e, 0x73, 0xd4, 0xaa, 0x30, 0xe4, 0x48, 0x1c, 0x5a, 0x20, 0x8d, 0xee,
	0x9d, 0xcc, 0xb3, 0xb2, 0x40, 0xaa, 0x41, 0x4e, 0x8e, 0x52, 0x4a, 0xc9, 0xbf, 0x47, 0xcd, 0xd4,
	0xa2, 0xb3, 0x1b, 0x3e, 0x5e, 0x36, 0x5e, 0xd0, 0x22, 0xe4, 0xe3, 0x8d, 0x41, 0x70, 0x68, 0x42,
	0x36, 0x65, 0xf3, 0x83, 0xb8, 0x5f, 0x85, 0xe0, 0xa3, 0x02, 0xd1, 0x84, 0xff, 0xbc, 0xec, 0xe7,
	0xd9, 0x27, 0xe3, 0x93, 0x65, 0xfb, 0xeb, 0x0a, 0x0c, 0xe4, 0x8d, 0xfd, 0x0d, 0x8d, 0xcd, 0x48,
	0xf7, 0xf6, 0x6e, 0x15, 0xe7, 0x7c, 0x52, 0xa0, 0x86, 0x17, 0xb7, 0x5b, 0x27, 0x60, 0xd1, 0x9f,
	0x19, 0xc5, 0x41, 0xa7, 0x2d, 0xc0, 0xa2, 0x38, 0xe3, 0x41, 0x0e, 0xe5, 0xba, 0x93, 0xc2, 0xa1,
	0x27, 0x78, 0x0e, 0xe5, 0xaa, 0x55, 0xc4, 0x35, 0x1f, 0x77, 0x19, 0xc3, 0xd1, 0x74, 0x38, 0x0f,
	0x2e, 0x4f, 0xd5, 0x1f, 0x21, 0x55, 0x97, 0x25, 0xee, 0xe1, 0xc5, 0xed, 0x57, 0x25, 0xd9, 0xbe,
	0x92, 0xec, 0xa7, 0x92, 0xec, 0xa3, 0x96, 0x83, 0x7d, 0x2d, 0x07, 0xdf, 0xb5, 0x1c, 0x3c, 0x5c,
	0xa4, 0x99, 0xdb, 0xbe, 0x26, 0x6a, 0x43, 0x79, 0x74, 0x0f, 0x74, 0xd7, 0x9e, 0x8a, 0x9a, 0x4a,
	0xcb, 0xb6, 0x54, 0xb7, 0x2b, 0xd0, 0x26, 0xff, 0x7d, 0x51, 0x57, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xda, 0x47, 0x81, 0xe7, 0x6d, 0x01, 0x00, 0x00,
}

func (m *Fishman) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fishman) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fishman) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peer) > 0 {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = encodeVarintFishmen(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creater) > 0 {
		i -= len(m.Creater)
		copy(dAtA[i:], m.Creater)
		i = encodeVarintFishmen(dAtA, i, uint64(len(m.Creater)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FishmenParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FishmenParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FishmenParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fishmen) > 0 {
		for iNdEx := len(m.Fishmen) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fishmen[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFishmen(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.MaxPenalty != 0 {
		i = encodeVarintFishmen(dAtA, i, uint64(m.MaxPenalty))
		i--
		dAtA[i] = 0x18
	}
	if m.PenaltyBase != 0 {
		i = encodeVarintFishmen(dAtA, i, uint64(m.PenaltyBase))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintFishmen(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFishmen(dAtA []byte, offset int, v uint64) int {
	offset -= sovFishmen(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Fishman) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creater)
	if l > 0 {
		n += 1 + l + sovFishmen(uint64(l))
	}
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovFishmen(uint64(l))
	}
	return n
}

func (m *FishmenParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovFishmen(uint64(l))
	}
	if m.PenaltyBase != 0 {
		n += 1 + sovFishmen(uint64(m.PenaltyBase))
	}
	if m.MaxPenalty != 0 {
		n += 1 + sovFishmen(uint64(m.MaxPenalty))
	}
	if len(m.Fishmen) > 0 {
		for _, e := range m.Fishmen {
			l = e.Size()
			n += 1 + l + sovFishmen(uint64(l))
		}
	}
	return n
}

func sovFishmen(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFishmen(x uint64) (n int) {
	return sovFishmen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Fishman) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFishmen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fishman: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fishman: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creater", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishmen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFishmen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFishmen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creater = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishmen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFishmen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFishmen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFishmen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFishmen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FishmenParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFishmen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FishmenParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FishmenParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishmen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFishmen
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFishmen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltyBase", wireType)
			}
			m.PenaltyBase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishmen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PenaltyBase |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPenalty", wireType)
			}
			m.MaxPenalty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishmen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPenalty |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fishmen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishmen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFishmen
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFishmen
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fishmen = append(m.Fishmen, &Fishman{})
			if err := m.Fishmen[len(m.Fishmen)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFishmen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFishmen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFishmen(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFishmen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFishmen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFishmen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFishmen
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFishmen
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFishmen
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFishmen        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFishmen          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFishmen = fmt.Errorf("proto: unexpected end of group")
)
