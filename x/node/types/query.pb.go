// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sao/node/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetNodeRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryGetNodeRequest) Reset()         { *m = QueryGetNodeRequest{} }
func (m *QueryGetNodeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeRequest) ProtoMessage()    {}
func (*QueryGetNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{2}
}
func (m *QueryGetNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeRequest.Merge(m, src)
}
func (m *QueryGetNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeRequest proto.InternalMessageInfo

func (m *QueryGetNodeRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type QueryGetNodeResponse struct {
	Node Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node"`
}

func (m *QueryGetNodeResponse) Reset()         { *m = QueryGetNodeResponse{} }
func (m *QueryGetNodeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeResponse) ProtoMessage()    {}
func (*QueryGetNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{3}
}
func (m *QueryGetNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeResponse.Merge(m, src)
}
func (m *QueryGetNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeResponse proto.InternalMessageInfo

func (m *QueryGetNodeResponse) GetNode() Node {
	if m != nil {
		return m.Node
	}
	return Node{}
}

type QueryAllNodeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Status     uint32             `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *QueryAllNodeRequest) Reset()         { *m = QueryAllNodeRequest{} }
func (m *QueryAllNodeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNodeRequest) ProtoMessage()    {}
func (*QueryAllNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{4}
}
func (m *QueryAllNodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNodeRequest.Merge(m, src)
}
func (m *QueryAllNodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNodeRequest proto.InternalMessageInfo

func (m *QueryAllNodeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllNodeRequest) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type QueryAllNodeResponse struct {
	Node       []Node              `protobuf:"bytes,1,rep,name=node,proto3" json:"node"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNodeResponse) Reset()         { *m = QueryAllNodeResponse{} }
func (m *QueryAllNodeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNodeResponse) ProtoMessage()    {}
func (*QueryAllNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{5}
}
func (m *QueryAllNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNodeResponse.Merge(m, src)
}
func (m *QueryAllNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNodeResponse proto.InternalMessageInfo

func (m *QueryAllNodeResponse) GetNode() []Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *QueryAllNodeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPoolRequest struct {
}

func (m *QueryGetPoolRequest) Reset()         { *m = QueryGetPoolRequest{} }
func (m *QueryGetPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolRequest) ProtoMessage()    {}
func (*QueryGetPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{6}
}
func (m *QueryGetPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolRequest.Merge(m, src)
}
func (m *QueryGetPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolRequest proto.InternalMessageInfo

type QueryGetPoolResponse struct {
	Pool Pool `protobuf:"bytes,1,opt,name=Pool,proto3" json:"Pool"`
}

func (m *QueryGetPoolResponse) Reset()         { *m = QueryGetPoolResponse{} }
func (m *QueryGetPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolResponse) ProtoMessage()    {}
func (*QueryGetPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{7}
}
func (m *QueryGetPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolResponse.Merge(m, src)
}
func (m *QueryGetPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolResponse proto.InternalMessageInfo

func (m *QueryGetPoolResponse) GetPool() Pool {
	if m != nil {
		return m.Pool
	}
	return Pool{}
}

type QueryGetPledgeRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryGetPledgeRequest) Reset()         { *m = QueryGetPledgeRequest{} }
func (m *QueryGetPledgeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPledgeRequest) ProtoMessage()    {}
func (*QueryGetPledgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{8}
}
func (m *QueryGetPledgeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPledgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPledgeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPledgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPledgeRequest.Merge(m, src)
}
func (m *QueryGetPledgeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPledgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPledgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPledgeRequest proto.InternalMessageInfo

func (m *QueryGetPledgeRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type QueryGetPledgeResponse struct {
	Pledge Pledge `protobuf:"bytes,1,opt,name=pledge,proto3" json:"pledge"`
}

func (m *QueryGetPledgeResponse) Reset()         { *m = QueryGetPledgeResponse{} }
func (m *QueryGetPledgeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPledgeResponse) ProtoMessage()    {}
func (*QueryGetPledgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{9}
}
func (m *QueryGetPledgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPledgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPledgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPledgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPledgeResponse.Merge(m, src)
}
func (m *QueryGetPledgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPledgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPledgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPledgeResponse proto.InternalMessageInfo

func (m *QueryGetPledgeResponse) GetPledge() Pledge {
	if m != nil {
		return m.Pledge
	}
	return Pledge{}
}

type QueryAllPledgeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPledgeRequest) Reset()         { *m = QueryAllPledgeRequest{} }
func (m *QueryAllPledgeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPledgeRequest) ProtoMessage()    {}
func (*QueryAllPledgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{10}
}
func (m *QueryAllPledgeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPledgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPledgeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPledgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPledgeRequest.Merge(m, src)
}
func (m *QueryAllPledgeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPledgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPledgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPledgeRequest proto.InternalMessageInfo

func (m *QueryAllPledgeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPledgeResponse struct {
	Pledge     []Pledge            `protobuf:"bytes,1,rep,name=pledge,proto3" json:"pledge"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPledgeResponse) Reset()         { *m = QueryAllPledgeResponse{} }
func (m *QueryAllPledgeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPledgeResponse) ProtoMessage()    {}
func (*QueryAllPledgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{11}
}
func (m *QueryAllPledgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPledgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPledgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPledgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPledgeResponse.Merge(m, src)
}
func (m *QueryAllPledgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPledgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPledgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPledgeResponse proto.InternalMessageInfo

func (m *QueryAllPledgeResponse) GetPledge() []Pledge {
	if m != nil {
		return m.Pledge
	}
	return nil
}

func (m *QueryAllPledgeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPledgeDebtRequest struct {
	Sp string `protobuf:"bytes,1,opt,name=sp,proto3" json:"sp,omitempty"`
}

func (m *QueryGetPledgeDebtRequest) Reset()         { *m = QueryGetPledgeDebtRequest{} }
func (m *QueryGetPledgeDebtRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPledgeDebtRequest) ProtoMessage()    {}
func (*QueryGetPledgeDebtRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{12}
}
func (m *QueryGetPledgeDebtRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPledgeDebtRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPledgeDebtRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPledgeDebtRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPledgeDebtRequest.Merge(m, src)
}
func (m *QueryGetPledgeDebtRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPledgeDebtRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPledgeDebtRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPledgeDebtRequest proto.InternalMessageInfo

func (m *QueryGetPledgeDebtRequest) GetSp() string {
	if m != nil {
		return m.Sp
	}
	return ""
}

type QueryGetPledgeDebtResponse struct {
	PledgeDebt PledgeDebt `protobuf:"bytes,1,opt,name=pledgeDebt,proto3" json:"pledgeDebt"`
}

func (m *QueryGetPledgeDebtResponse) Reset()         { *m = QueryGetPledgeDebtResponse{} }
func (m *QueryGetPledgeDebtResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPledgeDebtResponse) ProtoMessage()    {}
func (*QueryGetPledgeDebtResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{13}
}
func (m *QueryGetPledgeDebtResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPledgeDebtResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPledgeDebtResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPledgeDebtResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPledgeDebtResponse.Merge(m, src)
}
func (m *QueryGetPledgeDebtResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPledgeDebtResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPledgeDebtResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPledgeDebtResponse proto.InternalMessageInfo

func (m *QueryGetPledgeDebtResponse) GetPledgeDebt() PledgeDebt {
	if m != nil {
		return m.PledgeDebt
	}
	return PledgeDebt{}
}

type QueryAllPledgeDebtRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPledgeDebtRequest) Reset()         { *m = QueryAllPledgeDebtRequest{} }
func (m *QueryAllPledgeDebtRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPledgeDebtRequest) ProtoMessage()    {}
func (*QueryAllPledgeDebtRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{14}
}
func (m *QueryAllPledgeDebtRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPledgeDebtRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPledgeDebtRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPledgeDebtRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPledgeDebtRequest.Merge(m, src)
}
func (m *QueryAllPledgeDebtRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPledgeDebtRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPledgeDebtRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPledgeDebtRequest proto.InternalMessageInfo

func (m *QueryAllPledgeDebtRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPledgeDebtResponse struct {
	PledgeDebt []PledgeDebt        `protobuf:"bytes,1,rep,name=pledgeDebt,proto3" json:"pledgeDebt"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPledgeDebtResponse) Reset()         { *m = QueryAllPledgeDebtResponse{} }
func (m *QueryAllPledgeDebtResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPledgeDebtResponse) ProtoMessage()    {}
func (*QueryAllPledgeDebtResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{15}
}
func (m *QueryAllPledgeDebtResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPledgeDebtResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPledgeDebtResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPledgeDebtResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPledgeDebtResponse.Merge(m, src)
}
func (m *QueryAllPledgeDebtResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPledgeDebtResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPledgeDebtResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPledgeDebtResponse proto.InternalMessageInfo

func (m *QueryAllPledgeDebtResponse) GetPledgeDebt() []PledgeDebt {
	if m != nil {
		return m.PledgeDebt
	}
	return nil
}

func (m *QueryAllPledgeDebtResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryFaultRequest struct {
	FaultId string `protobuf:"bytes,1,opt,name=fault_id,json=faultId,proto3" json:"fault_id,omitempty"`
}

func (m *QueryFaultRequest) Reset()         { *m = QueryFaultRequest{} }
func (m *QueryFaultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFaultRequest) ProtoMessage()    {}
func (*QueryFaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{16}
}
func (m *QueryFaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFaultRequest.Merge(m, src)
}
func (m *QueryFaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFaultRequest proto.InternalMessageInfo

func (m *QueryFaultRequest) GetFaultId() string {
	if m != nil {
		return m.FaultId
	}
	return ""
}

type QueryFaultResponse struct {
	Fault *Fault `protobuf:"bytes,1,opt,name=fault,proto3" json:"fault,omitempty"`
}

func (m *QueryFaultResponse) Reset()         { *m = QueryFaultResponse{} }
func (m *QueryFaultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFaultResponse) ProtoMessage()    {}
func (*QueryFaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{17}
}
func (m *QueryFaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFaultResponse.Merge(m, src)
}
func (m *QueryFaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFaultResponse proto.InternalMessageInfo

func (m *QueryFaultResponse) GetFault() *Fault {
	if m != nil {
		return m.Fault
	}
	return nil
}

type QueryAllFaultsRequest struct {
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	ShardId  uint64 `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
}

func (m *QueryAllFaultsRequest) Reset()         { *m = QueryAllFaultsRequest{} }
func (m *QueryAllFaultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFaultsRequest) ProtoMessage()    {}
func (*QueryAllFaultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{18}
}
func (m *QueryAllFaultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFaultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFaultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFaultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFaultsRequest.Merge(m, src)
}
func (m *QueryAllFaultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFaultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFaultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFaultsRequest proto.InternalMessageInfo

func (m *QueryAllFaultsRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *QueryAllFaultsRequest) GetShardId() uint64 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

type QueryAllFaultsResponse struct {
	Faults     []*Fault            `protobuf:"bytes,1,rep,name=faults,proto3" json:"faults,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFaultsResponse) Reset()         { *m = QueryAllFaultsResponse{} }
func (m *QueryAllFaultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFaultsResponse) ProtoMessage()    {}
func (*QueryAllFaultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{19}
}
func (m *QueryAllFaultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFaultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFaultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFaultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFaultsResponse.Merge(m, src)
}
func (m *QueryAllFaultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFaultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFaultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFaultsResponse proto.InternalMessageInfo

func (m *QueryAllFaultsResponse) GetFaults() []*Fault {
	if m != nil {
		return m.Faults
	}
	return nil
}

func (m *QueryAllFaultsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryFishmenRequest struct {
}

func (m *QueryFishmenRequest) Reset()         { *m = QueryFishmenRequest{} }
func (m *QueryFishmenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFishmenRequest) ProtoMessage()    {}
func (*QueryFishmenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{20}
}
func (m *QueryFishmenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFishmenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFishmenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFishmenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFishmenRequest.Merge(m, src)
}
func (m *QueryFishmenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFishmenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFishmenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFishmenRequest proto.InternalMessageInfo

type QueryFishmenResponse struct {
	FishmenParam *FishmenParam `protobuf:"bytes,1,opt,name=fishmenParam,proto3" json:"fishmenParam,omitempty"`
}

func (m *QueryFishmenResponse) Reset()         { *m = QueryFishmenResponse{} }
func (m *QueryFishmenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFishmenResponse) ProtoMessage()    {}
func (*QueryFishmenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d6cf38247b620b, []int{21}
}
func (m *QueryFishmenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFishmenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFishmenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFishmenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFishmenResponse.Merge(m, src)
}
func (m *QueryFishmenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFishmenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFishmenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFishmenResponse proto.InternalMessageInfo

func (m *QueryFishmenResponse) GetFishmenParam() *FishmenParam {
	if m != nil {
		return m.FishmenParam
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "saonetwork.sao.node.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "saonetwork.sao.node.QueryParamsResponse")
	proto.RegisterType((*QueryGetNodeRequest)(nil), "saonetwork.sao.node.QueryGetNodeRequest")
	proto.RegisterType((*QueryGetNodeResponse)(nil), "saonetwork.sao.node.QueryGetNodeResponse")
	proto.RegisterType((*QueryAllNodeRequest)(nil), "saonetwork.sao.node.QueryAllNodeRequest")
	proto.RegisterType((*QueryAllNodeResponse)(nil), "saonetwork.sao.node.QueryAllNodeResponse")
	proto.RegisterType((*QueryGetPoolRequest)(nil), "saonetwork.sao.node.QueryGetPoolRequest")
	proto.RegisterType((*QueryGetPoolResponse)(nil), "saonetwork.sao.node.QueryGetPoolResponse")
	proto.RegisterType((*QueryGetPledgeRequest)(nil), "saonetwork.sao.node.QueryGetPledgeRequest")
	proto.RegisterType((*QueryGetPledgeResponse)(nil), "saonetwork.sao.node.QueryGetPledgeResponse")
	proto.RegisterType((*QueryAllPledgeRequest)(nil), "saonetwork.sao.node.QueryAllPledgeRequest")
	proto.RegisterType((*QueryAllPledgeResponse)(nil), "saonetwork.sao.node.QueryAllPledgeResponse")
	proto.RegisterType((*QueryGetPledgeDebtRequest)(nil), "saonetwork.sao.node.QueryGetPledgeDebtRequest")
	proto.RegisterType((*QueryGetPledgeDebtResponse)(nil), "saonetwork.sao.node.QueryGetPledgeDebtResponse")
	proto.RegisterType((*QueryAllPledgeDebtRequest)(nil), "saonetwork.sao.node.QueryAllPledgeDebtRequest")
	proto.RegisterType((*QueryAllPledgeDebtResponse)(nil), "saonetwork.sao.node.QueryAllPledgeDebtResponse")
	proto.RegisterType((*QueryFaultRequest)(nil), "saonetwork.sao.node.QueryFaultRequest")
	proto.RegisterType((*QueryFaultResponse)(nil), "saonetwork.sao.node.QueryFaultResponse")
	proto.RegisterType((*QueryAllFaultsRequest)(nil), "saonetwork.sao.node.QueryAllFaultsRequest")
	proto.RegisterType((*QueryAllFaultsResponse)(nil), "saonetwork.sao.node.QueryAllFaultsResponse")
	proto.RegisterType((*QueryFishmenRequest)(nil), "saonetwork.sao.node.QueryFishmenRequest")
	proto.RegisterType((*QueryFishmenResponse)(nil), "saonetwork.sao.node.QueryFishmenResponse")
}

func init() { proto.RegisterFile("sao/node/query.proto", fileDescriptor_90d6cf38247b620b) }

var fileDescriptor_90d6cf38247b620b = []byte{
	// 1048 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xc7, 0x33, 0x4e, 0xe2, 0x34, 0x43, 0x8b, 0xc4, 0xe4, 0x45, 0xc9, 0x26, 0x38, 0xc9, 0x94,
	0xc6, 0x21, 0x11, 0xbb, 0x4a, 0x2b, 0x21, 0xb8, 0x91, 0x0a, 0x52, 0x55, 0x45, 0x51, 0x70, 0x6f,
	0x5c, 0xa2, 0xb1, 0x77, 0x71, 0x2c, 0xd6, 0x9e, 0xad, 0x67, 0x5d, 0xa8, 0x4a, 0x11, 0x20, 0x0e,
	0xf4, 0x80, 0x54, 0x09, 0x4e, 0xd0, 0x8f, 0xc0, 0x07, 0xe9, 0xb1, 0x12, 0x17, 0x4e, 0x08, 0x25,
	0x7c, 0x10, 0x34, 0xcf, 0x3c, 0xbb, 0x9e, 0xb5, 0xb7, 0xbb, 0x2e, 0xf2, 0x25, 0xf2, 0x8e, 0x9f,
	0x97, 0xdf, 0xf3, 0x9f, 0xd9, 0xf9, 0x3b, 0x74, 0x59, 0x09, 0xe9, 0xf5, 0xa4, 0x1f, 0x78, 0x0f,
	0x06, 0x41, 0xff, 0x91, 0x1b, 0xf5, 0x65, 0x2c, 0xd9, 0x92, 0x12, 0xb2, 0x17, 0xc4, 0x5f, 0xc9,
	0xfe, 0x97, 0xae, 0x12, 0xd2, 0xd5, 0x01, 0xce, 0x66, 0x5b, 0xca, 0x76, 0x18, 0x78, 0x22, 0xea,
	0x78, 0xa2, 0xd7, 0x93, 0xb1, 0x88, 0x3b, 0xb2, 0xa7, 0x4c, 0x8a, 0xb3, 0xdf, 0x92, 0xaa, 0x2b,
	0x95, 0xd7, 0x14, 0x0a, 0x6b, 0x79, 0x0f, 0x0f, 0x9b, 0x41, 0x2c, 0x0e, 0xbd, 0x48, 0xb4, 0x3b,
	0x3d, 0x08, 0xc6, 0xd8, 0x95, 0xb4, 0x69, 0x24, 0xfa, 0xa2, 0x9b, 0x94, 0x58, 0x4a, 0x97, 0xf5,
	0x1f, 0x5c, 0x1c, 0x02, 0x7e, 0x21, 0x06, 0x61, 0x3c, 0x16, 0x1a, 0x49, 0x19, 0x8e, 0x97, 0x0d,
	0x03, 0xbf, 0x9d, 0x54, 0x70, 0x46, 0x96, 0xcf, 0xfc, 0xa0, 0x99, 0xd4, 0x59, 0x1d, 0x56, 0xef,
	0xa8, 0xf3, 0x6e, 0x90, 0x10, 0xd6, 0xec, 0x69, 0x92, 0x39, 0x5a, 0xb2, 0x93, 0x7c, 0xbf, 0xdc,
	0x96, 0x6d, 0x09, 0x1f, 0x3d, 0xfd, 0xc9, 0xac, 0xf2, 0x65, 0xca, 0x3e, 0xd3, 0x93, 0x9f, 0xc2,
	0x54, 0x8d, 0xe0, 0xc1, 0x20, 0x50, 0x31, 0x3f, 0xa5, 0x4b, 0x99, 0x55, 0x15, 0xc9, 0x9e, 0x0a,
	0xd8, 0x87, 0xb4, 0x6a, 0xa6, 0x5f, 0x23, 0xdb, 0x64, 0xef, 0x8d, 0x9b, 0x1b, 0x6e, 0x8e, 0xe8,
	0xae, 0x49, 0xba, 0x3d, 0xf7, 0xe2, 0xef, 0xad, 0x99, 0x06, 0x26, 0x70, 0x0f, 0x2b, 0xde, 0x09,
	0xe2, 0x13, 0xe9, 0x07, 0xd8, 0x88, 0xad, 0xd1, 0x85, 0x56, 0x3f, 0x10, 0xb1, 0xec, 0x43, 0xc9,
	0xc5, 0x46, 0xf2, 0xc8, 0xef, 0xd1, 0xe5, 0x6c, 0x02, 0x32, 0xdc, 0xa2, 0x73, 0xba, 0x0b, 0x12,
	0xac, 0xe7, 0x12, 0xe8, 0x04, 0xec, 0x0f, 0xc1, 0x7c, 0x80, 0xdd, 0x8f, 0xc2, 0xd0, 0xee, 0x7e,
	0x4c, 0xe9, 0x70, 0xa3, 0xb1, 0xe2, 0xae, 0x6b, 0x74, 0x74, 0xb5, 0x8e, 0xae, 0x39, 0x61, 0xa8,
	0xa6, 0x7b, 0x2a, 0xda, 0x49, 0x6e, 0xc3, 0xca, 0x64, 0xab, 0xb4, 0xaa, 0x62, 0x11, 0x0f, 0xd4,
	0x5a, 0x65, 0x9b, 0xec, 0x5d, 0x6b, 0xe0, 0x13, 0xff, 0x95, 0xe0, 0x10, 0x69, 0xdf, 0xb1, 0x21,
	0x66, 0x27, 0x1e, 0x82, 0xdd, 0xc9, 0xd0, 0x56, 0x80, 0xb6, 0x5e, 0x4a, 0x6b, 0x3a, 0xda, 0xb8,
	0x7c, 0x65, 0xb8, 0x17, 0xa7, 0x52, 0x86, 0xc9, 0xa6, 0x5b, 0x8a, 0x9b, 0xe5, 0x21, 0xac, 0x7e,
	0x2e, 0x54, 0x5c, 0x07, 0x24, 0xb0, 0xfa, 0x33, 0x3f, 0xa4, 0x2b, 0x69, 0x31, 0x38, 0xc2, 0xe5,
	0x3b, 0x7e, 0x9f, 0xae, 0x8e, 0xa6, 0x58, 0xe7, 0x0e, 0x56, 0x8a, 0xcf, 0x1d, 0x84, 0xa4, 0xe7,
	0x0e, 0x9e, 0xf8, 0x19, 0x72, 0x1c, 0x85, 0x61, 0x96, 0x63, 0x4a, 0x7b, 0xcf, 0x9f, 0x13, 0xc4,
	0xb6, 0x3a, 0xe4, 0x60, 0xcf, 0xbe, 0x16, 0xf6, 0xf4, 0xf6, 0xfa, 0x80, 0xae, 0x67, 0x45, 0xfd,
	0x38, 0x68, 0xc6, 0x89, 0x06, 0x6f, 0xd2, 0x8a, 0x8a, 0x70, 0x1b, 0x2a, 0x2a, 0xe2, 0x2d, 0xea,
	0xe4, 0x05, 0xe3, 0x38, 0x9f, 0x50, 0x1a, 0xa5, 0xab, 0xa8, 0xd8, 0x56, 0xc1, 0x48, 0x3a, 0x0c,
	0xc7, 0xb2, 0x12, 0x79, 0x0b, 0x89, 0x52, 0xbd, 0x6c, 0xa2, 0x69, 0xed, 0xca, 0x1f, 0x04, 0x47,
	0x19, 0xe9, 0xf2, 0x8a, 0x51, 0x66, 0xff, 0xd7, 0x28, 0xd3, 0xdb, 0x25, 0x97, 0xbe, 0x05, 0xb4,
	0xc7, 0xda, 0x2f, 0x12, 0x2d, 0xd6, 0xe9, 0x15, 0xf0, 0x8f, 0xb3, 0x8e, 0x9f, 0xbc, 0x2a, 0xf0,
	0x7c, 0xd7, 0xe7, 0x9f, 0xe2, 0xad, 0x8d, 0xf1, 0x38, 0xd5, 0xfb, 0x74, 0x1e, 0x02, 0x50, 0x37,
	0x27, 0x77, 0x20, 0x48, 0x81, 0x59, 0x48, 0xc3, 0x84, 0xf3, 0x93, 0xe1, 0x3b, 0x02, 0xdf, 0x26,
	0x36, 0xc0, 0x1c, 0x7a, 0x25, 0xea, 0xcb, 0x87, 0x1d, 0x3f, 0x48, 0x5e, 0xd6, 0xf4, 0x59, 0xd3,
	0xa9, 0x73, 0xd1, 0xf7, 0x35, 0x9d, 0x9e, 0x7c, 0xae, 0xb1, 0x00, 0xcf, 0x77, 0x7d, 0xfe, 0xbb,
	0xf5, 0x4a, 0x24, 0x05, 0x11, 0xf1, 0x03, 0x5a, 0x85, 0x9e, 0x0a, 0x45, 0x2f, 0x67, 0xc4, 0xf8,
	0xe9, 0xdf, 0x7e, 0xc7, 0xc6, 0x3d, 0x93, 0xdb, 0xaf, 0x85, 0xb7, 0x5f, 0xba, 0x8c, 0xc4, 0xf7,
	0xe8, 0x55, 0xf4, 0x59, 0xf0, 0x35, 0xd4, 0x76, 0x27, 0x9f, 0xdb, 0x0a, 0x44, 0xfc, 0x4c, 0xf2,
	0xcd, 0xa7, 0x57, 0xe9, 0x3c, 0x74, 0x61, 0xdf, 0x11, 0x5a, 0x35, 0x46, 0xc9, 0xea, 0xb9, 0xb5,
	0xc6, 0x5d, 0xd9, 0xd9, 0x2b, 0x0f, 0x34, 0xd0, 0xfc, 0xfa, 0x0f, 0x7f, 0xfe, 0xfb, 0x4b, 0xe5,
	0x6d, 0xb6, 0xe1, 0xdd, 0x17, 0xf2, 0xc4, 0x64, 0x78, 0x23, 0xbf, 0x60, 0xd8, 0xb7, 0xe6, 0x5e,
	0x67, 0x05, 0x65, 0xb3, 0x0e, 0xe1, 0xbc, 0x3b, 0x41, 0x24, 0x12, 0xec, 0x00, 0xc1, 0x06, 0x5b,
	0xcf, 0x27, 0xd0, 0x7d, 0x7f, 0x22, 0x74, 0x4e, 0x9b, 0x5c, 0x09, 0x80, 0x65, 0xd8, 0x25, 0x00,
	0xb6, 0xc5, 0xf2, 0x03, 0x00, 0xb8, 0xc1, 0xae, 0xe7, 0x02, 0xc0, 0x9f, 0xc7, 0xe8, 0x3c, 0x4f,
	0xd8, 0xf7, 0x84, 0x2e, 0xe8, 0xec, 0xa3, 0xb0, 0x50, 0x8e, 0xec, 0xcf, 0x87, 0x22, 0x9a, 0x11,
	0xc3, 0x2f, 0x91, 0x03, 0xec, 0xfd, 0x99, 0x3e, 0x11, 0xe6, 0xf6, 0xdf, 0x2f, 0xd6, 0xd9, 0xf6,
	0x31, 0xe7, 0x60, 0xa2, 0x58, 0xc4, 0x78, 0x0f, 0x30, 0xea, 0xec, 0x46, 0xfe, 0xae, 0x40, 0xb0,
	0x25, 0xcb, 0x53, 0x42, 0x17, 0x4d, 0x05, 0x2d, 0xcc, 0x7e, 0xe1, 0xb8, 0x13, 0x53, 0x8d, 0xf9,
	0x64, 0xd9, 0x69, 0x35, 0x9a, 0x3c, 0x27, 0x94, 0x0e, 0x2f, 0x63, 0xe6, 0x4e, 0x30, 0xb6, 0x65,
	0x2c, 0x8e, 0x37, 0x71, 0xfc, 0x6b, 0x48, 0x05, 0x3f, 0xcb, 0xbd, 0xc7, 0x2a, 0x7a, 0xc2, 0x7e,
	0x23, 0xf4, 0xda, 0xb0, 0x8a, 0x96, 0xcb, 0x9d, 0x40, 0x82, 0x09, 0x09, 0x73, 0x4d, 0x8c, 0xef,
	0x01, 0x21, 0x67, 0xdb, 0x65, 0x84, 0xec, 0x1b, 0x3a, 0x0f, 0x57, 0x2a, 0xdb, 0x7d, 0x75, 0x0f,
	0xdb, 0x7a, 0x9c, 0x7a, 0x69, 0x1c, 0x32, 0x70, 0x60, 0xd8, 0x64, 0x4e, 0x2e, 0x03, 0x5c, 0xdd,
	0xec, 0x67, 0x42, 0x17, 0x53, 0x27, 0x28, 0x39, 0x45, 0x19, 0xff, 0x29, 0x39, 0x45, 0x59, 0x6b,
	0xe1, 0x75, 0x40, 0xd9, 0x61, 0x5b, 0xb9, 0x28, 0x22, 0x0c, 0xcf, 0xd0, 0x49, 0x7e, 0x24, 0x74,
	0x01, 0x6f, 0xea, 0xa2, 0x97, 0x3d, 0xeb, 0x0f, 0x45, 0x2f, 0xfb, 0x88, 0x65, 0xf0, 0x77, 0x80,
	0xa4, 0xc6, 0x36, 0xf3, 0x45, 0x31, 0xd1, 0xb7, 0x3f, 0x7a, 0x71, 0x51, 0x23, 0x2f, 0x2f, 0x6a,
	0xe4, 0x9f, 0x8b, 0x1a, 0x79, 0x76, 0x59, 0x9b, 0x79, 0x79, 0x59, 0x9b, 0xf9, 0xeb, 0xb2, 0x36,
	0xf3, 0xf9, 0x6e, 0xbb, 0x13, 0x9f, 0x0f, 0x9a, 0x6e, 0x4b, 0x76, 0x47, 0x2b, 0x7c, 0x6d, 0x6a,
	0xc4, 0x8f, 0xa2, 0x40, 0x35, 0xab, 0xf0, 0x2f, 0xdc, 0xad, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x54, 0x2b, 0x97, 0x86, 0x11, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Pool by index.
	Pool(ctx context.Context, in *QueryGetPoolRequest, opts ...grpc.CallOption) (*QueryGetPoolResponse, error)
	// Queries a Node by index.
	Node(ctx context.Context, in *QueryGetNodeRequest, opts ...grpc.CallOption) (*QueryGetNodeResponse, error)
	// Queries a list of Node items.
	NodeAll(ctx context.Context, in *QueryAllNodeRequest, opts ...grpc.CallOption) (*QueryAllNodeResponse, error)
	// Queries a Pledge by index.
	Pledge(ctx context.Context, in *QueryGetPledgeRequest, opts ...grpc.CallOption) (*QueryGetPledgeResponse, error)
	// Queries a list of Pledge items.
	PledgeAll(ctx context.Context, in *QueryAllPledgeRequest, opts ...grpc.CallOption) (*QueryAllPledgeResponse, error)
	// Queries a PledgeDebt by index.
	PledgeDebt(ctx context.Context, in *QueryGetPledgeDebtRequest, opts ...grpc.CallOption) (*QueryGetPledgeDebtResponse, error)
	// Queries a list of PledgeDebt items.
	PledgeDebtAll(ctx context.Context, in *QueryAllPledgeDebtRequest, opts ...grpc.CallOption) (*QueryAllPledgeDebtResponse, error)
	// Queries a list of Fault items.
	Fault(ctx context.Context, in *QueryFaultRequest, opts ...grpc.CallOption) (*QueryFaultResponse, error)
	// Queries a list of AllFaults items.
	AllFaults(ctx context.Context, in *QueryAllFaultsRequest, opts ...grpc.CallOption) (*QueryAllFaultsResponse, error)
	// Queries a list of Fishmen items.
	Fishmen(ctx context.Context, in *QueryFishmenRequest, opts ...grpc.CallOption) (*QueryFishmenResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)

	err := c.cc.Invoke(ctx, "/saonetwork.sao.node.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}

	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *QueryGetPoolRequest, opts ...grpc.CallOption) (*QueryGetPoolResponse, error) {
	out := new(QueryGetPoolResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.node.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Node(ctx context.Context, in *QueryGetNodeRequest, opts ...grpc.CallOption) (*QueryGetNodeResponse, error) {
	out := new(QueryGetNodeResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.node.Query/Node", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeAll(ctx context.Context, in *QueryAllNodeRequest, opts ...grpc.CallOption) (*QueryAllNodeResponse, error) {
	out := new(QueryAllNodeResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.node.Query/NodeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pledge(ctx context.Context, in *QueryGetPledgeRequest, opts ...grpc.CallOption) (*QueryGetPledgeResponse, error) {
	out := new(QueryGetPledgeResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.node.Query/Pledge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PledgeAll(ctx context.Context, in *QueryAllPledgeRequest, opts ...grpc.CallOption) (*QueryAllPledgeResponse, error) {
	out := new(QueryAllPledgeResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.node.Query/PledgeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PledgeDebt(ctx context.Context, in *QueryGetPledgeDebtRequest, opts ...grpc.CallOption) (*QueryGetPledgeDebtResponse, error) {
	out := new(QueryGetPledgeDebtResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.node.Query/PledgeDebt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PledgeDebtAll(ctx context.Context, in *QueryAllPledgeDebtRequest, opts ...grpc.CallOption) (*QueryAllPledgeDebtResponse, error) {
	out := new(QueryAllPledgeDebtResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.node.Query/PledgeDebtAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Fault(ctx context.Context, in *QueryFaultRequest, opts ...grpc.CallOption) (*QueryFaultResponse, error) {
	out := new(QueryFaultResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.node.Query/Fault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllFaults(ctx context.Context, in *QueryAllFaultsRequest, opts ...grpc.CallOption) (*QueryAllFaultsResponse, error) {
	out := new(QueryAllFaultsResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.node.Query/AllFaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Fishmen(ctx context.Context, in *QueryFishmenRequest, opts ...grpc.CallOption) (*QueryFishmenResponse, error) {
	out := new(QueryFishmenResponse)
	err := c.cc.Invoke(ctx, "/saonetwork.sao.node.Query/Fishmen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Pool by index.
	Pool(context.Context, *QueryGetPoolRequest) (*QueryGetPoolResponse, error)
	// Queries a Node by index.
	Node(context.Context, *QueryGetNodeRequest) (*QueryGetNodeResponse, error)
	// Queries a list of Node items.
	NodeAll(context.Context, *QueryAllNodeRequest) (*QueryAllNodeResponse, error)
	// Queries a Pledge by index.
	Pledge(context.Context, *QueryGetPledgeRequest) (*QueryGetPledgeResponse, error)
	// Queries a list of Pledge items.
	PledgeAll(context.Context, *QueryAllPledgeRequest) (*QueryAllPledgeResponse, error)
	// Queries a PledgeDebt by index.
	PledgeDebt(context.Context, *QueryGetPledgeDebtRequest) (*QueryGetPledgeDebtResponse, error)
	// Queries a list of PledgeDebt items.
	PledgeDebtAll(context.Context, *QueryAllPledgeDebtRequest) (*QueryAllPledgeDebtResponse, error)
	// Queries a list of Fault items.
	Fault(context.Context, *QueryFaultRequest) (*QueryFaultResponse, error)
	// Queries a list of AllFaults items.
	AllFaults(context.Context, *QueryAllFaultsRequest) (*QueryAllFaultsResponse, error)
	// Queries a list of Fishmen items.
	Fishmen(context.Context, *QueryFishmenRequest) (*QueryFishmenResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Pool(ctx context.Context, req *QueryGetPoolRequest) (*QueryGetPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryServer) Node(ctx context.Context, req *QueryGetNodeRequest) (*QueryGetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Node not implemented")
}
func (*UnimplementedQueryServer) NodeAll(ctx context.Context, req *QueryAllNodeRequest) (*QueryAllNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAll not implemented")
}
func (*UnimplementedQueryServer) Pledge(ctx context.Context, req *QueryGetPledgeRequest) (*QueryGetPledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pledge not implemented")
}
func (*UnimplementedQueryServer) PledgeAll(ctx context.Context, req *QueryAllPledgeRequest) (*QueryAllPledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PledgeAll not implemented")
}
func (*UnimplementedQueryServer) PledgeDebt(ctx context.Context, req *QueryGetPledgeDebtRequest) (*QueryGetPledgeDebtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PledgeDebt not implemented")
}
func (*UnimplementedQueryServer) PledgeDebtAll(ctx context.Context, req *QueryAllPledgeDebtRequest) (*QueryAllPledgeDebtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PledgeDebtAll not implemented")
}
func (*UnimplementedQueryServer) Fault(ctx context.Context, req *QueryFaultRequest) (*QueryFaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fault not implemented")
}
func (*UnimplementedQueryServer) AllFaults(ctx context.Context, req *QueryAllFaultsRequest) (*QueryAllFaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllFaults not implemented")
}
func (*UnimplementedQueryServer) Fishmen(ctx context.Context, req *QueryFishmenRequest) (*QueryFishmenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fishmen not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.node.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.node.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryGetPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Node_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Node(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.node.Query/Node",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Node(ctx, req.(*QueryGetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.node.Query/NodeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeAll(ctx, req.(*QueryAllNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.node.Query/Pledge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pledge(ctx, req.(*QueryGetPledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PledgeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PledgeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.node.Query/PledgeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PledgeAll(ctx, req.(*QueryAllPledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PledgeDebt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPledgeDebtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PledgeDebt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.node.Query/PledgeDebt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PledgeDebt(ctx, req.(*QueryGetPledgeDebtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PledgeDebtAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPledgeDebtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PledgeDebtAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.node.Query/PledgeDebtAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PledgeDebtAll(ctx, req.(*QueryAllPledgeDebtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Fault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Fault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.node.Query/Fault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Fault(ctx, req.(*QueryFaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllFaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllFaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.node.Query/AllFaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllFaults(ctx, req.(*QueryAllFaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Fishmen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFishmenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Fishmen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/saonetwork.sao.node.Query/Fishmen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Fishmen(ctx, req.(*QueryFishmenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "saonetwork.sao.node.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "Node",
			Handler:    _Query_Node_Handler,
		},
		{
			MethodName: "NodeAll",
			Handler:    _Query_NodeAll_Handler,
		},
		{
			MethodName: "Pledge",
			Handler:    _Query_Pledge_Handler,
		},
		{
			MethodName: "PledgeAll",
			Handler:    _Query_PledgeAll_Handler,
		},
		{
			MethodName: "PledgeDebt",
			Handler:    _Query_PledgeDebt_Handler,
		},
		{
			MethodName: "PledgeDebtAll",
			Handler:    _Query_PledgeDebtAll_Handler,
		},
		{
			MethodName: "Fault",
			Handler:    _Query_Fault_Handler,
		},
		{
			MethodName: "AllFaults",
			Handler:    _Query_AllFaults_Handler,
		},
		{
			MethodName: "Fishmen",
			Handler:    _Query_Fishmen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sao/node/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllNodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Node) > 0 {
		for iNdEx := len(m.Node) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Node[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPledgeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPledgeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPledgeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPledgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPledgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPledgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pledge.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPledgeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPledgeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPledgeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPledgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPledgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPledgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pledge) > 0 {
		for iNdEx := len(m.Pledge) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pledge[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPledgeDebtRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPledgeDebtRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPledgeDebtRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sp) > 0 {
		i -= len(m.Sp)
		copy(dAtA[i:], m.Sp)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPledgeDebtResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPledgeDebtResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPledgeDebtResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PledgeDebt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPledgeDebtRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPledgeDebtRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPledgeDebtRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPledgeDebtResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPledgeDebtResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPledgeDebtResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PledgeDebt) > 0 {
		for iNdEx := len(m.PledgeDebt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PledgeDebt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FaultId) > 0 {
		i -= len(m.FaultId)
		copy(dAtA[i:], m.FaultId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FaultId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fault != nil {
		{
			size, err := m.Fault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFaultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFaultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFaultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShardId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ShardId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFaultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFaultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFaultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Faults) > 0 {
		for iNdEx := len(m.Faults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Faults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFishmenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFishmenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFishmenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryFishmenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFishmenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFishmenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FishmenParam != nil {
		{
			size, err := m.FishmenParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Node.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllNodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QueryAllNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Node) > 0 {
		for _, e := range m.Node {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pool.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPledgeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPledgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pledge.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPledgeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPledgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pledge) > 0 {
		for _, e := range m.Pledge {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPledgeDebtRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sp)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPledgeDebtResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PledgeDebt.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPledgeDebtRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPledgeDebtResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PledgeDebt) > 0 {
		for _, e := range m.PledgeDebt {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FaultId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fault != nil {
		l = m.Fault.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFaultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ShardId != 0 {
		n += 1 + sovQuery(uint64(m.ShardId))
	}
	return n
}

func (m *QueryAllFaultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Faults) > 0 {
		for _, e := range m.Faults {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFishmenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryFishmenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FishmenParam != nil {
		l = m.FishmenParam.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = append(m.Node, Node{})
			if err := m.Node[len(m.Node)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPledgeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPledgeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPledgeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPledgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPledgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPledgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pledge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pledge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPledgeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPledgeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPledgeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPledgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPledgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPledgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pledge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pledge = append(m.Pledge, Pledge{})
			if err := m.Pledge[len(m.Pledge)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPledgeDebtRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPledgeDebtRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPledgeDebtRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPledgeDebtResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPledgeDebtResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPledgeDebtResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PledgeDebt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PledgeDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPledgeDebtRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPledgeDebtRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPledgeDebtRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPledgeDebtResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPledgeDebtResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPledgeDebtResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PledgeDebt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PledgeDebt = append(m.PledgeDebt, PledgeDebt{})
			if err := m.PledgeDebt[len(m.PledgeDebt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaultId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaultId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fault == nil {
				m.Fault = &Fault{}
			}
			if err := m.Fault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFaultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFaultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFaultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			m.ShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFaultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFaultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFaultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Faults = append(m.Faults, &Fault{})
			if err := m.Faults[len(m.Faults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFishmenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFishmenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFishmenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFishmenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFishmenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFishmenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FishmenParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FishmenParam == nil {
				m.FishmenParam = &FishmenParam{}
			}
			if err := m.FishmenParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
