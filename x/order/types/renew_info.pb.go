// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sao/order/renew_info.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RenewInfo struct {
	OrderId uint64     `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Pledge  types.Coin `protobuf:"bytes,2,opt,name=pledge,proto3" json:"pledge"`
}

func (m *RenewInfo) Reset()         { *m = RenewInfo{} }
func (m *RenewInfo) String() string { return proto.CompactTextString(m) }
func (*RenewInfo) ProtoMessage()    {}
func (*RenewInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_90fdb280e2671da1, []int{0}
}
func (m *RenewInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenewInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenewInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenewInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewInfo.Merge(m, src)
}
func (m *RenewInfo) XXX_Size() int {
	return m.Size()
}
func (m *RenewInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RenewInfo proto.InternalMessageInfo

func (m *RenewInfo) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *RenewInfo) GetPledge() types.Coin {
	if m != nil {
		return m.Pledge
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*RenewInfo)(nil), "saonetwork.sao.order.RenewInfo")
}

func init() { proto.RegisterFile("sao/order/renew_info.proto", fileDescriptor_90fdb280e2671da1) }

var fileDescriptor_90fdb280e2671da1 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8f, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x63, 0x54, 0x15, 0x11, 0xb6, 0xa8, 0x43, 0xc8, 0x60, 0x2a, 0x16, 0x3a, 0xd9, 0x2a,
	0x0c, 0xcc, 0x94, 0xa9, 0x0b, 0x43, 0xd8, 0x18, 0x40, 0x4e, 0x72, 0x0d, 0x11, 0xd4, 0x7f, 0x64,
	0x1b, 0x0a, 0x6f, 0xc1, 0x63, 0x75, 0xcc, 0xc8, 0x84, 0x50, 0xf2, 0x22, 0x28, 0x71, 0xba, 0xdd,
	0xe9, 0x3e, 0x7d, 0xba, 0x2f, 0x4c, 0xac, 0x82, 0x84, 0x29, 0xc8, 0x48, 0x43, 0x9a, 0x76, 0xcf,
	0x95, 0xde, 0x40, 0xd4, 0x06, 0x0e, 0xd1, 0xcc, 0x2a, 0x68, 0x72, 0x3b, 0x98, 0x57, 0x61, 0x15,
	0xc4, 0x80, 0x25, 0xb3, 0x12, 0x25, 0x06, 0x40, 0xf6, 0x93, 0x67, 0x13, 0x9e, 0xc3, 0x6e, 0x61,
	0x65, 0xa6, 0x2c, 0xc9, 0x8f, 0x65, 0x46, 0x4e, 0x2d, 0x65, 0x8e, 0x4a, 0xfb, 0xfb, 0xc5, 0x53,
	0x78, 0x92, 0xf6, 0xfe, 0xb5, 0xde, 0x20, 0x8a, 0xc3, 0xe3, 0xc1, 0xb5, 0x2e, 0x62, 0x36, 0x67,
	0x8b, 0x49, 0x7a, 0x58, 0xa3, 0x9b, 0x70, 0x5a, 0xbf, 0x51, 0x51, 0x52, 0x7c, 0x34, 0x67, 0x8b,
	0xd3, 0xab, 0x33, 0xe1, 0xbd, 0xa2, 0xf7, 0x8a, 0xd1, 0x2b, 0xee, 0x50, 0xe9, 0xd5, 0x64, 0xff,
	0x7b, 0x1e, 0xa4, 0x23, 0xbe, 0xba, 0xdd, 0xb7, 0x9c, 0x35, 0x2d, 0x67, 0x7f, 0x2d, 0x67, 0xdf,
	0x1d, 0x0f, 0x9a, 0x8e, 0x07, 0x3f, 0x1d, 0x0f, 0x1e, 0x2f, 0xcb, 0xca, 0xbd, 0xbc, 0x67, 0x22,
	0xc7, 0x56, 0x3e, 0x28, 0xdc, 0xfb, 0x20, 0xd9, 0x77, 0x7f, 0x8e, 0xe5, 0xee, 0xab, 0x26, 0x9b,
	0x4d, 0x87, 0x4f, 0xaf, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x17, 0x8e, 0x12, 0x56, 0x13, 0x01,
	0x00, 0x00,
}

func (m *RenewInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenewInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenewInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pledge.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRenewInfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.OrderId != 0 {
		i = encodeVarintRenewInfo(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRenewInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovRenewInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RenewInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovRenewInfo(uint64(m.OrderId))
	}
	l = m.Pledge.Size()
	n += 1 + l + sovRenewInfo(uint64(l))
	return n
}

func sovRenewInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRenewInfo(x uint64) (n int) {
	return sovRenewInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RenewInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRenewInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenewInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenewInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenewInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pledge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRenewInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRenewInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRenewInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pledge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRenewInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRenewInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRenewInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRenewInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRenewInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRenewInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRenewInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRenewInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRenewInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRenewInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRenewInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRenewInfo = fmt.Errorf("proto: unexpected end of group")
)
