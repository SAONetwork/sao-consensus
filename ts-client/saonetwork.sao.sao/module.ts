// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgComplete } from "./types/sao/tx";
<<<<<<< HEAD
<<<<<<< HEAD
import { MsgReady } from "./types/sao/tx";
import { MsgReject } from "./types/sao/tx";
import { MsgCancel } from "./types/sao/tx";
=======
>>>>>>> dcf6850 (add claim)
=======
import { MsgReject } from "./types/sao/tx";
>>>>>>> 1938811 (move pledge to node module)
import { MsgTerminate } from "./types/sao/tx";
import { MsgStore } from "./types/sao/tx";
import { MsgCancel } from "./types/sao/tx";


<<<<<<< HEAD
<<<<<<< HEAD
export { MsgComplete, MsgReady, MsgReject, MsgCancel, MsgTerminate, MsgStore };
=======
export { MsgComplete, MsgTerminate, MsgStore, MsgCancel, MsgReject };
>>>>>>> dcf6850 (add claim)
=======
export { MsgComplete, MsgReject, MsgTerminate, MsgStore, MsgCancel };
>>>>>>> 1938811 (move pledge to node module)

type sendMsgCompleteParams = {
  value: MsgComplete,
  fee?: StdFee,
  memo?: string
};

<<<<<<< HEAD
type sendMsgReadyParams = {
  value: MsgReady,
=======
type sendMsgRejectParams = {
  value: MsgReject,
  fee?: StdFee,
  memo?: string
};

type sendMsgTerminateParams = {
  value: MsgTerminate,
>>>>>>> 1938811 (move pledge to node module)
  fee?: StdFee,
  memo?: string
};

type sendMsgStoreParams = {
  value: MsgStore,
  fee?: StdFee,
  memo?: string
};

type sendMsgCancelParams = {
  value: MsgCancel,
  fee?: StdFee,
  memo?: string
};

<<<<<<< HEAD
<<<<<<< HEAD
type sendMsgTerminateParams = {
  value: MsgTerminate,
  fee?: StdFee,
  memo?: string
};

type sendMsgStoreParams = {
  value: MsgStore,
=======
type sendMsgRejectParams = {
  value: MsgReject,
>>>>>>> dcf6850 (add claim)
  fee?: StdFee,
  memo?: string
};

=======
>>>>>>> 1938811 (move pledge to node module)

type msgCompleteParams = {
  value: MsgComplete,
};

<<<<<<< HEAD
type msgReadyParams = {
  value: MsgReady,
=======
type msgRejectParams = {
  value: MsgReject,
};

type msgTerminateParams = {
  value: MsgTerminate,
>>>>>>> 1938811 (move pledge to node module)
};

type msgStoreParams = {
  value: MsgStore,
};

type msgCancelParams = {
  value: MsgCancel,
};

<<<<<<< HEAD
<<<<<<< HEAD
type msgTerminateParams = {
  value: MsgTerminate,
};

type msgStoreParams = {
  value: MsgStore,
=======
type msgRejectParams = {
  value: MsgReject,
>>>>>>> dcf6850 (add claim)
};

=======
>>>>>>> 1938811 (move pledge to node module)

export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgComplete({ value, fee, memo }: sendMsgCompleteParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgComplete: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgComplete({ value: MsgComplete.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgComplete: Could not broadcast Tx: '+ e.message)
			}
		},
		
<<<<<<< HEAD
		async sendMsgReady({ value, fee, memo }: sendMsgReadyParams): Promise<DeliverTxResponse> {
=======
		async sendMsgReject({ value, fee, memo }: sendMsgRejectParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgReject: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgReject({ value: MsgReject.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgReject: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgTerminate({ value, fee, memo }: sendMsgTerminateParams): Promise<DeliverTxResponse> {
>>>>>>> 1938811 (move pledge to node module)
			if (!signer) {
					throw new Error('TxClient:sendMsgReady: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgReady({ value: MsgReady.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgReady: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgStore({ value, fee, memo }: sendMsgStoreParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgStore: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgStore({ value: MsgStore.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgStore: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCancel({ value, fee, memo }: sendMsgCancelParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCancel: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCancel({ value: MsgCancel.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCancel: Could not broadcast Tx: '+ e.message)
			}
		},
		
<<<<<<< HEAD
<<<<<<< HEAD
		async sendMsgTerminate({ value, fee, memo }: sendMsgTerminateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgTerminate: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgTerminate({ value: MsgTerminate.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgTerminate: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgStore({ value, fee, memo }: sendMsgStoreParams): Promise<DeliverTxResponse> {
=======
		async sendMsgReject({ value, fee, memo }: sendMsgRejectParams): Promise<DeliverTxResponse> {
>>>>>>> dcf6850 (add claim)
			if (!signer) {
					throw new Error('TxClient:sendMsgReject: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgReject({ value: MsgReject.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgReject: Could not broadcast Tx: '+ e.message)
			}
		},
		
=======
>>>>>>> 1938811 (move pledge to node module)
		
		msgComplete({ value }: msgCompleteParams): EncodeObject {
			try {
				return { typeUrl: "/saonetwork.sao.sao.MsgComplete", value: MsgComplete.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgComplete: Could not create message: ' + e.message)
			}
		},
		
<<<<<<< HEAD
		msgReady({ value }: msgReadyParams): EncodeObject {
=======
		msgReject({ value }: msgRejectParams): EncodeObject {
			try {
				return { typeUrl: "/saonetwork.sao.sao.MsgReject", value: MsgReject.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgReject: Could not create message: ' + e.message)
			}
		},
		
		msgTerminate({ value }: msgTerminateParams): EncodeObject {
>>>>>>> 1938811 (move pledge to node module)
			try {
				return { typeUrl: "/saonetwork.sao.sao.MsgReady", value: MsgReady.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgReady: Could not create message: ' + e.message)
			}
		},
		
		msgStore({ value }: msgStoreParams): EncodeObject {
			try {
				return { typeUrl: "/saonetwork.sao.sao.MsgStore", value: MsgStore.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgStore: Could not create message: ' + e.message)
			}
		},
		
		msgCancel({ value }: msgCancelParams): EncodeObject {
			try {
				return { typeUrl: "/saonetwork.sao.sao.MsgCancel", value: MsgCancel.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCancel: Could not create message: ' + e.message)
			}
		},
		
<<<<<<< HEAD
<<<<<<< HEAD
		msgTerminate({ value }: msgTerminateParams): EncodeObject {
			try {
				return { typeUrl: "/saonetwork.sao.sao.MsgTerminate", value: MsgTerminate.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgTerminate: Could not create message: ' + e.message)
			}
		},
		
		msgStore({ value }: msgStoreParams): EncodeObject {
=======
		msgReject({ value }: msgRejectParams): EncodeObject {
>>>>>>> dcf6850 (add claim)
			try {
				return { typeUrl: "/saonetwork.sao.sao.MsgReject", value: MsgReject.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgReject: Could not create message: ' + e.message)
			}
		},
		
=======
>>>>>>> 1938811 (move pledge to node module)
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseUrl: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]>;

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });
		this.tx = txClient({ signer: client.signer, addr: client.env.rpcURL, prefix: client.env.prefix ?? "cosmos" });
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			SaonetworkSaoSao: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;