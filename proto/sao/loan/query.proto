syntax = "proto3";
package saonetwork.sao.loan;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "sao/loan/params.proto";
import "sao/loan/loan_pool.proto";
// this line is used by starport scaffolding # 1
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/SaoNetwork/sao/x/loan/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/SaoNetwork/sao/loan/params";
  }
  // Queries a LoanPool by index.
	rpc LoanPool(QueryGetLoanPoolRequest) returns (QueryGetLoanPoolResponse) {
		option (google.api.http).get = "/SaoNetwork/sao/loan/loan_pool";
	}
// Queries a list of Available items.
	rpc Available(QueryAvailableRequest) returns (QueryAvailableResponse) {
		option (google.api.http).get = "/SaoNetwork/sao/loan/available/{account}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetLoanPoolRequest {}

message QueryGetLoanPoolResponse {
	LoanPool LoanPool = 1 [(gogoproto.nullable) = false];
}
message QueryAvailableRequest {
  string account = 1;
}

message QueryAvailableResponse {
  cosmos.base.v1beta1.Coin total = 1 [(gogoproto.nullable) = false];
  cosmos.base.v1beta1.Coin available = 2 [(gogoproto.nullable) = false];
}

// this line is used by starport scaffolding # 3
