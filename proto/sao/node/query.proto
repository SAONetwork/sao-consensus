syntax = "proto3";
package saonetwork.sao.node;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "sao/node/params.proto";
import "sao/node/node.proto";
import "sao/node/pool.proto";
import "sao/node/pledge.proto";
import "sao/node/pledge_debt.proto";
// this line is used by starport scaffolding # 1
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/SaoNetwork/sao/x/node/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/SaoNetwork/sao/node/params";
  }

  // Queries a Pool by index.
	rpc Pool(QueryGetPoolRequest) returns (QueryGetPoolResponse) {
		option (google.api.http).get = "/SaoNetwork/sao/node/pool";
	}
  // Queries a Node by index.
	rpc Node(QueryGetNodeRequest) returns (QueryGetNodeResponse) {
		option (google.api.http).get = "/SaoNetwork/sao/node/node/{creator}";
	}

	// Queries a list of Node items.
	rpc NodeAll(QueryAllNodeRequest) returns (QueryAllNodeResponse) {
		option (google.api.http).get = "/SaoNetwork/sao/node/node";
	}

// Queries a Pledge by index.
	rpc Pledge(QueryGetPledgeRequest) returns (QueryGetPledgeResponse) {
		option (google.api.http).get = "/SaoNetwork/sao/node/pledge/{creator}";
	}

	// Queries a list of Pledge items.
	rpc PledgeAll(QueryAllPledgeRequest) returns (QueryAllPledgeResponse) {
		option (google.api.http).get = "/SaoNetwork/sao/node/pledge";
	}


// Queries a PledgeDebt by index.
	rpc PledgeDebt(QueryGetPledgeDebtRequest) returns (QueryGetPledgeDebtResponse) {
		option (google.api.http).get = "/SaoNetwork/sao/node/pledge_debt/{sp}";
	}

	// Queries a list of PledgeDebt items.
	rpc PledgeDebtAll(QueryAllPledgeDebtRequest) returns (QueryAllPledgeDebtResponse) {
		option (google.api.http).get = "/SaoNetwork/sao/node/pledge_debt";
	}


// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetNodeRequest {
	  string creator = 1;

}

message QueryGetNodeResponse {
	Node node = 1 [(gogoproto.nullable) = false];
}

message QueryAllNodeRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
	uint32 status = 2;
}

message QueryAllNodeResponse {
	repeated Node node = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPoolRequest {}

message QueryGetPoolResponse {
	Pool Pool = 1 [(gogoproto.nullable) = false];
}
message QueryGetPledgeRequest {
	  string creator = 1;

}

message QueryGetPledgeResponse {
	Pledge pledge = 1 [(gogoproto.nullable) = false];
}

message QueryAllPledgeRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPledgeResponse {
	repeated Pledge pledge = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


message QueryGetPledgeDebtRequest {
	  string sp = 1;

}

message QueryGetPledgeDebtResponse {
	PledgeDebt pledgeDebt = 1 [(gogoproto.nullable) = false];
}

message QueryAllPledgeDebtRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPledgeDebtResponse {
	repeated PledgeDebt pledgeDebt = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3

